package com.silverglobe.base.lns.batch;

import java.math.BigDecimal;
import java.math.RoundingMode;
import java.sql.Timestamp;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Comparator;
import java.util.Date;
//import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.Optional;
//import java.util.Map.Entry;
import java.util.function.Predicate;
import java.util.stream.Collectors;

import com.google.gson.Gson;
import com.silverglobe.base.lns.batch.ob.LoansProcessorOB;
import com.silverglobe.base.lns.compute.LoansAccrueInterestPointToPoint;
import com.silverglobe.base.lns.compute.LoansAccrueInterestRuleOf78;
import com.silverglobe.base.lns.compute.LoansRebateEarnedOnRuleOf78;
import com.silverglobe.base.lns.compute.LoansRebateEarnedOnStraightLineDaily;
import com.silverglobe.base.lns.compute.LoansRebateEarnedOnYearly;
import com.silverglobe.base.lns.compute.LoansRebateFactorOnRuleOf78;
import com.silverglobe.base.lns.compute.LoansYearBaseDaysLoader;
import com.silverglobe.base.lns.compute.LoansYearBaseLoader;
import com.silverglobe.base.lns.procedure.LoansAccrueCommitmentFee;
import com.silverglobe.base.lns.procedure.LoansAccrueInterest;
import com.silverglobe.base.lns.procedure.LoansAccrueInterestAmortization;
import com.silverglobe.base.lns.procedure.LoansAccrueInterestSubsidy;
import com.silverglobe.base.lns.procedure.LoansAccrueInterestTierRate;
import com.silverglobe.base.lns.procedure.LoansAccrueLateCharge;
import com.silverglobe.base.lns.procedure.LoansComputeRate;
import com.silverglobe.base.lns.procedure.LoansMinimumPaymentAmount;
//import com.silverglobe.base.lns.procedure.LoansComputeBalanceOnMain;
//import com.silverglobe.base.lns.procedure.LoansComputeRate;
//import com.silverglobe.base.lns.procedure.LoansComputeRateOnRateTable;
import com.silverglobe.base.lns.procedure.LoansRebateEarnedOnDaily;
import com.silverglobe.base.lns.procedure.LoansRebateEarnedOnGraceDaily;
import com.silverglobe.base.lns.procedure.LoansRebateEarnedOnGraceMonthly;
import com.silverglobe.base.lns.procedure.LoansRebateEarnedOnMonthly;
import com.silverglobe.base.lns.procedure.LoansRetrievePaymentBilling;
import com.silverglobe.base.lns.procedure.LoansRetrievePaymentNotice;
import com.silverglobe.base.lns.procedure.LoansRetrieveTieredRate;
import com.silverglobe.base.lns.procedure.LoansSetRestAmount;
import com.silverglobe.base.lns.procedure.LoansUpdateTransactionHistory;
import com.silverglobe.base.lns.procedure.LoansAccrueLateCharge.IO;
import com.silverglobe.base.util.BigDecimalConstants;
//import com.silverglobe.base.lns.procedure.LoansRetrieveTieredRate.LNDTIRHI;
import com.silverglobe.base.util.CommonDateAdjustBusiness;
import com.silverglobe.base.util.CommonDateAdvanceByTerm;
import com.silverglobe.base.util.CommonDateComputeDuration;
import com.silverglobe.base.util.CommonRoundCent;
import com.silverglobe.base.util.SVXDateTimeFormatUtil;
import com.silverglobe.base.util.ScaleValue;
import com.silverglobe.entities.facility.LLDAPPF;
import com.silverglobe.entities.loans.LNDAACH;
import com.silverglobe.entities.loans.LNDBNOT;
import com.silverglobe.entities.loans.LNDCOMT;
import com.silverglobe.entities.loans.LNDDEPR;
import com.silverglobe.entities.loans.LNDDFEE;
//import com.silverglobe.entities.loans.LNDCSRL;
import com.silverglobe.entities.loans.LNDEXCP;
import com.silverglobe.entities.loans.LNDHIST;
import com.silverglobe.entities.loans.LNDIRSC;
import com.silverglobe.entities.loans.LNDISLM;
import com.silverglobe.entities.loans.LNDJDSM;
import com.silverglobe.entities.loans.LNDMAST;
//import com.silverglobe.entities.loans.LNDJDSM;
import com.silverglobe.entities.loans.LNDMIDM;
import com.silverglobe.entities.loans.LNDMSTS;
import com.silverglobe.entities.loans.LNDPAR1;
import com.silverglobe.entities.loans.LNDPMTB;
import com.silverglobe.entities.loans.LNDPMTF;
import com.silverglobe.entities.loans.LNDPMTI;
import com.silverglobe.entities.loans.LNDPMTN;
import com.silverglobe.entities.loans.LNDPRSC;
import com.silverglobe.entities.loans.LNDPSCH;
import com.silverglobe.entities.loans.LNDRATE;
import com.silverglobe.entities.loans.LNDROLL;
import com.silverglobe.entities.loans.LNDSUBS;
import com.silverglobe.entities.loans.LNDTIRH;
import com.silverglobe.entities.loans.LNPPAR2;
import com.silverglobe.entities.loans.LNPPAR6;
import com.silverglobe.entities.loans.LNPRPSD;
import com.silverglobe.entities.system.SSPAPPL;
import com.silverglobe.entities.system.SSPPARE;
import com.silverglobe.entities.system.SSPRATH;
import com.silverglobe.repository.CommonSQLProcessor;
import com.silverglobe.repository.SVXOB;
import com.silverglobe.sql.SQLProcessor;
import com.silverglobe.startup.CommonInMemoryParameterAccessor;
//import com.silverglobe.sql.CommonSQLProcessorOutput;
//import com.silverglobe.sql.SQLProcessor;
//import com.silverglobe.startup.CommonInMemoryParameterAccessor;
//import com.silverglobe.util.CommonArrayListAccessor;
import com.silverglobe.util.CommonDateProcessor;
//import com.silverglobe.util.CommonHmapAccessor;
import com.silverglobe.util.Xid;
import com.silverglobe.util.CommonGsonParser;
import com.silverglobe.base.lns.procedure.LoansUpdatePaymentBilling;

public class LoansProcessorPaymentBillingBuilder {
 
//	private CommonHmapAccessor objHeader;
//	private CommonHmapAccessor objInput;
//	private CommonHmapAccessor objOutput;
//	private CommonHmapAccessor objWork;
//	private CommonHmapAccessor objOption;
	// *********************************************************************
	// Declaration
	// *********************************************************************

	private final String strClassname = "LoansProcessorPaymentBillingBuilder";

	private CommonDateProcessor objCommonDateProcessor;


	// Retrieve Global Memory
//	private CommonInMemoryParameterAccessor objParameterLNPPAR6;
//	private CommonInMemoryParameterAccessor objParameterLNPRPSD;

	private LNDBNOT LNDBNOT;

	private BigDecimal bg = BigDecimal.ZERO;
	
	private BigDecimal PMTWRK = BigDecimal.ZERO;
	private BigDecimal PMTWPRN = BigDecimal.ZERO;
	private BigDecimal PMTWINT = BigDecimal.ZERO;
	private BigDecimal PMTWMIN = BigDecimal.ZERO;
	private BigDecimal PMTWRSI = BigDecimal.ZERO;
	private BigDecimal IPMTAMWRK = BigDecimal.ZERO;
	
	private BigDecimal WPRTPM = BigDecimal.ZERO;
	private BigDecimal WINTAD = BigDecimal.ZERO;
	private BigDecimal WLCAD = BigDecimal.ZERO;
	private BigDecimal WINTADMI = BigDecimal.ZERO;
	private BigDecimal WINTADRI = BigDecimal.ZERO;
	private BigDecimal WINTADRL = BigDecimal.ZERO;
	
	private BigDecimal WKBINT = BigDecimal.ZERO;
	private BigDecimal WKBLC = BigDecimal.ZERO;
	private BigDecimal WKBMOR = BigDecimal.ZERO;
	private BigDecimal WKBCMF = BigDecimal.ZERO;
	private BigDecimal WRKOTH = BigDecimal.ZERO;
	private BigDecimal WRKMIS = BigDecimal.ZERO;
	private BigDecimal WRKCOM = BigDecimal.ZERO;
	private BigDecimal WASSLC = BigDecimal.ZERO;
	private BigDecimal WPENIN = BigDecimal.ZERO;
	
	private BigDecimal WFRATE = BigDecimal.ZERO;
	private BigDecimal WFMORT = BigDecimal.ZERO;
	private BigDecimal WFMIAM = BigDecimal.ZERO;
	private BigDecimal WFMMAM = BigDecimal.ZERO;
	
	private BigDecimal BASE = BigDecimal.ZERO;
	private BigDecimal YBSACC = BigDecimal.ZERO;
	private BigDecimal NDAYS = BigDecimal.ZERO;
	private BigDecimal AMOUNT = BigDecimal.ZERO;
	private BigDecimal RATACC = BigDecimal.ZERO;
	private BigDecimal SAVAMT = BigDecimal.ZERO;
	private BigDecimal SAVRAT = BigDecimal.ZERO;
	private BigDecimal ACRINT = BigDecimal.ZERO;
	private BigDecimal DAYINT = BigDecimal.ZERO;
	
	private BigDecimal ACCBAL = BigDecimal.ZERO;
	private BigDecimal ACCRAT = BigDecimal.ZERO;
	private BigDecimal DAINT = BigDecimal.ZERO;

	private BigDecimal SACRIN = BigDecimal.ZERO;
	private BigDecimal SINTRB = BigDecimal.ZERO;
	private BigDecimal WINTRB = BigDecimal.ZERO;
	
	private BigDecimal RBDAT8 = BigDecimal.ZERO;
	
	private String WMNUID = "LN2100";
	private String WMNWID = "LN2100";
	
	private Boolean foundLNDPSCH;

	private BigDecimal XPMTWRK = BigDecimal.ZERO;
	private Boolean WriteBilling = true;
	CommonInMemoryParameterAccessor objParameter = new CommonInMemoryParameterAccessor(); 
	Boolean isParameterFound = false;
//	String PECBAT = "";
//	String lfectp="";
//	private List<LNDMIDM> listLNDMIDMWriteCollection = new ArrayList<LNDMIDM>();
//	private String StrSelectedFields = "";

	String strSchema = "";
	CommonSQLProcessor objSQLProcessor;
//	LinkedHashMap<Object, Object> lmapSortingOrder = new LinkedHashMap<Object, Object>();
//	LinkedHashMap<Object, Object> lmapConditionValue = new LinkedHashMap<Object, Object>();
	LinkedHashMap<Object, Object> lmapCondition = new LinkedHashMap<Object, Object>();
//	CommonSQLProcessorOutput objSQLProcessorOutput = new CommonSQLProcessorOutput();
//	HashMap<String, Object> hmapFieldList = new HashMap<String, Object>();

//	boolean isFound, isError, isParameterFound;
//	protected LinkedHashMap<Integer, HashMap> lhmapRecordList;
	boolean isError;
	
	/* judgement */
	private BigDecimal JDBPNO = BigDecimal.ZERO;
	private BigDecimal JDBMCO = BigDecimal.ZERO;
	private BigDecimal JDBOCO = BigDecimal.ZERO;
	private BigDecimal JDBLCO = BigDecimal.ZERO;
	private BigDecimal JDBCFO = BigDecimal.ZERO;
	private BigDecimal JDBRIO = BigDecimal.ZERO;
	private BigDecimal JDBMIO = BigDecimal.ZERO;
	private BigDecimal JDBINO = BigDecimal.ZERO;
	private BigDecimal JDBRLO = BigDecimal.ZERO;
	private BigDecimal JDBINX = BigDecimal.ZERO;
	private BigDecimal JDBLCX = BigDecimal.ZERO;
	private BigDecimal JDBCFX = BigDecimal.ZERO;
	private BigDecimal JDBMCX = BigDecimal.ZERO;
	private BigDecimal JDBOCX = BigDecimal.ZERO;
	private BigDecimal JDBPRO = BigDecimal.ZERO;

	// *********************************************************************
	// Constructor
	// *********************************************************************
	public LoansProcessorPaymentBillingBuilder() throws Exception{
		initialiseOnce();		
		initialiseOncedb();
	}

	// *********************************************************************
	// Initialization
	// *********************************************************************
	public void initialiseOnce() throws Exception {
//		objHeader = new CommonHmapAccessor();
//		objInput = new CommonHmapAccessor();
//		objOutput = new CommonHmapAccessor();
//		objWork = new CommonHmapAccessor();
//		objOption = new CommonHmapAccessor();

		objCommonDateProcessor = new CommonDateProcessor();

//		objParameterLNPPAR6 = new CommonInMemoryParameterAccessor();
//		objParameterLNPRPSD = new CommonInMemoryParameterAccessor();

	}

	// *********************************************************************
	// Load Structure into Database File
	// *********************************************************************
	private void initialiseOncedb() throws Exception {

//		LNDBNOT LNDBNOT = new LNDBNOT();
//		LNDPMTB LNDPMTB = new LNDPMTB();

	}

	// *********************************************************************
	// Load Structure into Database File
	// *********************************************************************
	private void initialiseWorkField() throws Exception {

		PMTWRK = BigDecimal.ZERO;
		PMTWPRN = BigDecimal.ZERO;
		PMTWINT = BigDecimal.ZERO;
		PMTWMIN = BigDecimal.ZERO;
		PMTWRSI = BigDecimal.ZERO;
		IPMTAMWRK = BigDecimal.ZERO;
		
		WPRTPM = BigDecimal.ZERO;
		WINTAD = BigDecimal.ZERO;
		WLCAD = BigDecimal.ZERO;
		WINTADMI = BigDecimal.ZERO;
		WINTADRI = BigDecimal.ZERO;
		WINTADRL = BigDecimal.ZERO;

		WKBINT = BigDecimal.ZERO;
		WKBLC  = BigDecimal.ZERO;
		WKBMOR = BigDecimal.ZERO;
		WKBCMF = BigDecimal.ZERO;
		WRKOTH = BigDecimal.ZERO;
		WRKMIS = BigDecimal.ZERO;
		WRKCOM = BigDecimal.ZERO;
		WASSLC = BigDecimal.ZERO;
		WPENIN = BigDecimal.ZERO;
		
		WFRATE = BigDecimal.ZERO;
		WFMORT = BigDecimal.ZERO;
		WFMIAM = BigDecimal.ZERO;
		WFMMAM = BigDecimal.ZERO;
		
		BASE = BigDecimal.ZERO;
		YBSACC = BigDecimal.ZERO;
		NDAYS = BigDecimal.ZERO;
		AMOUNT = BigDecimal.ZERO;
		RATACC = BigDecimal.ZERO;
		SAVAMT = BigDecimal.ZERO;
		SAVRAT = BigDecimal.ZERO;
		ACRINT = BigDecimal.ZERO;
		DAYINT = BigDecimal.ZERO;
		
		ACCBAL = BigDecimal.ZERO;
		ACCRAT = BigDecimal.ZERO;
		DAINT = BigDecimal.ZERO;
		
		SACRIN = BigDecimal.ZERO;
		SINTRB = BigDecimal.ZERO;
		WINTRB = BigDecimal.ZERO;

		RBDAT8 = BigDecimal.ZERO;
		
		foundLNDPSCH = false;

	}
	
	// *********************************************************************
	// Exit Routine
	// *********************************************************************
	public void exit() throws Exception {

		objCommonDateProcessor = null;

//		objParameterLNPPAR6 = null;
//		objParameterLNPRPSD = null;

	}





	// *********************************************************************
	// program end
	// *********************************************************************

	/*******************************************************************************************************************************************************
	 * V3.1 enhancement
	 *******************************************************************************************************************************************************/

	// *********************************************************************
	// V3 enhancement
	// *********************************************************************

	public class IO  implements SVXOB{

		private boolean OBFLAG;
		private SVXOB OB;
		private LNDMAST LNDMAST;
		private LNDMSTS LNDMSTS;
		private LNDISLM LNDISLM;
		private LNDSUBS LNDSUBS;
		//private LNDDEPR LNDDEPR;
		private LNDHIST LNDHIST;

		private List<LNDDEPR> listLNDDEPR;
		private List<LNDMIDM> listLNDMIDM;
		private List<LNDDFEE> listLNDDFEE;
		private List<LNDPMTB> listLNDPMTB;
		private List<LNDPMTF> listLNDPMTF;
		private List<LNDPMTI> listLNDPMTI;
		private List<LNDPSCH> listLNDPSCH;
		private List<LNDPRSC> listLNDPRSC;
		private List<LNDIRSC> listLNDIRSC;
		private List<LNDRATE> listLNDRATE;
		private List<LNDTIRH> listLNDTIRHI;
		private List<LNDCOMT> listLNDCOMT;
		private List<LNDROLL> listLNDROLL;
		private List<LNDEXCP> listLNDEXCB;
		private List<LNDBNOT> listLNDBNOT;
		private List<LNDAACH> listLNDAACH;
		private List<LNDPMTN> listLNDPMTN;
		private List<LNDHIST> listLNDHIST;

		private LLDAPPF LLDAPPF;
		private LNDPAR1 LNDPAR1;
		private LNPPAR2 LNPPAR2;
		private LNPPAR6 LNPPAR6;
		private LNPRPSD LNPRPSD;
		private SSPAPPL SSPAPPL;
		private List<SSPPARE> listSSPPARE;
		private SSPRATH SSPRATH;
		private LNDJDSM LNDJDSM;

		private String Xid;
		private String SSAROT;
		private String ODTYPE;
		private String MATUAC;
		private String ISLACT;
		private String CSRFLG;
		private String BILLED;
		private boolean isMaturityOver;
		private String DAYRST;
		private String RCLLAC;
		private String BS8REB;
		private String BS8ACC;
		private String CAPINT;
		private String WAFTGRC;

		private String SSICUR;
		private BigDecimal LL1NUM;
		private BigDecimal LL1NB8;
		private BigDecimal LL1PD8;
		private BigDecimal LL1LM8;
		private BigDecimal PNT01;
		private BigDecimal PNT01N;
		private BigDecimal OSBAL;
		private BigDecimal TOTRES;
		private BigDecimal LTDILC;
		private BigDecimal MAXILC;
		private BigDecimal XMTDT8;
		private BigDecimal XPMTCD;
		private BigDecimal WMINCG;
		private BigDecimal TESTMIN;
		private BigDecimal BKDCDF;
		
		public void setOB(SVXOB OB){
			this.OB =OB;
			OBFLAG = true;
		}

		public LNDMAST getLNDMAST() throws Exception{
			if(OBFLAG){
				return OB.invokeMethod("getLNDMAST");
			}else{
				if(LNDMAST == null) {
					LNDMAST = new LNDMAST();
				}
				return LNDMAST;
			}
		}

		public LNDMSTS getLNDMSTS() throws Exception{
			if(OBFLAG){
				return OB.invokeMethod("getLNDMSTS");
			}else{
				if(LNDMSTS == null) {
					LNDMSTS = new LNDMSTS();
				}
				return LNDMSTS;
			}
		}

		public LNDISLM getLNDISLM() throws Exception{
			if(OBFLAG){
				return OB.invokeMethod("getLNDISLM");
			}else{
				if(LNDISLM == null) {
					LNDISLM = new LNDISLM();
				}
				return LNDISLM;
			}
		}

		public LNDSUBS getLNDSUBS() throws Exception{
			if(OBFLAG){
				return OB.invokeMethod("getLNDSUBS");
			}else{
				if(LNDSUBS == null) {
					LNDSUBS = new LNDSUBS();
				}
				return LNDSUBS;
			}
		}
		
		public LNDJDSM getLNDJDSM() throws Exception{
			if(OBFLAG){
				return OB.invokeMethod("getLNDJDSM");
			}else{
				if(LNDJDSM == null) {
					LNDJDSM = new LNDJDSM();
				}
				return LNDJDSM;
			}
		}

//		public LNDDEPR getLNDDEPR() throws Exception{
//			if(OBFLAG){
//				return OB.invokeMethod("getLNDDEPR");
//			}else{
//				if(LNDDEPR == null) {
//					LNDDEPR = new LNDDEPR();
//				}
//				return LNDDEPR;
//			}
//		}
		public List<LNDDEPR> getListLNDDEPR() throws Exception{
			if(OBFLAG){
				return OB.invokeMethod("getListLNDDEPR");
			}else{
				if(listLNDDEPR == null) {
					listLNDDEPR = new ArrayList<LNDDEPR>();
				}
				return listLNDDEPR;

			}
		}
		
		public List<LNDMIDM> getListLNDMIDM() throws Exception{
			if(OBFLAG){
				return OB.invokeMethod("getListLNDMIDM");
			}else{
				if(listLNDMIDM == null) {
					listLNDMIDM = new ArrayList<LNDMIDM>();
				}
				return listLNDMIDM;

			}
		}

		
		public List<LNDDFEE> getListLNDDFEE() throws Exception{
			if(OBFLAG){
				return OB.invokeMethod("getListLNDDFEE");
			}else{
				if(listLNDDFEE == null) {
					listLNDDFEE = new ArrayList<LNDDFEE>();
				}
				return listLNDDFEE;

			}
		}
		
		public void write_LNDPMTB(LNDPMTB LNDPMTB) throws Exception{
			if(OBFLAG){
			}else{
				isError = objSQLProcessor.cacheProcessor().write("LNDPMTB", LNDPMTB.getHmap()).execute().getError();
			}
		}

		public void update_LNDPMTB(LNDPMTB LNDPMTB) throws Exception{
			if(OBFLAG){
			}else{
				lmapCondition.clear();
				lmapCondition.put("LBACCT", LNDPMTB.getLbacct());
				lmapCondition.put("LBATYP", LNDPMTB.getLbatyp());
				lmapCondition.put("LBDUD8", LNDPMTB.getLbdud8());
				isError = objSQLProcessor.cacheProcessor().update("LNDPMTB", LNDPMTB.getHmap(),lmapCondition).execute().getError();
			}
		}

		//		public LNDPMTB getLNDPMTB() throws Exception{
		//			if(OBFLAG){
		//				return OB.invokeMethod("getLNDPMTB");
		//			}else{
		//				if(LNDPMTB == null) {
		//					LNDPMTB = new LNDPMTB();
		//				}
		//				return LNDPMTB;
		//			}
		//		}

		public List<LNDPMTB> getListLNDPMTB() throws Exception{
			if(OBFLAG){
				return OB.invokeMethod("getListLNDPMTB");
			}else{
				if(listLNDPMTB == null) {
					listLNDPMTB = new ArrayList<LNDPMTB>();
				}
				return listLNDPMTB;

			}
		}

		public List<LNDPMTF> getListLNDPMTF() throws Exception{
			if(OBFLAG){
				return OB.invokeMethod("getListLNDPMTF");
			}else{
				if(listLNDPMTF == null) {
					listLNDPMTF = new ArrayList<LNDPMTF>();
				}
				return listLNDPMTF;

			}
		}

		public List<LNDPMTI> getListLNDPMTI() throws Exception{
			if(OBFLAG){
				return OB.invokeMethod("getListLNDPMTI");
			}else{
				if(listLNDPMTI == null) {
					listLNDPMTI = new ArrayList<LNDPMTI>();
				}
				return listLNDPMTI;

			}
		}
	
		public List<LNDPSCH> getListLNDPSCH() throws Exception{
			if(OBFLAG){
				return OB.invokeMethod("getListLNDPSCH");
			}else{
				if(listLNDPSCH == null) {
					listLNDPSCH = new ArrayList<LNDPSCH>();
				}
				return listLNDPSCH;

			}
		}

		public List<LNDPRSC> getListLNDPRSC() throws Exception{
			if(OBFLAG){
				return OB.invokeMethod("getListLNDPRSC");
			}else{
				if(listLNDPRSC == null) {
					listLNDPRSC = new ArrayList<LNDPRSC>();
				}
				return listLNDPRSC;

			}
		}


		public List<LNDIRSC> getListLNDIRSC() throws Exception{
			if(OBFLAG){
				return OB.invokeMethod("getListLNDIRSC");
			}else{
				if(listLNDIRSC == null) {
					listLNDIRSC = new ArrayList<LNDIRSC>();
				}
				return listLNDIRSC;

			}
		}

		public List<LNDRATE> getListLNDRATE() throws Exception{
			if(OBFLAG){
				return OB.invokeMethod("getListLNDRATE");
			}else{
				if(listLNDRATE == null) {
					listLNDRATE = new ArrayList<LNDRATE>();
				}
				return listLNDRATE;

			}
		}
		
		public LNDHIST getLNDFTRNI() throws Exception{
			if(OBFLAG){
				return OB.invokeMethod("getLNDFTRNI");
			}else{
				if(LNDHIST == null) {
					LNDHIST = new LNDHIST();
				}
				return LNDHIST;
			}
		}
		
		public List<LNDHIST> getListLNDHIST() throws Exception{
			if(OBFLAG){
				return OB.invokeMethod("getListLNDHIST");
			}else{
				return null;

			}
		}

//		public void setListLNDTIRHI(List<LNDTIRH> listLNDTIRHI) throws Exception{
//			if(OBFLAG){
//				OB.invokeMethod("setListLNDTIRHI(listLNDTIRHI)");
//			}else{
//				this.listLNDTIRHI.addAll(listLNDTIRHI);
//
//			}
//		}
//		
//		public List<LNDTIRH> getListLNDTIRHI() throws Exception{
//			if(OBFLAG){
//				return OB.invokeMethod("getListLNDTIRHI");
//			}else{
//				if(listLNDTIRHI == null) {
//					listLNDTIRHI = new ArrayList<LNDTIRH>();
//				}
//				return listLNDTIRHI;
//
//			}
//		}
		
		public void setListLNDTIRHI(List<LNDTIRH> listLNDTIRHI){
			this.listLNDTIRHI = listLNDTIRHI;
		}
		
		public List<LNDTIRH> getListLNDTIRHI() throws Exception {
			if(listLNDTIRHI == null) {
				listLNDTIRHI = new ArrayList<LNDTIRH>();
			}
			return listLNDTIRHI;
		}
		
		public List<LNDCOMT> getListLNDCOMT() throws Exception{
			if(OBFLAG){
				return OB.invokeMethod("getListLNDCOMT");
			}else{
				if(listLNDCOMT == null) {
					listLNDCOMT = new ArrayList<LNDCOMT>();
				}
				return listLNDCOMT;

			}
		}
		
		public List<LNDROLL> getListLNDROLL() throws Exception{
			if(OBFLAG){
				return OB.invokeMethod("getListLNDROLL");
			}else{
				if(listLNDROLL == null) {
					listLNDROLL = new ArrayList<LNDROLL>();
				}
				return listLNDROLL;

			}
		}

		public List<LNDAACH> getListLNDAACH() throws Exception{
			if(OBFLAG){
				return OB.invokeMethod("getListLNDAACH");
			}else{
				if(listLNDAACH == null) {
					listLNDAACH = new ArrayList<LNDAACH>();
				}
				return listLNDAACH;

			}
		}

		public void write_LNDBNOT(LNDBNOT LNDBNOT) throws Exception{
			if(OBFLAG){
			}else{
				isError = objSQLProcessor.cacheProcessor().write("LNDBNOT", LNDBNOT.getHmap()).execute().getError();
			}
		}

		public void update_LNDBNOT(LNDBNOT LNDBNOT) throws Exception{
			if(OBFLAG){
			}else{
				lmapCondition.clear();
				lmapCondition.put("ACCTNO", LNDBNOT.getAcctno());
				lmapCondition.put("ACTYPE", LNDBNOT.getActype());
				lmapCondition.put("LBCDT8", LNDBNOT.getLbcdt8());
				isError = objSQLProcessor.cacheProcessor().update("LNDBNOT", LNDBNOT.getHmap(),lmapCondition).execute().getError();
			}
		}

		//		public LNDBNOT getLNDBNOT() throws Exception{
		//			if(OBFLAG){
		//				return OB.invokeMethod("getLNDBNOT");
		//			}else{
		//				if(LNDBNOT == null) {
		//					LNDBNOT = new LNDBNOT();
		//				}
		//				return LNDBNOT;
		//			}
		//		}

		public List<LNDBNOT> getListLNDBNOT() throws Exception{
			if(OBFLAG){
				return OB.invokeMethod("getListLNDBNOT");
			}else{
				if(listLNDBNOT == null) {
					listLNDBNOT = new ArrayList<LNDBNOT>();
				}
				return listLNDBNOT;

			}
		}

		//		public LNDEXCP getLNDEXCB() throws Exception{
		//			if(OBFLAG){
		//				return OB.invokeMethod("getLNDEXCB");
		//			}else{
		//				if(LNDEXCB == null) {
		//					LNDEXCB = new LNDEXCP();
		//				}
		//				return LNDEXCB;
		//			}
		//		}

		public List<LNDEXCP> getListLNDEXCB() throws Exception{
			if(OBFLAG){
				return OB.invokeMethod("getListLNDEXCB");
			}else{
				if(listLNDEXCB == null) {
					listLNDEXCB = new ArrayList<LNDEXCP>();
				}
				return listLNDEXCB;

			}
		}
		
		public List<LNDPMTN> getListLNDPMTN() throws Exception{
			if(OBFLAG){
				return OB.invokeMethod("getListLNDPMTN");
			}else{
				if(listLNDPMTN == null) {
					listLNDPMTN = new ArrayList<LNDPMTN>();
				}
				return listLNDPMTN;

			}
		}

		public LNDPAR1 getLNDPAR1() throws Exception{
			if(OBFLAG){
				return OB.invokeMethod("getLNDPAR1");
			}else{
				if(LNDPAR1 == null) {
					LNDPAR1 = new LNDPAR1();
				}
				return LNDPAR1;
			}
		}

		public LNPPAR2 getLNPPAR2() throws Exception{
			if(OBFLAG){
				return OB.invokeMethod("getLNPPAR2");
			}else{
				if(LNPPAR2 == null) {
					LNPPAR2 = new LNPPAR2();
				}
				return LNPPAR2;
			}
		}
		
		public LNPPAR6 getLNPPAR6() throws Exception{
			if(OBFLAG){
				return OB.invokeMethod("getLNPPAR6");
			}else{
				if(LNPPAR6 == null) {
					LNPPAR6 = new LNPPAR6();
				}
				return LNPPAR6;
			}
		}
		
		public LNPRPSD getLNPRPSD() throws Exception{
			if(OBFLAG){
				return OB.invokeMethod("getLNPRPSD");
			}else{
				if(LNPRPSD == null) {
					LNPRPSD = new LNPRPSD();
				}
				return LNPRPSD;
			}
		}
		
				
		public SSPAPPL getSSPAPPL() throws Exception{
			if(OBFLAG){
				return OB.invokeMethod("getSSPAPPL");
			}else{
				if(SSPAPPL == null) {
					SSPAPPL = new SSPAPPL();
				}
				return SSPAPPL;
			}
		}
		
		public List<SSPPARE> getListSSPPARE() throws Exception{
			if(OBFLAG){
				return OB.invokeMethod("getListSSPPARE");
			}else{
				if(listSSPPARE == null) {
					listSSPPARE = new ArrayList<SSPPARE>();
				}
				return listSSPPARE;

			}
		}

		public SSPRATH getSSPRATH() throws Exception{
			if(OBFLAG){
				return OB.invokeMethod("getSSPRATH");
			}else{
				if(SSPRATH == null) {
					SSPRATH = new SSPRATH();
				}
				return SSPRATH;
			}
		}

		private void setISLACT() throws Exception{
			if(OBFLAG){
				if ((boolean) OB.invokeMethod("isIslamicAccount")) {
					this.ISLACT = "Y";
				}
				else {
					this.ISLACT = "N";
				}
			}
		}

		private void setCSRFLG() throws Exception{
			if(OBFLAG){
				if (OB.invokeMethod("getCSRFLG") == "Y") {
					this.CSRFLG = "Y";
				}
				else {
					this.CSRFLG = "N";
				}
			}
		}
		
		private void setXid() throws Exception{
			if(OBFLAG){
				this.Xid = OB.invokeMethod("getXid");
			}
		}

		private void setODTYPE() throws Exception{
			if(OBFLAG){
				this.ODTYPE = OB.invokeMethod("getODTYPE");
			}
		}

		private void setMATUAC() throws Exception{
			if(OBFLAG){
				this.isMaturityOver = OB.invokeMethod("getMATUAC");
				if (this.isMaturityOver) {
					this.MATUAC = "Y";
				}
				else {
					this.MATUAC = "N";
				}
			}
		}

		private void setDAYRST() throws Exception{
			if(OBFLAG){
				this.DAYRST =  OB.invokeMethod("getDAYRST");
			}
		}

		private void setRCLLAC() throws Exception{
			if(OBFLAG){
				this.RCLLAC =  OB.invokeMethod("getRCLLAC");
			}
		}

		private void setBS8REB() throws Exception{
			if(OBFLAG){
				this.BS8REB =  OB.invokeMethod("getBS8REB");
			}
		}

		private void setBS8ACC() throws Exception{
			if(OBFLAG){
				this.BS8ACC =  OB.invokeMethod("getBS8ACC");
			}
		}

		private void setCAPINT() throws Exception{
			if(OBFLAG){
				this.CAPINT =  OB.invokeMethod("getCAPINT");
			}
		}

		private void setWAFTGRC() throws Exception{
			if(OBFLAG){
				this.WAFTGRC =  OB.invokeMethod("getWAFTGRC");
			}
		}
		
		private void setSSICUR() throws Exception{
			if(OBFLAG){
				this.SSICUR =  OB.invokeMethod("getSSICUR");
			}
		}
		
		private void setLL1NUM() throws Exception{
			if(OBFLAG){
//				this.LL1NUM =  OB.invokeMethod("getLL1NUM");
				this.LL1NUM =  BigDecimal.ONE;
			}
		}
		
		private void setLL1NB8() throws Exception{
			if(OBFLAG){
				this.LL1NB8 =  OB.invokeMethod("getLL1NB8");
			}
		}
		
		private void setLL1PD8() throws Exception{
			if(OBFLAG){
				this.LL1PD8 =  OB.invokeMethod("getLL1PD8");
			}
		}
		
		private void setLL1LM8() throws Exception{
			if(OBFLAG){
				this.LL1LM8 =  OB.invokeMethod("getLL1LM8");
			}
		}
		
		private void setPNT01() throws Exception{
			if(OBFLAG){
				this.PNT01 =  OB.invokeMethod("getPNT01");
			}
		}

		private void setPNT01N() throws Exception{
			if(OBFLAG){
				this.PNT01N =  OB.invokeMethod("getPNT01N");
			}
		}

		private void setOSBAL() throws Exception{
			if(OBFLAG){
				this.OSBAL =  OB.invokeMethod("getOSBAL");
			}
		}
		private void setTOTRES() throws Exception{
			if(OBFLAG){
				this.TOTRES =  OB.invokeMethod("getTOTRES");
			}
		}
		private void setLTDILC() throws Exception{
			if(OBFLAG){
				this.LTDILC =  OB.invokeMethod("getLTDILC");
			}
		}

		private void setMAXILC() throws Exception{
			if(OBFLAG){
				this.MAXILC =  OB.invokeMethod("getMAXILC");
			}
		}
		
		private void setWMINCG() throws Exception{
			if(OBFLAG){
				this.WMINCG =  OB.invokeMethod("getWMINCG");
			}
		}
		
		private void setTESTMIN() throws Exception{
			if(OBFLAG){
				this.TESTMIN =  OB.invokeMethod("getTESTMIN");
			}
		}
		
		private void setBKDCDF() throws Exception{
			if(OBFLAG){
				this.BKDCDF =  OB.invokeMethod("getBKDCDF");
			}
		}
		
		public void setPlhpodr(BigDecimal Plhpodr) throws Exception {
			java.lang.reflect.Method method;
			method = OB.getClass().getMethod("setPlhpodr", BigDecimal.class);
			method.invoke(OB, Plhpodr);
		}
		public BigDecimal getPlhpodr() throws Exception {
			return OB.invokeMethod("getPlhpodr");
		}
		
		public void setPlhcbal(BigDecimal Plhcbal) throws Exception {
			java.lang.reflect.Method method;
			method = OB.getClass().getMethod("setPlhcbal", BigDecimal.class);
			method.invoke(OB, Plhcbal);
		}
		
		public BigDecimal getPlhcbal() throws Exception {
			return OB.invokeMethod("getPlhcbal");
		}
		
		public void setPlhosbl(BigDecimal Plhosbl) throws Exception {
			java.lang.reflect.Method method;
			method = OB.getClass().getMethod("setPlhosbl", BigDecimal.class);
			method.invoke(OB, Plhosbl);
		}
		
		public BigDecimal getPlhosbl() throws Exception {
			return OB.invokeMethod("getPlhosbl");
		}

		public void deletelndmidm(BigDecimal lmdact, String lmdatp, String lmdmo, String lmdctp, BigDecimal lmdue8) throws Exception{
			if(OBFLAG){
				@SuppressWarnings("rawtypes")
				LoansProcessorOB loansProcessorOb = (LoansProcessorOB)OB;
				loansProcessorOb.deletelndmidm(lmdact, lmdatp, lmdmo, lmdctp, lmdue8);
			}
	    }
		
		public LLDAPPF getLLDAPPF(BigDecimal AFAPNO) throws Exception {
			if(OBFLAG){
				java.lang.reflect.Method method;
				method = OB.getClass().getMethod("getLLDAPPF", BigDecimal.class);
				this.LLDAPPF = (LLDAPPF) method.invoke(OB, AFAPNO);
				return LLDAPPF;
			}else{
				if(LLDAPPF == null) {
					LLDAPPF = new LLDAPPF();
					LLDAPPF.initialise();
				}
				return LLDAPPF;
			}
		}
	}

	// *********************************************************************
	// 
	// *********************************************************************

	public void srdftinfo(IO inner) throws Exception{

		inner.setXid();
		inner.setLL1NUM();
		inner.setLL1NB8();
		inner.setLL1PD8();
		inner.setLL1LM8();
		inner.setPNT01();
		inner.setPNT01N();
		inner.setISLACT();
		inner.setODTYPE();
		inner.setMATUAC();
		inner.setDAYRST();
		inner.setRCLLAC();
		inner.setBS8REB();
		inner.setBS8ACC();
		inner.setCAPINT();
		inner.setOSBAL();
		inner.setTOTRES();
		inner.setLTDILC();
		inner.setMAXILC();
		inner.setWMINCG();
		inner.setTESTMIN();
		inner.setCSRFLG();
		inner.setSSICUR();

		inner.BILLED = "N";
		if (inner.isMaturityOver 
				&& (inner.getLNDMAST().getAccint().compareTo(new BigDecimal("0.01")) >= 0)
				|| (inner.getLNDMAST().getMclnid().trim().equals("M")
						&& inner.getLNDMAST().getStatus().compareTo(new BigDecimal("2")) != 0 
						&& inner.getLNDMAST().getComacc().compareTo(new BigDecimal("0.01")) >= 0)
				|| (inner.OSBAL.compareTo(BigDecimal.ZERO) == 0 
				&& inner.getLNDMAST().getAccint().compareTo(new BigDecimal("0.01")) >= 0)
				|| (inner.getLNPPAR2().getPcaplc().trim().equals("N") 
						&& inner.getLNDMAST().getPenint().compareTo(BigDecimal.ZERO) > 0))
		{
			inner.BILLED = "Y";
		}

		if (inner.getLNPPAR2().getPinmat().trim().equals("Y")) {
			inner.XMTDT8 = inner.getLNDMAST().getInmdt8();
		} else {
			inner.XMTDT8 = inner.getLNDMAST().getMatdt8();
			BigDecimal EMATDT8 = checkExtendMaturity(inner);
			if(EMATDT8.compareTo(BigDecimal.ZERO) != 0) {
				inner.XMTDT8 = EMATDT8;
			}
		}

		if (inner.getLNDMAST().getRcldt8().compareTo(BigDecimal.ZERO) > 0) {
			inner.XMTDT8 = inner.getLNDMAST().getRcldt8();
		}
		
//		objWork.setBigDecimal("PNT01N",objWork.getBigDecimal("PNT01").negate());//.multiply(new BigDecimal("-1"))
		
	}
	
	/**
	 * to check extended maturity if rumatd = E
	 */
	public BigDecimal checkExtendMaturity(IO inner) throws Exception{
		BigDecimal ROLTRM = BigDecimal.ZERO;
		String ROLCOD = "";
		String ROLMOD = "";
		BigDecimal ROLDT8 = BigDecimal.ZERO;
		
		if(inner.getLNPPAR2().getPumttm().compareTo(BigDecimal.ZERO) == 0)
			return ROLDT8;
		
		if(inner.getLNDMAST().getRumatd().equals("E"))
		{
			ROLTRM = inner.getLNPPAR2().getPumttm().subtract(inner.getLNDMAST().getTerm());
			ROLCOD = inner.getLNPPAR2().getPumttc();
			ROLDT8 = inner.getLNDMAST().getOrgmd8();
			if(ROLCOD.equals("M")) {
				ROLDT8 = CommonDateAdvanceByTerm.advanceMonth(ROLDT8, ROLTRM);
			}
			else {
				ROLDT8 = CommonDateAdvanceByTerm.advanceDay(ROLDT8, ROLTRM);
			}
			
			if (inner.getLNPPAR2().getPadjdd().trim().equals("Y") ||
					inner.getLNPPAR2().getPadjdd().trim().equals("F") ||
					inner.getLNPPAR2().getPadjdd().trim().equals("B")) {
				ROLMOD = inner.getLNPPAR2().getPadjdd().trim();
				ROLDT8 = adjustBusinessDate(inner, ROLDT8, ROLTRM, ROLMOD);
			}
		}
		//avoid when calculate ROLTRM become negative then return zero
		if ((ROLDT8.compareTo(inner.getLNDMAST().getMatdt8()) <= 0)) {
			return BigDecimal.ZERO;
		}
		
		return ROLDT8;
	}

	// *********************************************************************
	// 
	// *********************************************************************

	public void executeProcess(IO inner, String LNPTYP,String JDCURR,BigDecimal PMNCTIM6,String PBATCH,
			String LPZCSH,String PMNCUID,String PMNCWID,BigDecimal PMNCDT8,String PMNCSRC,String PPSPGM) throws Exception {

		srdftinfo(inner);

		for(int i =0 ; i < inner.getListLNDEXCB().size() ; i ++){

			LNDEXCP LNDEXCB = (LNDEXCP) inner.getListLNDEXCB().get(i);
			if (LNDEXCB.getBl1pd8().compareTo(inner.LL1PD8) == 0){
				executeMainProcess(inner, LNDEXCB, LNPTYP,JDCURR, PMNCTIM6, PBATCH, 
						LPZCSH, PMNCUID, PMNCWID, PMNCDT8, PMNCSRC, PPSPGM);

				// restore payment code value 
				inner.getLNDMAST().setPmtcod(inner.XPMTCD);
			}
		}
	}

	// *********************************************************************
	// 
	// *********************************************************************

//	public void executeProcess(IO inner) throws Exception {
//
//		BigDecimal ROLDT8 = BigDecimal.ZERO;
//		BigDecimal ROLTRM = BigDecimal.ZERO;
//		BigDecimal ROLDAY = BigDecimal.ZERO;
//		String ROLCOD = "";
//
//		srdftinfo(inner);
//
//		//check after First Release and Switch to Standard Rate
//		if (inner.getLNDMAST().getStdnum().compareTo(BigDecimal.ZERO) > 0
//				&& inner.getLNDMAST().getFreld8().compareTo(BigDecimal.ZERO) > 0
//				&& inner.getLNDMAST().getUserp().trim().equals("Y") 
//				&& !inner.getLNDMAST().getRatpc().trim().equals("")) {
//			ROLDT8 = inner.getLNDMAST().getFreld8();
//			ROLTRM = inner.getLNDMAST().getStdnum();
//			ROLDAY = BigDecimal.ZERO;
//			//			objWork.setString("ROLCOD", "M");
//			srlnravdm();
//			ROLDT8 = CommonDateAdvanceByTerm.advanceMonth(ROLDT8, ROLTRM, ROLDAY, "Y");
//
//			if (((ROLDT8.compareTo(WRKPD8) >= 0) 
//					&& (ROLDT8.compareTo(WRKNB8) < 0))) 
//			{
//
//				inner.getLNDMAST().setBigDecimal("RATE",inner.getLNDMAST().getBigDecimal("STDRAT"));
//				RATACC = inner.getLNDMAST().getBigDecimal("STDRAT");
//				inner.getLNDMAST().setBigDecimal("PRATEN",inner.getLNDMAST().getBigDecimal("STDRTN"));
//				inner.getLNDMAST().setBigDecimal("PVARI",inner.getLNDMAST().getBigDecimal("STDVAR"));
//				inner.getLNDMAST().setString("PVCODE",inner.getLNDMAST().getString("STDVAC").trim());
//			}
//
//		}
//
//		if (inner.getLNDMAST().getPraten().compareTo(BigDecimal.ZERO) > 0) {
//			objWork.setBigDecimal("JRCRAT", BigDecimal.ZERO);
//			//srlnrcssr();
//		}
//		//end check after First Release and Switch to Standard Rate
//
//		BigDecimal OLMDAMT = BigDecimal.ZERO;
//		BigDecimal MLMDAMT = BigDecimal.ZERO;
//		for(int i = 0 ; i < inner.List_LNDMIDM().size() ; i ++){
//			LNDMIDM LNDMIDM = (LNDMIDM) inner.List_LNDMIDM().get(i);
//			if(LNDMIDM.getLmdmo().trim().equals('O')){
//				OLMDAMT = OLMDAMT.add(LNDMIDM.getLmdamt());
//			} else {
//				MLMDAMT = MLMDAMT.add(LNDMIDM.getLmdamt());
//			}
//		}
//		executeProcess1(inner);
//
//	}

	// *********************************************************************
	// 
	// *********************************************************************

	public void executeMainProcess(IO inner, LNDEXCP LNDEXCB, String LNPTYP,String JDCURR,BigDecimal PMNCTIM6,String PBATCH,String 
			LPZCSH,String PMNCUID,String PMNCWID,BigDecimal PMNCDT8,String PMNCSRC,String PPSPGM) throws Exception {

		LNDBNOT = new LNDBNOT();
		LNDBNOT.initialise();

		initialiseWorkField();
		
		String CALCLC;
		
		BigDecimal WRKAMT = BigDecimal.ZERO;
		BigDecimal WRKBAL = BigDecimal.ZERO;
		BigDecimal TMPACC = BigDecimal.ZERO;

		//backup payment code original value 
		inner.XPMTCD = inner.getLNDMAST().getPmtcod();
		if (LNDEXCB.getXcpcod().compareTo(new BigDecimal("60")) == 0
				&& inner.getLNDMAST().getUppcd().trim().equals("Y")
				&& inner.getLNDMAST().getPmtcod().compareTo(inner.getLNDMAST().getDfpcd()) != 0 
				&& inner.LL1PD8.compareTo(inner.getLNDMAST().getFpdt8()) < 0) {
			//					inner.getLNDMAST().setPmtcod(inner.getLNDMAST().getDfpcd());
//			inner.XPMTCD = inner.getLNDMAST().getDfpcd();
			inner.getLNDMAST().setPmtcod(inner.getLNDMAST().getDfpcd());
		}

		//**  DONT BILL PAID, CHARGE OFFS, PARTICIPATIONS OR ZERO BALANCES
		//**  DONT BILL ON PARTIAL CHARGE OFFS, BLOCK DISCOUNTS          
		//dont bill if restructured value = 0 ,outstanding restructure interest + restructure LC + morint =TOTRES 
		if (inner.getLNDMAST().getStatus().compareTo(new BigDecimal("2")) == 0
				|| inner.getLNDMAST().getPwofid().equals("C")
				|| (inner.OSBAL.compareTo(BigDecimal.ZERO) == 0 && inner.TOTRES.compareTo(BigDecimal.ZERO) == 0)) {
			
			if (!inner.BILLED.trim().equals("Y")) {
				return;
			}
		}

		if (inner.getLNDMAST().getRcldt8().compareTo(BigDecimal.ZERO) > 0) {
			if (inner.getLNDMAST().getRcldt8().compareTo(inner.LL1PD8) == 0) {
				LNDEXCB.setSspdt8(inner.getLNDMAST().getRcldt8());
			}
		}

		//				objWork.setBigDecimal("MISAMTT", inner.getLNDMAST().getBigDecimal("MISCD"));
		//				objWork.setBigDecimal("OTHAMTT", inner.getLNDMAST().getBigDecimal("OTHCHG"));

		//adjchg();

		switch (LNDEXCB.getXcpcod().intValue()) {
		case 61:
			LNDBNOT.setLbcdt8(LNDEXCB.getSslcd8());
			break;
		case 66:				
			LNDBNOT.setLbcdt8(new CommonDateAdvanceByTerm().advanceMonth(inner.LL1PD8, BigDecimal.ONE));
			break;
		case 68:
			LNDBNOT.setLbcdt8(inner.LL1NB8);
			break;
		case 69:
			LNDBNOT.setLbcdt8(LNDEXCB.getSscfd8());
			break;
		case 60:
		case 64:
		case 67:
			if (LNDEXCB.getSspdt8().compareTo(BigDecimal.ZERO) > 0) {
				LNDBNOT.setLbcdt8(LNDEXCB.getSspdt8());
			} else {
				LNDBNOT.setLbcdt8(LNDEXCB.getSsipd8());
			}		
			break;

		default:
			if (LNDEXCB.getSsipd8().compareTo(BigDecimal.ZERO) > 0) {
				LNDBNOT.setLbcdt8(LNDEXCB.getSsipd8());
			} else {
				LNDBNOT.setLbcdt8(LNDEXCB.getSspdt8());
			}
			break;
		}

		if (LNDBNOT.getLbcdt8().compareTo(BigDecimal.ZERO) <= 0) {
			LNDBNOT.setLbcdt8(inner.LL1NB8);
		}

		BigDecimal CHKLI = inner.getLNDMAST().getCbal().add(inner.getLNDMAST().getAccint()).setScale(ScaleValue.BAL, RoundingMode.DOWN);
		if ((inner.XMTDT8.compareTo(LNDBNOT.getLbcdt8()) <= 0 
				&& inner.XMTDT8.compareTo(BigDecimal.ZERO) > 0)
				//* CHECK WHETHER PAYING OFF BEFORE MATURITY 
				|| (inner.getLNDMAST().getPmtamt().compareTo(CHKLI) > 0
						&& inner.getLNDMAST().getPmtcod().compareTo(new BigDecimal("2")) != 0
						&& inner.getLNDMAST().getPmtcod().compareTo(new BigDecimal("6")) != 0
						&& LNDEXCB.getXcpcod().compareTo(new BigDecimal("63")) != 0
						&& LNDEXCB.getXcpcod().compareTo(new BigDecimal("65")) != 0
						&& LNDEXCB.getXcpcod().compareTo(new BigDecimal("68")) != 0
						&& !inner.ISLACT.trim().equals("Y") 
						&& !inner.getLNDMAST().getInstod().trim().equals("Y")
						&& (inner.XMTDT8.compareTo(LNDBNOT.getLbcdt8()) <= 0
							&& inner.getLNDMAST().getPmtcod().compareTo(new BigDecimal("8")) == 0))
				//* CHECK WHETHER PRINCIPAL HAS BEEN BILLED
				|| (inner.getLNDMAST().getBilprn().compareTo(inner.getLNDMAST().getCbal()) >= 0 
				&& inner.getLNDMAST().getCbal().compareTo(BigDecimal.ZERO) > 0)
				&& inner.getLNDMAST().getPmtcod().compareTo(new BigDecimal("8")) != 0) {
			LNDBNOT.setMatcod("M");
		} else {
			LNDBNOT.setMatcod("");
		}

		switch (LNDEXCB.getXcpcod().intValue()) {
		case 60:
		case 63:
		case 67: {
			//*  SEE IF INTEREST DUE  
			if (((inner.getLNDMAST().getIbase().compareTo(new BigDecimal("9")) != 0) 
					&& !inner.BS8REB.trim().equals("Y"))
					//*  BILL FULL RELEASE YEARLY REST WITH INTEREST ONLY PAYMENT CODE 
					//*  WILL WORK ONLY IF BILLING DATE = NEXT BUSINESS DATE           
					|| inner.BS8REB.trim().equals("Y")
					&& (LNDEXCB.getXcpcod().compareTo(new BigDecimal("63")) == 0) 
					&& (inner.LL1NB8.compareTo(LNDBNOT.getLbcdt8()) == 0)
					|| ((inner.getLNDMAST().getIbase().compareTo(new BigDecimal("9")) == 0)
					&& inner.getLNPPAR2().getPdrest().trim().equals("Y")
					&& inner.isMaturityOver)) 
			{
				//* TO FORECAST INTEREST DUE                   
				//* TO FORECAST IF ADVANCE BILLING IS SPECIFIED
				if ((inner.getLNDMAST().getPmtcod().compareTo(BigDecimal.ZERO) == 0)
						|| (inner.getLNDMAST().getPmtcod().compareTo(BigDecimal.ONE) == 0)
						|| (inner.getLNDMAST().getPmtcod().compareTo(new BigDecimal("5")) == 0)
						|| (LNDEXCB.getXcpcod().compareTo(new BigDecimal("63")) == 0)
						|| LNDBNOT.getMatcod().trim().equals("M")) 
				{
					calbli(inner, LNDEXCB);
				}
			}
 
			switch(LNDEXCB.getXcpcod().intValue()){
			case 60:{
				xcpc60(inner, LNDEXCB);
				if ((LNDBNOT.getLbcprn().compareTo(BigDecimal.ZERO) < 0)) {
					LNDBNOT.setLbcprn(BigDecimal.ZERO);
				}
				break;
			}

			case 63:{
				switch(inner.getLNDMAST().getPmtcod().intValue()){
				case 2:
				case 6:{
					if (inner.getLNDMAST().getMipmta().compareTo(BigDecimal.ZERO) > 0
							|| inner.getLNDMAST().getRipmta().compareTo(BigDecimal.ZERO) > 0) {
						PMTWRK = BigDecimal.ZERO;
						if (inner.getLNDMAST().getNipdt8().compareTo(LNDEXCB.getSsipd8()) <= 0) {
							PMTWMIN = inner.getLNDMAST().getMipmta();
							PMTWRSI = inner.getLNDMAST().getRipmta();
						} else {
							PMTWMIN = BigDecimal.ZERO;
							PMTWRSI = BigDecimal.ZERO;
						}

						if (inner.getLNDMAST().getAltsch().trim().equals("Y")) {
							srlndpsch(inner);				
						}				
						calbip(inner, LNDEXCB);
					}
					break;
				}
				}
				break;
			}
			case 67:{
				LNDBNOT.setLbcint(BigDecimal.ZERO);
				LNDBNOT.setLbcmin(BigDecimal.ZERO);
				xcpc60(inner, LNDEXCB);
				if ((LNDBNOT.getLbcprn().compareTo(BigDecimal.ZERO) < 0)) {
					LNDBNOT.setLbcprn(BigDecimal.ZERO);
				}
				break;
			}
			}		
			break;
		}
		case 64:{
			if (inner.getLNDMAST().getCbal().compareTo(BigDecimal.ZERO) <= 0 
					&& inner.getLNDMAST().getAccint().compareTo(BigDecimal.ZERO) > 0) 
			{
				ACRINT = BigDecimal.ZERO;
			//STV - Do when Forecast flag = Y	if (inner.getLNPPAR2().getPblndy().compareTo(BigDecimal.ZERO) > 0
			//STV			|| inner.getLNPPAR2().getPbilin().trim().equals("U")) 
				if ((inner.getLNPPAR2().getPblndy().compareTo(BigDecimal.ZERO) > 0)
						&& inner.getLNPPAR2().getPbilin().trim().equals("Y")) 
				{
					fcast(inner, LNDEXCB);
				}

				WKBINT = inner.getLNDMAST().getAccint().add(ACRINT);
				WKBMOR = inner.getLNDMAST().getMorint().add(SACRIN);
				TMPACC = WKBINT;
				//	roundi();
				TMPACC = CommonRoundCent.roundCent(inner.getSSPAPPL().getSsarot(), TMPACC, inner.getLNDMAST().getCurdec());						
				LNDBNOT.setLbcint(TMPACC.setScale(ScaleValue.BAL, RoundingMode.DOWN));

				MoraInt(inner, LNDEXCB, WKBMOR);
//				if ((LNDEXCB.getSspdt8().compareTo(BigDecimal.ZERO) > 0
//						//inner.getLNDMAST().getBigDecimal("STRDMI").compareTo(LNDEXCP.getSspdt8()) > 0)  && - CYN101
//						)
//						|| ((LNDEXCB.getSsipd8().compareTo(BigDecimal.ZERO) > 0))
//						//(inner.getLNDMAST().getBigDecimal("STRDMI").compareTo(LNDEXCP.getSsipd8()) > 0) && - CYN101
//						) {
//					//|| (inner.getLNDMAST().getBigDecimal("STRDMI").compareTo(BigDecimal.ZERO) == 0) - CYN101
//					LNDBNOT.setLbcmin(BigDecimal.ZERO);
//				} else {
//					TMPACC = WKBMOR;
//					//roundi();
//					TMPACC = CommonRoundCent.roundCent(inner.getSSPAPPL().getSsarot(), TMPACC, inner.getLNDMAST().getCurdec());
//					LNDBNOT.setLbcmin(TMPACC.setScale(ScaleValue.BAL,RoundingMode.DOWN));
//				}

				LNDBNOT.setLbcint(LNDBNOT.getLbcint().subtract(inner.getLNDMAST().getBilint()));
				LNDBNOT.setLbcmin(LNDBNOT.getLbcmin().subtract(inner.getLNDMAST().getBilmin()));

				if (LNDBNOT.getLbcint().compareTo(BigDecimal.ZERO) < 0) 
				{
					LNDBNOT.setLbcint(BigDecimal.ZERO);
				}

				if (LNDBNOT.getLbcmin().compareTo(BigDecimal.ZERO) < 0) 
				{
					LNDBNOT.setLbcmin(BigDecimal.ZERO);
				}

			}

			break;
		}
		case 68:{
			if (inner.getLNDMAST().getFrcode().trim().equals("D")
					&& inner.getLNDMAST().getFreq().compareTo(inner.getLNPPAR2().getPblndy()) < 0 
					&& inner.getLNDMAST().getAccint().compareTo(inner.getLNDMAST().getBilint()) > 0) 
			{
				LNDBNOT.setLbcint(inner.getLNDMAST().getAccint().subtract(inner.getLNDMAST().getBilint()).setScale(ScaleValue.BAL, RoundingMode.DOWN));
				LNDBNOT.setLbcmin(inner.getLNDMAST().getMorint().subtract(inner.getLNDMAST().getBilmin()).setScale(ScaleValue.BAL, RoundingMode.DOWN));
			}

			break;
		}
		}
		
		BillRestructureLC(inner);

		if (LNDBNOT.getLbcint().compareTo(BigDecimal.ZERO) > 0) {
			
			if (inner.TESTMIN.compareTo(LNDBNOT.getLbcint()) < 0 
					&& inner.TESTMIN.compareTo(BigDecimal.ZERO) > 0)	{
				LNDBNOT.setLbcint(inner.TESTMIN);

			}
			
//			if(inner.getLNPPAR2().getPadjac().trim().equals("Y")
//					&& inner.getLNDMAST().getCgrint().trim().equals("Y"))
//			{
//				WMINCG = inner.getLNDMAST().getMincg();

//				switch(inner.getLNDMAST().getMclnid()){
//				case"T":{
//					WMINCG = inner.getLNDMAST().getTchamt().subtract(inner.getLNDMAST().getSwrels());
//					break;
//				}
//				case"":{
//					WMINCG = inner.getLNDMAST().getOrgamt().subtract(inner.getLNDMAST().getSwrels());
//					break;
//				}
//				}


//				if (WMINCG.compareTo(BigDecimal.ZERO) > 0) {
//					TEST = inner.getLNDMSTS().getIntltd().add(inner.getLNDMAST().getBilint());
//					TEST = TEST.add(inner.getLNDMAST().getCbal());
//					TEST = TEST.add(inner.getLNDMSTS().getLtdprn());
//					TEST = TEST.subtract(inner.getLNDMAST().getSwrels());
//					if (TEST.compareTo(BigDecimal.ZERO) < 0) {
//						TEST = BigDecimal.ZERO;
//					}
//
//					TEST = WMINCG.subtract(TEST);
//					if (TEST.compareTo(LNDBNOT.getLbcint()) < 0 
//							&& TEST.compareTo(BigDecimal.ZERO) > 0)	{
//						LNDBNOT.setLbcint(TEST);
//					}
//
//				} 
		}
		
		//* CALCULATE ISLAMIC PROFIT AND REFUND 
		if((inner.getLNDMAST().getPmtcod().intValue() != 2 &&
				inner.getLNDMAST().getPmtcod().intValue() != 6) || 
				LNDEXCB.getXcpcod().compareTo(new BigDecimal("63")) == 0 ||
				LNDBNOT.getMatcod().trim().equals("M"))
		{
				if (inner.ISLACT.trim().equals("Y")) {
					islprf(inner, LNDEXCB); 
				} else {
					if (inner.getLNDMAST().getIbase().compareTo(new BigDecimal("9")) == 0
							&& LNDBNOT.getLbcprn().compareTo(BigDecimal.ZERO) > 0) 
					{
						if (!inner.getLNDMAST().getPartid().trim().equals("D")) 
						{
							fcasi9(inner, LNDEXCB); 
						} 
					} 
				} 
		}

		if ((LNDEXCB.getXcpcod().compareTo(new BigDecimal("61")) == 0 
				&& inner.getLNDMAST().getLnlcs8().compareTo(BigDecimal.ZERO) > 0)
				|| (LNDEXCB.getXcpcod().compareTo(new BigDecimal("61")) != 0
				&& LNDEXCB.getXcpcod().compareTo(new BigDecimal("69")) != 0 
				&& inner.getLNDMAST().getLnlcs8().compareTo(BigDecimal.ZERO) == 0)) 
		{
			if (((inner.getLNDMAST().getPmtcod().compareTo(new BigDecimal("6")) == 0)
					&& (LNDEXCB.getSsipd8().compareTo(BigDecimal.ZERO) != 0)
					&& (LNDEXCB.getXcpcod().compareTo(new BigDecimal("60")) != 0) 
					&& (LNDEXCB.getXcpcod().compareTo(new BigDecimal("61")) != 0))
					|| ((inner.getLNDMAST().getPmtcod().compareTo(new BigDecimal("6")) != 0)
							&& (LNDEXCB.getSspdt8().compareTo(BigDecimal.ZERO) != 0) 
							&& (LNDEXCB.getXcpcod().compareTo(new BigDecimal("61")) != 0))
					|| ((inner.getLNDMAST().getNsipd8().compareTo(inner.getLNDMAST().getNspdt8()) == 0) 
							&& (LNDEXCB.getXcpcod().compareTo(new BigDecimal("60")) == 0))
					|| ((inner.getLNDMAST().getPmtcod().compareTo(new BigDecimal("2")) == 0)
							&& (LNDEXCB.getSsipd8().compareTo(BigDecimal.ZERO) != 0) 
							&& (LNDEXCB.getXcpcod().compareTo(new BigDecimal("63")) == 0))
					|| ((inner.getLNDMAST().getLnlcs8().compareTo(BigDecimal.ZERO) != 0) 
							&& (LNDEXCB.getXcpcod().compareTo(new BigDecimal("61")) == 0))) 
			{
				//					if ((objWork.getBigDecimal("SDEPTC").compareTo(new BigDecimal("998")) != 0)) {
				if ((inner.getLNDMAST().getLctype().compareTo(BigDecimal.ZERO) > 0)
						|| (inner.getLNDMAST().getLcrate().compareTo(BigDecimal.ZERO) != 0)
						|| (inner.getLNDMAST().getLcityp().compareTo(BigDecimal.ZERO) > 0)
						|| (inner.getLNDMAST().getLcirat().compareTo(BigDecimal.ZERO) != 0)) 
				{
					if ((!inner.getLNPPAR2().getPdrest().trim().equals("Y") 
							&& (inner.getLNDMAST().getIbase().compareTo(new BigDecimal("9")) == 0))
							|| ((inner.getLNDMAST().getStatus().compareTo(new BigDecimal("3")) != 0))
							|| ((inner.getLNDMAST().getStatus().compareTo(new BigDecimal("3")) == 0)
									&& !inner.getLNPPAR2().getPcapin().trim().equals("Y") 
									&& !inner.getLNPPAR2().getPmrate().trim().equals("Y"))
							|| ((inner.getLNDMAST().getStatus().compareTo(new BigDecimal("3")) == 0)
									&& inner.getLNPPAR2().getPdrest().trim().equals("Y") 
									&& !inner.getLNPPAR2().getPmrate().trim().equals("Y"))) 
					{
						WASSLC = inner.getLNDMAST().getAsslc();
						WPENIN = inner.getLNDMAST().getPenint();
						if (inner.getLNPPAR2().getPbillc().trim().equals("Y")) 
						{
							if ((inner.getLNDMAST().getLcityp().compareTo(BigDecimal.ZERO) != 0)
									|| (inner.getLNDMAST().getLcirat().compareTo(BigDecimal.ZERO) != 0)) 
							{
								CALCLC = "I";
								latchg(inner, CALCLC);
								CALCLC = "P";
								latchg(inner, CALCLC);
							} else {
								CALCLC = "";
								latchg(inner, CALCLC);

							}

						}

					}

					LNDBNOT.setLbtlc(WASSLC.subtract(inner.getLNDMAST().getPaidlc()));
					if (inner.getLNPPAR2().getPcaplc().trim().equals("N")) 
					{
						if (inner.getLNPPAR2().getPbillc().trim().equals("Y")
								|| (inner.getLNPPAR2().getPblndy().compareTo(BigDecimal.ZERO) == 0)
								|| (LNDEXCB.getXcpcod().compareTo(new BigDecimal("61")) == 0)
								|| ((inner.getLNPPAR2().getPblndy().compareTo(BigDecimal.ZERO) > 0)
										&& inner.getLNPPAR2().getPbillc().trim().equals("N"))) 
						{
							WKBLC = WPENIN;
							TMPACC = WKBLC;
							//roundi();
							TMPACC = CommonRoundCent.roundCent(inner.getSSPAPPL().getSsarot(), TMPACC, inner.getLNDMAST().getCurdec());
							WKBLC = TMPACC;
							LNDBNOT.setLbtlc(LNDBNOT.getLbtlc().add(WKBLC).setScale(ScaleValue.BAL,RoundingMode.DOWN));
						}

					}

				}

				//					} else {
				//						if (inner.getLNPPAR2().getPcaplc().trim().equals("Y")) {
				//							LNDBNOT.setLbtlc(inner.getLNDMAST().getAsslc().subtract(inner.getLNDMAST().getPaidlc()));
				//						} else {
				//							LNDBNOT.setLbtlc(LNDBNOT.getLbtlc().add(WPENIN).setScale(ScaleValue.BAL, RoundingMode.DOWN));
				//						}
				//
				//					}

				LNDBNOT.setLbclc(LNDBNOT.getLbtlc().subtract(inner.getLNDMAST().getBillc()));//POC-1003
//				LNDBNOT.setLbcrlc(LNDBNOT.getLbtrlc().subtract(inner.getLNDMAST().getBilrlc()));
				if ((!inner.getLNPPAR2().getPbillc().trim().equals("Y")
						&& (inner.LL1NB8.compareTo(LNDBNOT.getLbcdt8()) != 0) 
						&& !inner.getLNPPAR2().getPadjbl().trim().equals("N"))) 
				{
					LNDBNOT.setLbclc(BigDecimal.ZERO);
				}

			}

		}

//		WRKMIS = inner.getLNDMAST().getMiscd();
//		WRKOTH = inner.getLNDMAST().getOthchg();
		BigDecimal DUEDATE = BigDecimal.ZERO;
		if(inner.LL1PD8.compareTo(inner.getLNDMAST().getMatdt8()) > 0) {//if is maturity billing will use payment billing due date
			DUEDATE = LNDBNOT.getLbcdt8();
		}
		else
		{
			DUEDATE = inner.getLNDMAST().getNspdt8();
			if(inner.getLNDMAST().getPmtcod().compareTo(new BigDecimal("2")) == 0
					&& inner.getLNDMAST().getNspdt8().compareTo(BigDecimal.ZERO)  == 0) {
				DUEDATE = inner.getLNDMAST().getNsipd8();
			}
		}
		WRKMIS = LoansUpdatePaymentBilling.setFeeCharges("M", DUEDATE, inner.getListLNDMIDM());
		WRKOTH = LoansUpdatePaymentBilling.setFeeCharges("O", DUEDATE, inner.getListLNDMIDM());
		WRKCOM = inner.getLNDMAST().getComacc();
		LNDBNOT.setLbcmco(LoansUpdatePaymentBilling.setOriFeeCharges("M", DUEDATE, inner.getListLNDMIDM()));
		LNDBNOT.setLbcoco(LoansUpdatePaymentBilling.setOriFeeCharges("O", DUEDATE, inner.getListLNDMIDM()));
		
		if (((LNDEXCB.getXcpcod().compareTo(new BigDecimal("69")) == 0) 
				&& (LNDEXCB.getSscfd8().compareTo(BigDecimal.ZERO) > 0))
				|| ((LNDEXCB.getXcpcod().compareTo(new BigDecimal("69")) != 0)
						&& (LNDEXCB.getXcpcod().compareTo(new BigDecimal("61")) != 0) 
						&& (LNDEXCB.getSscfd8().compareTo(BigDecimal.ZERO) == 0))) 
		{
			if (inner.getLNPPAR2().getPbilcf().trim().equals("Y")
					|| (inner.getLNPPAR2().getPblndy().compareTo(BigDecimal.ZERO) == 0)) 
			{
				if (((inner.getLNDMAST().getStatus().compareTo(new BigDecimal("2")) != 0) 
						&& (inner.getLNDMAST().getComrat().compareTo(BigDecimal.ZERO) > 0))
						|| ((inner.getLNDMAST().getStatus().compareTo(new BigDecimal("2")) != 0) 
								&& (inner.getLNDMAST().getCommit().compareTo(BigDecimal.ZERO) > 0))
						|| inner.getLNDMAST().getDrwsch().trim().equals("Y")
						|| inner.getLNDMAST().getDrwsch().trim().equals("E")
						|| inner.getLNDMAST().getDrwsch().trim().equals("S")) 
				{
					if (!inner.getLNDMAST().getRecall().trim().equals("Y")
							|| (inner.getLNDMAST().getDrwsch().trim().equals("O")
									&& !inner.getLNDMAST().getPwofid().trim().equals("8")
									&& !inner.getLNDMAST().getPwofid().trim().equals("O")
									&& !inner.getLNDMAST().getPwofid().trim().equals("C") 
									&& inner.getLNDMAST().getJdind().trim().equals("N"))) 
					{
						comacr(inner);

					}

				}

			}

			WKBCMF = WRKCOM;
			TMPACC = WKBCMF;
			//roundi();
			TMPACC = CommonRoundCent.roundCent(inner.getSSPAPPL().getSsarot(), TMPACC, inner.getLNDMAST().getCurdec());
			WKBCMF = TMPACC;

			if ((LNDEXCB.getXcpcod().compareTo(new BigDecimal("69")) == 0)
					|| (LNDEXCB.getXcpcod().compareTo(new BigDecimal("60")) == 0)
					|| (LNDEXCB.getXcpcod().compareTo(new BigDecimal("64")) == 0)) 
			{
				LNDBNOT.setLbtcf(WKBCMF.setScale(ScaleValue.BAL, RoundingMode.DOWN));
				LNDBNOT.setLbccf(LNDBNOT.getLbtcf().subtract(inner.getLNDMAST().getBilcf()));
			} else {
				if ((inner.getLNPPAR2().getPcapca().trim().equals("P")
						&& !inner.getLNDMAST().getPwofid().trim().equals("8") 
						&& (WRKCOM.compareTo(BigDecimal.ZERO) > 0))) 
				{
					if ((inner.getLNDMAST().getNspdt8().compareTo(LNDBNOT.getLbcdt8()) == 0)
							|| (inner.getLNDMAST().getNsipd8().compareTo(LNDBNOT.getLbcdt8()) == 0)) {
						if (inner.getLNPPAR2().getPcpcom().trim().equals("M")) 
						{
							WRKMIS = WRKMIS.add(WKBCMF).setScale(ScaleValue.BAL,RoundingMode.DOWN);
						} else {
							WRKOTH = WRKOTH.add(WKBCMF).setScale(ScaleValue.BAL,RoundingMode.DOWN);
						}

					}

				}

			}

		}

		LNDBNOT.setLbcoc(WRKOTH.subtract(inner.getLNDMAST().getBiloc()));
		LNDBNOT.setLbcmc(WRKMIS.subtract(inner.getLNDMAST().getBilmc()));

//		use LBCPRF instead of LBCPI9
//		if ((LNDBNOT.getLBCPI9().compareTo(BigDecimal.ZERO) < 0)) {
//			LNDBNOT.setLBCPI9(BigDecimal.ZERO);
//		}

		if ((LNDBNOT.getLbcprf().compareTo(BigDecimal.ZERO) < 0)) {
			LNDBNOT.setLbcprf(BigDecimal.ZERO);
		}

		if ((inner.getLNDMAST().getWrkblc().compareTo(BigDecimal.ZERO) < 0)) {
			WLCAD = inner.getLNDMAST().getWrkblc().multiply(new BigDecimal("-1"));
		}

		if ((LNDBNOT.getLbclc().compareTo(BigDecimal.ZERO) < 0)) {
			WLCAD = WLCAD.add(LNDBNOT.getLbclc());
			LNDBNOT.setLbclc(BigDecimal.ZERO);
		}

		if ((LNDBNOT.getLbccf().compareTo(BigDecimal.ZERO) < 0)) {
			LNDBNOT.setLbccf(BigDecimal.ZERO);
		}

		if ((LNDBNOT.getLbcoc().compareTo(BigDecimal.ZERO) < 0)) {
			LNDBNOT.setLbcoc(BigDecimal.ZERO);
		}

		if ((LNDBNOT.getLbcmc().compareTo(BigDecimal.ZERO) < 0)) {
			LNDBNOT.setLbcmc(BigDecimal.ZERO);
		}

		if ((LNDBNOT.getLbcrin().compareTo(BigDecimal.ZERO) < 0)) {
			LNDBNOT.setLbcrin(BigDecimal.ZERO);
		}

		if ((LNDBNOT.getLbcrlc().compareTo(BigDecimal.ZERO) < 0)) {
			LNDBNOT.setLbcrlc(BigDecimal.ZERO);
		}

		if ((WLCAD.compareTo(BigDecimal.ZERO) < 0)) {
			WLCAD = BigDecimal.ZERO;
		}


		// use par2 product group to get from listLNDDEPR
		String Product_Group = inner.getLNPPAR2().getPrdgrp();
		Predicate<LNDDEPR> RLATOAEqualPrdgrp = i -> i.getRlatoa().equals(Product_Group);
		LNDDEPR LNDDEPR = (LNDDEPR) inner.getListLNDDEPR().stream().filter(RLATOAEqualPrdgrp)
				.findFirst().orElse(null);
//			**                                                          
//			**  ADJUST PRINCIPAL AND MINIMUM INTEREST FOR MATURED LOANS 
//			**       
			//Matcod = M & rlcalf != Y only 
		if(LNDBNOT.getMatcod().trim().equals("M") 
				&& (LNDDEPR == null 
					|| !LNDDEPR.getRlcalf().trim().equals("Y"))) 
		{
			pmtmat(inner);
		} 

		TMPACC = LNDBNOT.getLbcprn();
		//				roundi();
		TMPACC = CommonRoundCent.roundCent(inner.getSSPAPPL().getSsarot(), TMPACC, inner.getLNDMAST().getCurdec());
		LNDBNOT.setLbcprn(TMPACC.setScale(ScaleValue.BAL, RoundingMode.DOWN));

		TMPACC = LNDBNOT.getLbcint();
		//roundi();
		TMPACC = CommonRoundCent.roundCent(inner.getSSPAPPL().getSsarot(), TMPACC, inner.getLNDMAST().getCurdec());
		LNDBNOT.setLbcint(TMPACC.setScale(ScaleValue.BAL, RoundingMode.DOWN));

		MoraInt(inner, LNDEXCB, LNDBNOT.getLbcmin());
		//*IF HAVE NOT TIME TO BILL THEN DO NOT BILLED.
//		if ((inner.getLNDMAST().getStrdmi().compareTo(LNDEXCB.getSspdt8()) > 0
//				&& LNDEXCB.getSspdt8().compareTo(BigDecimal.ZERO) > 0)
//			|| (LNDEXCB.getSsipd8().compareTo(BigDecimal.ZERO) > 0
//					&& inner.getLNDMAST().getStrdmi().compareTo(LNDEXCB.getSsipd8()) > 0)
//			|| (inner.getLNDMAST().getStrdmi().compareTo(BigDecimal.ZERO) == 0))
//		{
//			LNDBNOT.setLbcmin(BigDecimal.ZERO);
//		} else {
//			TMPACC = LNDBNOT.getLbcmin();
//			//roundi();
//			TMPACC = CommonRoundCent.roundCent(inner.getSSPAPPL().getSsarot(), TMPACC, inner.getLNDMAST().getCurdec());
//			LNDBNOT.setLbcmin(TMPACC.setScale(ScaleValue.BAL, RoundingMode.DOWN));
//		}

//		use LBCPRF instead of LBCPI9
//		TMPACC = LNDBNOT.getLBCPI9();
//		//roundi();
//		TMPACC = CommonRoundCent.roundCent(inner.getSSPAPPL().getSsarot(), TMPACC, inner.getLNDMAST().getCurdec());
//		LNDBNOT.setLBCPI9(TMPACC.setScale(ScaleValue.BAL,RoundingMode.DOWN));

		TMPACC = LNDBNOT.getLbcprf();
		//roundi();
		TMPACC = CommonRoundCent.roundCent(inner.getSSPAPPL().getSsarot(), TMPACC, inner.getLNDMAST().getCurdec());
		LNDBNOT.setLbcprf(TMPACC.setScale(ScaleValue.BAL, RoundingMode.DOWN));

		TMPACC = LNDBNOT.getLbcref();
		//roundi();
		TMPACC = CommonRoundCent.roundCent(inner.getSSPAPPL().getSsarot(), TMPACC, inner.getLNDMAST().getCurdec());
		LNDBNOT.setLbcref(TMPACC.setScale(ScaleValue.BAL, RoundingMode.DOWN));

		TMPACC = LNDBNOT.getLbccom();
		//roundi();
		TMPACC = CommonRoundCent.roundCent(inner.getSSPAPPL().getSsarot(), TMPACC, inner.getLNDMAST().getCurdec());
		LNDBNOT.setLbccom(TMPACC.setScale(ScaleValue.BAL, RoundingMode.DOWN));

		TMPACC = LNDBNOT.getLbclc();
		//roundi();
		TMPACC = CommonRoundCent.roundCent(inner.getSSPAPPL().getSsarot(), TMPACC, inner.getLNDMAST().getCurdec());
		LNDBNOT.setLbclc(TMPACC.setScale(ScaleValue.BAL,RoundingMode.DOWN));

		TMPACC = LNDBNOT.getLbccf();
		//roundi();
		TMPACC = CommonRoundCent.roundCent(inner.getSSPAPPL().getSsarot(), TMPACC, inner.getLNDMAST().getCurdec());
		LNDBNOT.setLbccf(TMPACC.setScale(ScaleValue.BAL,RoundingMode.DOWN));

		TMPACC = LNDBNOT.getLbcoc();
		//roundi();
		TMPACC = CommonRoundCent.roundCent(inner.getSSPAPPL().getSsarot(), TMPACC, inner.getLNDMAST().getCurdec());
		LNDBNOT.setLbcoc(TMPACC.setScale(ScaleValue.BAL,RoundingMode.DOWN));

		TMPACC = LNDBNOT.getLbcmc();
		//roundi();
		TMPACC = CommonRoundCent.roundCent(inner.getSSPAPPL().getSsarot(), TMPACC, inner.getLNDMAST().getCurdec());
		LNDBNOT.setLbcmc(TMPACC.setScale(ScaleValue.BAL,RoundingMode.DOWN));

		if (
				(LNDEXCB.getSspdt8().compareTo(BigDecimal.ZERO) > 0
				&& inner.getLNDMAST().getStrdri().compareTo(LNDEXCB.getSspdt8()) > 0
				&& inner.getLNDMAST().getPmtcod().compareTo(new BigDecimal("2")) != 0)
				|| 
				(LNDEXCB.getSsipd8().compareTo(BigDecimal.ZERO) > 0
				&& inner.getLNDMAST().getStrdri().compareTo(LNDEXCB.getSsipd8()) > 0
				&& inner.getLNDMAST().getPmtcod().compareTo(new BigDecimal("2")) == 0
				&& inner.getLNDMAST().getPmtcod().compareTo(new BigDecimal("6")) == 0)
				|| 
				(inner.getLNDMAST().getStrpri().compareTo(BigDecimal.ZERO) == 0
					 && inner.getLNDMAST().getStrdri().compareTo(BigDecimal.ZERO) == 0
					 && !LNDBNOT.getMatcod().trim().equals("M") )  
				|| 
				(WRKAMT.compareTo(inner.getLNDMAST().getStrpri()) > 0
				&& (inner.getLNDMAST().getStrpri().compareTo(BigDecimal.ZERO) != 0))
				) 
		{
			LNDBNOT.setLbcrin(BigDecimal.ZERO);
		} else {
			TMPACC = LNDBNOT.getLbcrin();
			//roundi();
			TMPACC = CommonRoundCent.roundCent(inner.getSSPAPPL().getSsarot(), TMPACC, inner.getLNDMAST().getCurdec());
			LNDBNOT.setLbcrin(TMPACC.setScale(ScaleValue.BAL, RoundingMode.DOWN));
		}

		TMPACC = LNDBNOT.getLbcrlc();
		//roundi();
		TMPACC = CommonRoundCent.roundCent(inner.getSSPAPPL().getSsarot(), TMPACC, inner.getLNDMAST().getCurdec());
		LNDBNOT.setLbcrlc(TMPACC.setScale(ScaleValue.BAL, RoundingMode.DOWN));

		WRKAMT = inner.getLNDMAST().getCbal().subtract(inner.getLNDMAST().getBilprn());

		BigDecimal LBCP = BigDecimal.ZERO;
		BigDecimal LBCI = BigDecimal.ZERO;
		BigDecimal LBCMI = BigDecimal.ZERO;
//		BigDecimal LBCPI = BigDecimal.ZERO;
		BigDecimal LBCPR = BigDecimal.ZERO;
		BigDecimal LBCRF = BigDecimal.ZERO;
		BigDecimal LBCCM = BigDecimal.ZERO;
		BigDecimal LBCM = BigDecimal.ZERO;
		BigDecimal LBCO = BigDecimal.ZERO;
		BigDecimal LBCL = BigDecimal.ZERO;
		BigDecimal LBCC = BigDecimal.ZERO;
		BigDecimal LBCRI = BigDecimal.ZERO;
		BigDecimal LBCRL = BigDecimal.ZERO;

		if (inner.getLNDMAST().getCurdec().trim().equals("0")) {
			LBCP = LNDBNOT.getLbcprn().setScale(ScaleValue.ZRO, RoundingMode.DOWN);
			LBCI = LNDBNOT.getLbcint().setScale(ScaleValue.ZRO, RoundingMode.DOWN);
			LBCMI = LNDBNOT.getLbcmin().setScale(ScaleValue.ZRO, RoundingMode.DOWN);
//			LBCPI = LNDBNOT.getLBCPI9().setScale(ScaleValue.ZRO, RoundingMode.DOWN);
			LBCPR = LNDBNOT.getLbcprf().setScale(ScaleValue.ZRO, RoundingMode.DOWN);
			LBCRF = LNDBNOT.getLbcref().setScale(ScaleValue.ZRO, RoundingMode.DOWN);
			LBCCM = LNDBNOT.getLbccom().setScale(ScaleValue.ZRO, RoundingMode.DOWN);
			LBCM = LNDBNOT.getLbcmc().setScale(ScaleValue.ZRO, RoundingMode.DOWN);
			LBCO = LNDBNOT.getLbcoc().setScale(ScaleValue.ZRO, RoundingMode.DOWN);
			LBCL = LNDBNOT.getLbclc().setScale(ScaleValue.ZRO, RoundingMode.DOWN);
			LBCC = LNDBNOT.getLbccf().setScale(ScaleValue.ZRO, RoundingMode.DOWN);
			LBCRI = LNDBNOT.getLbcrin().setScale(ScaleValue.ZRO, RoundingMode.DOWN);
			LBCRL = LNDBNOT.getLbcrlc().setScale(ScaleValue.ZRO, RoundingMode.DOWN);

			LNDBNOT.setLbcprn(LBCP);
			LNDBNOT.setLbcint(LBCI);
			LNDBNOT.setLbcmin(LBCMI);
//			LNDBNOT.setLBCPI9(LBCPI);
			LNDBNOT.setLbcprf(LBCPR);
			LNDBNOT.setLbcref(LBCRF);
			LNDBNOT.setLbccom(LBCCM);
			LNDBNOT.setLbcmc(LBCM);
			LNDBNOT.setLbcoc(LBCO);
			LNDBNOT.setLbclc(LBCL);
			LNDBNOT.setLbccf(LBCC);
			LNDBNOT.setLbcrin(LBCRI);
			LNDBNOT.setLbcrlc(LBCRL);

			if (((inner.getLNDMAST().getPmtcod().compareTo(BigDecimal.ZERO) == 0) 
					&& (LNDEXCB.getXcpcod().compareTo(new BigDecimal("60")) == 0))) 
			{
				LNDBNOT.setLbcprn(PMTWRK.subtract(LNDBNOT.getLbcint()));
				LBCP = LNDBNOT.getLbcprn().setScale(ScaleValue.ZRO, RoundingMode.DOWN);
				LNDBNOT.setLbcprn(LBCP);
			}

		}

		if (((inner.getLNDMAST().getWrkblp().compareTo(BigDecimal.ZERO) < 0) 
				&& (inner.getLNDMAST().getNpdt8().compareTo(LNDEXCB.getSspdt8()) != 0))) 
		{
			LNDBNOT.setLbcprn(LNDBNOT.getLbcprn().add(inner.getLNDMAST().getWrkblp()));
			if ((LNDBNOT.getLbcprn().compareTo(BigDecimal.ZERO) < 0)) 
			{
				LNDBNOT.setLbcprn(BigDecimal.ZERO);
			}

		}

		LNDBNOT.setLbtlc(LNDBNOT.getLbclc().add(inner.getLNDMAST().getBillc()));
		LNDBNOT.setLbtcf(LNDBNOT.getLbccf().add(inner.getLNDMAST().getBilcf()));
		LNDBNOT.setLbtoc(LNDBNOT.getLbcoc().add(inner.getLNDMAST().getBiloc()));
		LNDBNOT.setLbtmc(LNDBNOT.getLbcmc().add(inner.getLNDMAST().getBilmc()));
		LNDBNOT.setLbtrin(LNDBNOT.getLbcrin().add(inner.getLNDMAST().getBilrin()));
		LNDBNOT.setLbtrlc(LNDBNOT.getLbcrlc().add(inner.getLNDMAST().getBilrlc()));
		LNDBNOT.setLbtcom(LNDBNOT.getLbccom().add(inner.getLNDISLM().getLiblcm()));
		LNDBNOT.setLbtref(LNDBNOT.getLbcref().add(inner.getLNDISLM().getLiblrf()));
		LNDBNOT.setLbtprf(LNDBNOT.getLbcprf().add(inner.getLNDMAST().getBilprf()));
		LNDBNOT.setLbtint(LNDBNOT.getLbcint().add(inner.getLNDMAST().getBilint()));
		LNDBNOT.setLbtmin(LNDBNOT.getLbcmin().add(inner.getLNDMAST().getBilmin()));
		LNDBNOT.setLbtprn(LNDBNOT.getLbcprn().add(inner.getLNDMAST().getBilprn()));

		WRKBAL = inner.getLNDMAST().getCbal();
		if ((inner.getLNDMAST().getIbase().compareTo(new BigDecimal("9")) == 0)
				|| inner.BS8REB.trim().equals("Y")) 
		{
			WRKBAL = WRKBAL.subtract(inner.getLNDMAST().getIntreb());
			WRKBAL = WRKBAL.subtract(inner.getLNDMAST().getAccern()).setScale(ScaleValue.BAL, RoundingMode.DOWN);
		}

		if ((inner.getLNDMAST().getWrkblp().compareTo(BigDecimal.ZERO) < 0)) 
		{
			WRKBAL = WRKBAL.subtract(inner.getLNDMAST().getWrkblp());
		}

		if ((inner.getLNPPAR2().getPadjac().trim().equals("Y") && inner.getLNDMAST().getCgrint().trim().equals("Y"))) {
		} else {
			if ((LNDBNOT.getLbtprn().compareTo(WRKBAL) > 0) 
					&& (inner.getLNDMAST().getCbal().compareTo(BigDecimal.ZERO) > 0)){
				LNDBNOT.setLbcprn(inner.getLNDMAST().getCbal().subtract(inner.getLNDMAST().getBilprn()));
				if ((inner.getLNDMAST().getWrkblp().compareTo(BigDecimal.ZERO) < 0)) {
					LNDBNOT.setLbcprn(LNDBNOT.getLbcprn().subtract(inner.getLNDMAST().getWrkblp()));
				}

				if ((inner.getLNDMAST().getIbase().compareTo(new BigDecimal("9")) == 0)
						|| inner.BS8REB.trim().equals("Y")) {
					LNDBNOT.setLbcprn(LNDBNOT.getLbcprn().subtract(inner.getLNDMAST().getIntreb()));
					LNDBNOT.setLbcprn(LNDBNOT.getLbcprn().subtract(inner.getLNDMAST().getAccern()).setScale(ScaleValue.BAL, RoundingMode.DOWN));
				}

				if ((LNDBNOT.getLbcprn().compareTo(BigDecimal.ZERO) < 0)) 
				{
					LNDBNOT.setLbcprn(BigDecimal.ZERO);
				}

				LNDBNOT.setLbtprn(LNDBNOT.getLbcprn().add(inner.getLNDMAST().getBilprn()));
			}

		}

		if(inner.getListLNDPMTB().size()>0){
			for(LNDPMTB paymentBilling: inner.getListLNDPMTB()){
				LNDBNOT.setLbpprn(LNDBNOT.getLbpprn().add(paymentBilling.getLbprn()));
				LNDBNOT.setLbpint(LNDBNOT.getLbpint().add(paymentBilling.getLbint()));
				LNDBNOT.setLbpmin(LNDBNOT.getLbpmin().add(paymentBilling.getLbmin()));
				LNDBNOT.setLbpprf(LNDBNOT.getLbpprf().add(paymentBilling.getLbprf()));
				LNDBNOT.setLbpref(LNDBNOT.getLbpref().add(paymentBilling.getLbref()));
				LNDBNOT.setLbpcom(LNDBNOT.getLbpcom().add(paymentBilling.getLbcom()));
				LNDBNOT.setLbplc(LNDBNOT.getLbplc().add(paymentBilling.getLblc()));
				LNDBNOT.setLbpcf(LNDBNOT.getLbpcf().add(paymentBilling.getLbcf()));
				LNDBNOT.setLbpoc(LNDBNOT.getLbpoc().add(paymentBilling.getLboc()));
				LNDBNOT.setLbpmc(LNDBNOT.getLbpmc().add(paymentBilling.getLbmc()));
				LNDBNOT.setLbprin(LNDBNOT.getLbprin().add(paymentBilling.getLbrin()));
				LNDBNOT.setLbprlc(LNDBNOT.getLbprlc().add(paymentBilling.getLbrlc()));
			}					
		}

		if ((LNDEXCB.getXcpcod().compareTo(new BigDecimal("67")) != 0)) {
			inner.getLNDMAST().setBilprn(inner.getLNDMAST().getBilprn().add(LNDBNOT.getLbcprn()));
			inner.getLNDMAST().setBilint(inner.getLNDMAST().getBilint().add(LNDBNOT.getLbcint()));
			inner.getLNDMAST().setBilmin(inner.getLNDMAST().getBilmin().add(LNDBNOT.getLbcmin()));
			inner.getLNDMAST().setBilprf(inner.getLNDMAST().getBilprf().add(LNDBNOT.getLbcprf()));

			inner.getLNDMAST().setBilrin(inner.getLNDMAST().getBilrin().add(LNDBNOT.getLbcrin()));
			inner.getLNDMAST().setBillc(inner.getLNDMAST().getBillc().add(LNDBNOT.getLbclc()));
			inner.getLNDMAST().setBilcf(inner.getLNDMAST().getBilcf().add(LNDBNOT.getLbccf()));
			inner.getLNDMAST().setBiloc(inner.getLNDMAST().getBiloc().add(LNDBNOT.getLbcoc()));
			inner.getLNDMAST().setBilmc(inner.getLNDMAST().getBilmc().add(LNDBNOT.getLbcmc()));
			inner.getLNDMAST().setBilrlc(inner.getLNDMAST().getBilrlc().add(LNDBNOT.getLbcrlc()));
			if(inner.getLNDISLM() !=null){
				inner.getLNDISLM().setLiblrf(inner.getLNDISLM().getLiblrf().add(LNDBNOT.getLbcref()));
				inner.getLNDISLM().setLiblcm(inner.getLNDISLM().getLiblcm().add(LNDBNOT.getLbccom()));	
			}
		}
		bg = LNDBNOT.getLbcprn().add(LNDBNOT.getLbcint());
		bg = bg.add(LNDBNOT.getLbcmin());
		bg = bg.add(LNDBNOT.getLbcprf());
		bg = bg.add(LNDBNOT.getLbclc());
		bg = bg.add(LNDBNOT.getLbccf());
		bg = bg.add(LNDBNOT.getLbcoc());
		bg = bg.add(LNDBNOT.getLbcmc());
		bg = bg.add(LNDBNOT.getLbcrin());
		bg = bg.add(LNDBNOT.getLbcrlc());
		LNDBNOT.setLbctot(bg);

		bg = LNDBNOT.getLbpprn().add(LNDBNOT.getLbpint());
		bg = bg.add(LNDBNOT.getLbpmin());
		bg = bg.add(LNDBNOT.getLbpprf());
		bg = bg.add(LNDBNOT.getLbplc());
		bg = bg.add(LNDBNOT.getLbpcf());
		bg = bg.add(LNDBNOT.getLbpoc());
		bg = bg.add(LNDBNOT.getLbpmc());
		bg = bg.add(LNDBNOT.getLbprin());
		bg = bg.add(LNDBNOT.getLbprlc());
		LNDBNOT.setLbptot(bg);

		bg = LNDBNOT.getLbtprn().add(LNDBNOT.getLbtint());
		bg = bg.add(LNDBNOT.getLbtmin());
		bg = bg.add(LNDBNOT.getLbtprf());
		bg = bg.add(LNDBNOT.getLbtlc());
		bg = bg.add(LNDBNOT.getLbtcf());
		bg = bg.add(LNDBNOT.getLbtoc());
		bg = bg.add(LNDBNOT.getLbtmc());
		bg = bg.add(LNDBNOT.getLbtrin());
		bg = bg.add(LNDBNOT.getLbtrlc());
		LNDBNOT.setLbttot(bg);
		
		bg = LNDBNOT.getLbcprn().add(LNDBNOT.getLbcint());
		bg = bg.add(LNDBNOT.getLbcmin());
		bg = bg.add(LNDBNOT.getLbcprf());
		bg = bg.add(LNDBNOT.getLbclc());
		bg = bg.add(LNDBNOT.getLbccf());
		bg = bg.add(LNDBNOT.getLbcoco());
		bg = bg.add(LNDBNOT.getLbcmco());
		bg = bg.add(LNDBNOT.getLbcrin());
		bg = bg.add(LNDBNOT.getLbcrlc());
		LNDBNOT.setLbctoto(bg);

		if (((LNDEXCB.getXcpcod().compareTo(new BigDecimal("67")) != 0)
				&& (LNDEXCB.getXcpcod().compareTo(new BigDecimal("63")) != 0)
				&& (WPRTPM.compareTo(BigDecimal.ZERO) == 0) 
				&& (WINTAD.compareTo(BigDecimal.ZERO) == 0))) 
		{
			if ((inner.ODTYPE.trim().equals("C") 
					&& (LNDBNOT.getLbcref().compareTo(BigDecimal.ZERO) == 0))
					|| !inner.ODTYPE.trim().equals("C")) {

				if ((LNDBNOT.getLbttot().compareTo(BigDecimal.ZERO) <= 0)) {
					return;
				}

			}

		}



		//add indicator : filter by pmtcod 8 , if no minimum charge , dont write lndpmtb
		if(WriteBilling == true) {
		LNDPMTB LNDPMTB = new LNDPMTB();
		LNDPMTB.initialise();
		
		LNDPMTB = genpmb(inner, LNDEXCB, LNDPMTB);

		//Generate hist record for billing record
		if(LNDPMTB.getLbdud8().compareTo(inner.LL1NB8) <= 0){			
			genhis(inner, LNDPMTB,
					LNPTYP, JDCURR, PMNCTIM6, PBATCH, 
					LPZCSH, PMNCUID, PMNCWID, PMNCDT8, PMNCSRC, PPSPGM,  LNDPMTB.getLbdud8());
		}
		//
//		BigDecimal SEQN8 = BigDecimal.ZERO;
//		//write collection history 	 
//		for (LNDMIDM OBLNDMIDM : listLNDMIDMWriteCollection) {
//			Gson gson = CommonGsonParser.DEFAULT_GSON;
//			String strObj = gson.toJson(OBLNDMIDM);
//			LNDMIDM LNDMIDM = gson.fromJson(strObj, LNDMIDM.class);
//				
//			inner.getLNDFTRNI().setLhamt(LNDMIDM.getLmdamt());
//			SEQN8 = SEQN8.add(BigDecimal.ONE);
//			cltrnl(inner, PPSPGM, SEQN8);
//
//			inner.getLNDFTRNI().setLhtran(new BigDecimal("413"));
//			inner.getLNDFTRNI().setLhdorc("D");
//			inner.getLNDFTRNI().setLhafft("N");
//			inner.getLNDFTRNI().setLhttyp("AJ");
//			inner.getLNDFTRNI().setLhafnp("N");
//			inner.getLNDFTRNI().setLhctyp(LNDMIDM.getLmdctp());
//			inner.getLNDFTRNI().setLhseqn(SEQN8);
//			inner.getLNDFTRNI().setLhaxtc("LNF13004");
//
//			LoansUpdateTransactionHistory objLoansUpdateTransactionHistory = new LoansUpdateTransactionHistory();
//			LoansUpdateTransactionHistory.IO LoansUpdateTransactionHistoryIO = objLoansUpdateTransactionHistory.new IO();
//			LoansUpdateTransactionHistoryIO.setOB(inner);
//			objLoansUpdateTransactionHistory.updateTransactionHistory(LoansUpdateTransactionHistoryIO, "", inner.LL1PD8, inner.LL1NB8, 
//					JDCURR, PMNCTIM6, PBATCH, LPZCSH, PMNCUID, PMNCWID, PMNCDT8, PMNCSRC, PPSPGM, LNDPMTB.getLbdud8());
//	}
		
//		inner.getLNDMAST().setPmtcod(XPMTCD);
//		inner.getLNDMAST().setBigDecimal("DRLIMT", objWork.getBigDecimal("B_DRLIMT"));
//		inner.getLNDMAST().setBigDecimal("MISCD", objWork.getBigDecimal("MISAMTT"));
//		inner.getLNDMAST().setBigDecimal("OTHCHG", objWork.getBigDecimal("OTHAMTT"));

		genbnt(inner, LNDBNOT);

		}
	}

	// *********************************************************************
	// XCPC60 SUBR - PROCESS EXCEPTIONAL CODE 60 & 67      
	// *********************************************************************
	public void xcpc60(IO inner, LNDEXCP LNDEXCB) throws Exception {

		//System.out.println("xcpc60");

		//		BigDecimal WINTRB = BigDecimal.ZERO;
		//		BigDecimal SINTRB = BigDecimal.ZERO;
		//		BigDecimal XINTRB = BigDecimal.ZERO;
		//		BigDecimal WLICRF = BigDecimal.ZERO;
		//		

		if (inner.ISLACT.trim().equals("Y")) {
			islpmt(inner, LNDEXCB);

		} else {
			if ((inner.getLNDMAST().getNpdt8().compareTo(
					LNDEXCB.getSspdt8()) <= 0)) {
				PMTWRK = inner.getLNDMAST().getPmtamt();
				PMTWMIN = inner.getLNDMAST().getMipmta();
				PMTWINT = inner.getLNDMAST().getIpmtam();
				PMTWRSI = inner.getLNDMAST().getRipmta();
				PMTWPRN = inner.getLNDMAST().getPpmtam();
			} else {
				PMTWRK = BigDecimal.ZERO;
				PMTWMIN = BigDecimal.ZERO;
				PMTWINT = BigDecimal.ZERO;
				PMTWRSI = BigDecimal.ZERO;
				PMTWPRN = BigDecimal.ZERO;
			}

			Boolean foundLNDPMTF = false;
			int index_listLNDPMTF = 0;

			Predicate<LNDPMTF> LNFDT8LessEqualWLNFDT8 = i -> i.getLnfdt8().compareTo(LNDEXCB.getSspdt8()) <= 0;

			Comparator<LNDPMTF> sortByLNFDT8 = (o1, o2) -> o1.getLnfdt8().compareTo(o2.getLnfdt8());

			LNDPMTF LNDPMTF = inner.getListLNDPMTF().stream()
					.filter(LNFDT8LessEqualWLNFDT8)
					.sorted(sortByLNFDT8.reversed())
					.findFirst().orElse(null);

			if(LNDPMTF != null){
				foundLNDPMTF = true;
				if ((inner.getLNDMAST().getNpdt8().compareTo(LNDPMTF.getLnfdt8()) <= 0)) {
					PMTWRK = LNDPMTF.getLnfnam();
				}
			}

			if (((inner.getLNDMAST().getNwpmd8().compareTo(BigDecimal.ZERO) != 0)
					&& (LNDEXCB.getSspdt8().compareTo(inner.getLNDMAST().getNwpmd8()) >= 0)
					&& (inner.getLNDMAST().getNpdt8().compareTo(inner.getLNDMAST().getNwpmd8()) <= 0) 
					&& (inner.getLNDMAST().getNewpmt().compareTo(BigDecimal.ZERO) > 0))) {
				if (foundLNDPMTF == false
						|| (foundLNDPMTF == true 
						&& (LNDPMTF.getLnfdt8().compareTo(inner.getLNDMAST().getNwpmd8()) < 0))) {
					PMTWRK = inner.getLNDMAST().getNewpmt();
				}

			}

		}

		if (inner.getLNDMAST().getAltsch().trim().equals("Y")) {
			srlndpsch(inner);

		}

		if (inner.getLNDMAST().getInstod().trim().equals("Y")) {
			inodpr(inner);

		} 
		
		BillRestructureLC(inner);
		
		//grab midm file --lmdamt , collection fees
		
//		Predicate<LNDDFEE> lfetypEqualCL = i -> i.getLfetyp().trim().equals("CL");
//		Comparator<LNDDFEE> sortByLfeseq = (o1, o2) -> o1.getLfeseq().compareTo(o2.getLfeseq());
//		LNDDFEE objLNDDFEE = (LNDDFEE) inner.getListLNDDFEE().stream()
//				.filter(lfetypEqualCL)
//				.sorted(sortByLfeseq.reversed())
//				.findFirst().orElse(null);
//		if(objLNDDFEE != null)
//			lfectp = objLNDDFEE.getLfectp();//store lfectp 
// 
//		// account number -> dfee -> midm(total up collectionFee)  
//		BigDecimal TLNDAMT_O = BigDecimal.ZERO;
//		BigDecimal TLNDAMT_M = BigDecimal.ZERO;
//		BigDecimal NSPDT8 = LNDEXCB.getSspdt8();
//
////		Predicate<LNDMIDM> lmdue8EqualNSPDT8 = i -> i.getLmdue8().compareTo(NSPDT8) == 0;
//
//		List <LNDMIDM> listLNDMIDM = (List<LNDMIDM>) inner.getListLNDMIDM().stream()
//		.filter(i -> i.getLmdue8().compareTo(NSPDT8) == 0 && i.getLmdctp().equals(lfectp))
//		.collect(Collectors.toList()); 
//		for (LNDMIDM objLNDMIDM : listLNDMIDM){		 
//		  
//			//get total from LNDMIDM
//			if(objLNDMIDM.getLmdmo().trim().equals("O")) {
//				TLNDAMT_O = TLNDAMT_O.add(objLNDMIDM.getLmdamt());
//			}else 
//			if(objLNDMIDM.getLmdmo().trim().equals("M")) {
//				TLNDAMT_M = TLNDAMT_M.add(objLNDMIDM.getLmdamt());
//			} 
//
//			//array for collection write history 
//			listLNDMIDMWriteCollection.add(objLNDMIDM);
//		}
//		//if billing already gen , use lboc check with midm , if equal no billing<---------add later
//		//if(inner.getlndpmtb().getLboc compare TLNDAMT , if equal... no need add colelction fee below 3 line )
//		Optional<LNDPMTB> optLNDPMTB;
//		optLNDPMTB = inner.getListLNDPMTB().stream()
//				.filter(i -> i.getLbdud8().compareTo(NSPDT8)==0)
//				.findFirst();
//		if(optLNDPMTB.isPresent()){
//			LNDPMTB LNDPMTB;
//			LNDPMTB = optLNDPMTB.get();
//			//TLNDAMT_M need minus off the LNDPMTB's LBMC where LBDUD8 = SSPDT8(if record found)
//			//TLNDAMT_O need minus off the LNDPMTB's LBOC where LBDUD8 = SSPDT8
//			TLNDAMT_M = TLNDAMT_M.subtract(LNDPMTB.getLbmc());
//			TLNDAMT_O = TLNDAMT_O.subtract(LNDPMTB.getLboc());
//		}
//		inner.getLNDMAST().setOthchg(inner.getLNDMAST().getOthchg().add(TLNDAMT_O));
//		inner.getLNDMAST().setMiscd(inner.getLNDMAST().getMiscd().add(TLNDAMT_M));
//				inner.getLNDMSTS().setYtdinc(inner.getLNDMSTS().getYtdinc().add(TLNDAMT_O.add(TLNDAMT_M)));
//				inner.getLNDMSTS().setLtdinc(inner.getLNDMSTS().getLtdinc().add(TLNDAMT_O.add(TLNDAMT_M)));	
		switch (inner.getLNDMAST().getPmtcod().intValue()) {
		case 0:
			pmtcd0(inner, LNDEXCB);

			break;
		case 1:
			pmtcd1(inner, LNDEXCB);

			break;
		case 2:
			pmtcd2(inner, LNDEXCB);

			break;
		case 3:
			pmtcd3(inner, LNDEXCB);

			break;
		case 5:
			pmtcd5(inner, LNDEXCB);

			break;
		case 6:
			pmtcd6(inner, LNDEXCB);

			break;
		case 8:
			pmtcd8(inner, LNDEXCB);

			break;
		}

		//		if ((LNDBNOT.getLbcprn().compareTo(BigDecimal.ZERO) < 0)) {
		//			LNDBNOT.setLbcprn(BigDecimal.ZERO);
		//		}

	}

	// *********************************************************************
	//
	// *********************************************************************
	public void pmtcd0(IO inner, LNDEXCP LNDEXCB) throws Exception {

		BigDecimal WKPRTP = BigDecimal.ZERO;
		BigDecimal ACRUAL = BigDecimal.ZERO;
		BigDecimal LateCharge = BigDecimal.ZERO;
		BigDecimal CommitmentFee = BigDecimal.ZERO;
		BigDecimal RestructuredInterest = BigDecimal.ZERO;
		BigDecimal MoratoriumInterest = BigDecimal.ZERO;
		BigDecimal RestructuredLateCharge = BigDecimal.ZERO;
		BigDecimal OtherCharges = BigDecimal.ZERO;
		BigDecimal MiscellaneousCost = BigDecimal.ZERO;

		//retrieve existing billing info 
		BigDecimal PMTB8 = LNDEXCB.getSspdt8();
		// chain file to get record		
		Predicate<LNDPMTB> LBDUD8EqualSSPDT8 = i -> i.getLbdud8().compareTo(PMTB8) == 0;
		
		LNDPMTB OBLNDPMTB_ref = (LNDPMTB) inner.getListLNDPMTB().stream()
				.filter(LBDUD8EqualSSPDT8)
				.findFirst().orElse(null);

		Gson gson_ref = CommonGsonParser.DEFAULT_GSON;
		String strObj_ref = gson_ref.toJson(OBLNDPMTB_ref);
		LNDPMTB LNDPMTB_ref = gson_ref.fromJson(strObj_ref, LNDPMTB.class);
		
		ACRUAL = fbill(inner);

		if (!LNDBNOT.getMatcod().trim().equals("M")) {
		 // simulated maturity (XMTD8) != loan maturity date ; means maturity date pending to extend - switch product features 
		if ((inner.getLNDMAST().getPrebal().compareTo(inner.getLNDMAST().getPmtamt()) > 0
				|| inner.XMTDT8.compareTo(inner.getLNDMAST().getMatdt8()) != 0 ) 
				|| (inner.getLNDMAST().getPrebal().compareTo(BigDecimal.ZERO) == 0)
				|| (inner.getLNDMAST().getAltsch().trim().equals("Y") 
						&& (inner.getLNDMAST().getPrebal().compareTo(PMTWRK) > 0))
				|| inner.getLNDMAST().getInstod().trim().equals("Y")) {
			
			if(inner.getLNPPAR2().getPincmc().trim().equals("Y") && PMTWRK.compareTo(BigDecimal.ZERO) > 0) {
//				MiscellaneousCost = inner.getLNDMAST().getMiscd().setScale(ScaleValue.BAL, RoundingMode.DOWN);
				MiscellaneousCost = LoansUpdatePaymentBilling.setFeeCharges("M", inner.getLNDMAST().getNspdt8(), inner.getListLNDMIDM());
				MiscellaneousCost = MiscellaneousCost.subtract(inner.getLNDMAST().getBilmc());
				LNDBNOT.setLbcmc(MiscellaneousCost); 
				PMTWRK = PMTWRK.subtract(LNDBNOT.getLbcmc());

				//Subtract billed mc from existing billing 
				if(LNDPMTB_ref != null)
					PMTWRK = PMTWRK.subtract(LNDPMTB_ref.getLbmco()); 
			}
			
			if(inner.getLNPPAR2().getPincot().trim().equals("Y") && PMTWRK.compareTo(BigDecimal.ZERO) > 0) {
//				OtherCharges = inner.getLNDMAST().getOthchg().setScale(ScaleValue.BAL, RoundingMode.DOWN);
				OtherCharges = LoansUpdatePaymentBilling.setFeeCharges("O", inner.getLNDMAST().getNspdt8(), inner.getListLNDMIDM());
				OtherCharges = OtherCharges.subtract(inner.getLNDMAST().getBiloc());
				LNDBNOT.setLbcoc(OtherCharges);
				PMTWRK = PMTWRK.subtract(LNDBNOT.getLbcoc());
				
				//Subtract billed oc from existing billing 
				if(LNDPMTB_ref != null)
					PMTWRK = PMTWRK.subtract(LNDPMTB_ref.getLboco()); 
			}
			
			if(inner.getLNPPAR2().getPincrl().trim().equals("Y") && PMTWRK.compareTo(BigDecimal.ZERO) > 0) {
				
				BillRestructureLC(inner);
				//cap total billed within installment amount
				LNDBNOT.setLbcrlc(LNDBNOT.getLbcrlc().min(PMTWRK));
				
				PMTWRK = PMTWRK.subtract(LNDBNOT.getLbcrlc());
			}
			
			if(inner.getLNPPAR2().getPincmo().trim().equals("Y") && PMTWRK.compareTo(BigDecimal.ZERO) > 0) {
				MoratoriumInterest = inner.getLNDMAST().getMorint().setScale(ScaleValue.BAL, RoundingMode.DOWN);
				MoratoriumInterest = MoratoriumInterest.subtract(inner.getLNDMAST().getBilmin());
				
				MoraInt(inner,LNDEXCB,MoratoriumInterest);
//				//cap total billed within installment amount
				LNDBNOT.setLbcmin(LNDBNOT.getLbcmin().min(PMTWRK));
//				LNDBNOT.setLbcmin(MoratoriumInterest);
				PMTWRK = PMTWRK.subtract(LNDBNOT.getLbcmin());
			}
			
			if(inner.getLNPPAR2().getPincri().trim().equals("Y") && PMTWRK.compareTo(BigDecimal.ZERO) > 0) {
				
				BillRestructureInt(inner);
				//cap total billed within installment amount
				LNDBNOT.setLbcrin(LNDBNOT.getLbcrin().min(PMTWRK));
				PMTWRK = PMTWRK.subtract(LNDBNOT.getLbcrin());
			}
			
			if(inner.getLNPPAR2().getPinccm().trim().equals("Y") && PMTWRK.compareTo(BigDecimal.ZERO) > 0) {
				CommitmentFee = inner.getLNDMAST().getComacc().setScale(ScaleValue.BAL, RoundingMode.DOWN);
				CommitmentFee = CommitmentFee.subtract(inner.getLNDMAST().getBilcf());
				//cap total billed within installment amount
				LNDBNOT.setLbccom(CommitmentFee.min(PMTWRK));
//				LNDBNOT.setLbccom(CommitmentFee);
				PMTWRK = PMTWRK.subtract(LNDBNOT.getLbccom());
			}
			
			//Billed principle -  Pinclc=Y=include LC 
			if(inner.getLNPPAR2().getPinclc().trim().equals("Y") && PMTWRK.compareTo(BigDecimal.ZERO) > 0) {
				LateCharge = inner.getLNDMAST().getPenint().setScale(ScaleValue.BAL, RoundingMode.DOWN);
				LateCharge = LateCharge.subtract(inner.getLNDMAST().getBillc());
				
				//cap total billed within installment amount
				LNDBNOT.setLbclc(LateCharge.min(PMTWRK));
//				LNDBNOT.setLbclc(LateCharge);
				PMTWRK = PMTWRK.subtract(LNDBNOT.getLbclc());
			}
			
			if(PMTWRK.compareTo(BigDecimal.ZERO) > 0)
			{
				if (((ACRUAL.compareTo(BigDecimal.ZERO) != 0) 
						&& !inner.getLNPPAR2().getPinpay().trim().equals("Y"))) {
					LNDBNOT.setLbcprn(PMTWRK.subtract(ACRUAL));
					inner.getLNDMAST().setPmtamt(LNDBNOT.getLbcprn().add(LNDBNOT.getLbcint()));
				} else {
					if (((LNDBNOT.getLbcint().compareTo(PMTWRK) > 0)
							&& !inner.isMaturityOver 
							&& !LNDBNOT.getMatcod().trim().equals("M"))) {
						LNDBNOT.setLbcint(PMTWRK);
						LNDBNOT.setLbcprn(BigDecimal.ZERO);
					} else {
						LNDBNOT.setLbcprn(PMTWRK.subtract(LNDBNOT.getLbcint()));
					}	
				}
			}else {
				LNDBNOT.setLbcint(BigDecimal.ZERO);
				LNDBNOT.setLbcprn(BigDecimal.ZERO);
			}

		} else {
			LNDBNOT.setLbcprn(inner.getLNDMAST().getPrebal());
		}
		
		/* STV - to use WPRTPM instead of WKPRTP. 
		if (((inner.getLNDMAST().getPrtpmt().compareTo(BigDecimal.ZERO) > 0) 
				&& (inner.getLNDMAST().getNpdt8().compareTo(LNDEXCB.getSspdt8()) == 0))) {
			WKPRTP = inner.getLNDMAST().getPrtpmt();
			if ((LNDBNOT.getLbcprn().compareTo(BigDecimal.ZERO) > 0)) {
				if ((LNDBNOT.getLbcprn().compareTo(WKPRTP) >= 0)) {
					LNDBNOT.setLbcprn(LNDBNOT.getLbcprn().subtract(WKPRTP));
					WKPRTP = BigDecimal.ZERO;
				} else {
					//WKPRTP = WKPRTP.subtract(LNDBNOT.getLbcprn());
					WKPRTP = LNDBNOT.getLbcprn().subtract(WKPRTP);
					LNDBNOT.setLbcprn(BigDecimal.ZERO);
				}

			}

			if (((LNDBNOT.getLbcint().compareTo(BigDecimal.ZERO) > 0) 
					&& (WKPRTP.compareTo(BigDecimal.ZERO) > 0))) {
				if ((LNDBNOT.getLbcint().compareTo(WKPRTP) >= 0)) {
					LNDBNOT.setLbcint(LNDBNOT.getLbcint().subtract(WKPRTP));
					WKPRTP = BigDecimal.ZERO;
				} else {
					// WKPRTP = WKPRTP.subtract(LNDBNOT.getLbcint());
					WKPRTP = LNDBNOT.getLbcint().subtract(WKPRTP);
					LNDBNOT.setLbcint(BigDecimal.ZERO);
				}

			}

			if ((inner.getLNDMAST().getWrkblp().compareTo(BigDecimal.ZERO) < 0)) {
				WPRTPM = inner.getLNDMAST().getWrkblp().multiply(new BigDecimal("-1"));
			} else {
				WPRTPM = inner.getLNDMAST().getPrtpmt();
			}

		}  STV- */

		// STV - to use WPRTPM instead of WKPRTP. Bcos WPRTPM will use to minus out WRKBLP in later
		if (((inner.getLNDMAST().getPrtpmt().compareTo(BigDecimal.ZERO) > 0) 
				&& (inner.getLNDMAST().getNpdt8().compareTo(LNDEXCB.getSspdt8()) == 0))) {
			WPRTPM = inner.getLNDMAST().getPrtpmt();
			if ((LNDBNOT.getLbcprn().compareTo(BigDecimal.ZERO) > 0)) {
				if ((LNDBNOT.getLbcprn().compareTo(WPRTPM) >= 0)) {
					LNDBNOT.setLbcprn(LNDBNOT.getLbcprn().subtract(WPRTPM));
					//WPRTPM = BigDecimal.ZERO;
				} else {
					//WKPRTP = WKPRTP.subtract(LNDBNOT.getLbcprn());
					WPRTPM = LNDBNOT.getLbcprn();
					LNDBNOT.setLbcprn(BigDecimal.ZERO);
				}

			}

			if(inner.getLNDMAST().getWrkbli().compareTo(BigDecimal.ZERO) < 0) {
				WINTAD = inner.getLNDMAST().getWrkbli().multiply(new BigDecimal("-1"));
				if(WINTAD.compareTo(WPRTPM) > 0) {
					WINTAD = WPRTPM;
					WPRTPM = BigDecimal.ZERO;
				} else {
					WPRTPM = WPRTPM.subtract(WINTAD);
				}
			}
//			if (((LNDBNOT.getLbcint().compareTo(BigDecimal.ZERO) > 0) 
//					&& (WPRTPM.compareTo(BigDecimal.ZERO) > 0))) {
//				if ((LNDBNOT.getLbcint().compareTo(WPRTPM) >= 0)) {
//					LNDBNOT.setLbcint(LNDBNOT.getLbcint().subtract(WPRTPM));
//					//WKPRTP = BigDecimal.ZERO;
//				} else {
//					// WKPRTP = WKPRTP.subtract(LNDBNOT.getLbcint());
//					WPRTPM = LNDBNOT.getLbcint();
//					LNDBNOT.setLbcint(BigDecimal.ZERO);
//				}
//
//			}

//			if ((inner.getLNDMAST().getWrkblp().compareTo(BigDecimal.ZERO) < 0)) {
//				WPRTPM = inner.getLNDMAST().getWrkblp().multiply(new BigDecimal("-1"));
//			} else {
//				WPRTPM = inner.getLNDMAST().getPrtpmt();
//			}

		}
		
		if (LNDBNOT.getLbcint().compareTo(PMTWRK) > 0 
				&& !LNDBNOT.getMatcod().trim().equals("M")
				&& PMTWRK.compareTo(BigDecimal.ZERO) > 0 ) {
			LNDBNOT.setLbcint(PMTWRK);
		}

		calbip(inner, LNDEXCB);

		}else {
			//matured billing , overwrite all 
			calmatured(inner, LNDEXCB);
		}

	}

	// *********************************************************************
	//
	// *********************************************************************
	public void pmtcd1(IO inner, LNDEXCP LNDEXCB) throws Exception {

		LNDBNOT.setLbcprn(PMTWRK);
		if (((inner.getLNDMAST().getPrtpmt().compareTo(BigDecimal.ZERO) > 0)
				&& (inner.getLNDMAST().getNpdt8().compareTo(LNDEXCB.getSspdt8()) == 0) 
				&& (inner.getLNDMAST().getWrkblp().compareTo(BigDecimal.ZERO) >= 0))) {
			LNDBNOT.setLbcprn(LNDBNOT.getLbcprn().subtract(inner.getLNDMAST().getPrtpmt()));
			WPRTPM = WPRTPM.add(inner.getLNDMAST().getPrtpmt());
		}

		calbip(inner, LNDEXCB);

	}

	// *********************************************************************
	//
	// *********************************************************************
	public void pmtcd2(IO inner, LNDEXCP LNDEXCB) throws Exception {

		BigDecimal TMPACC = BigDecimal.ZERO;

		if (inner.getLNPPAR2().getPcapin().trim().equals("Y")
				|| inner.getLNPPAR2().getPcapmt().trim().equals("Y")) {
			if ((LNDEXCB.getXcpcod().compareTo(new BigDecimal("63")) == 0)) {
				WKBINT = inner.getLNDMAST().getAccint().add(ACRINT);
				WKBMOR = inner.getLNDMAST().getMorint().add(SACRIN);
				TMPACC = WKBINT;
				//roundi();
				TMPACC = CommonRoundCent.roundCent(inner.getSSPAPPL().getSsarot(), TMPACC, inner.getLNDMAST().getCurdec());

				LNDBNOT.setLbcint(TMPACC.setScale(ScaleValue.BAL, RoundingMode.DOWN));

				MoraInt(inner, LNDEXCB, WKBMOR);
//				if (((LNDEXCB.getSspdt8().compareTo(BigDecimal.ZERO) > 0))
//						|| ((LNDEXCB.getSsipd8().compareTo(BigDecimal.ZERO) > 0))) 
//					//(inner.getLNDMAST().getBigDecimal("STRDMI").compareTo(LNDEXCB.getBigDecimal("SSPDT8")) > 0)  && - CYN101
//					//(inner.getLNDMAST().getBigDecimal("STRDMI").compareTo(LNDEXCB.getBigDecimal("SSIPD8")) > 0) && - CYN1001
//					//|| (inner.getLNDMAST().getBigDecimal("STRDMI").compareTo(BigDecimal.ZERO) == 0) - CYN101
//				{
//					LNDBNOT.setLbcmin(BigDecimal.ZERO);
//				} else {
//					TMPACC = WKBMOR;
//					//roundi();
//					TMPACC = CommonRoundCent.roundCent(inner.getSSPAPPL().getSsarot(), TMPACC, inner.getLNDMAST().getCurdec());
//					LNDBNOT.setLbcmin(TMPACC.setScale(ScaleValue.BAL, RoundingMode.DOWN));
//				}

			}

		}

	}

	// *********************************************************************
	//
	// *********************************************************************
	public void pmtcd3(IO inner, LNDEXCP LNDEXCB) throws Exception {

		BigDecimal ROLDT8 = BigDecimal.ZERO;
		BigDecimal ROLTRM = BigDecimal.ZERO;
		BigDecimal ROLDAY = BigDecimal.ZERO;
		String ROLCOD = "";

		LNDBNOT.setLbcprn(PMTWRK);
		LNDBNOT.setLbcint(BigDecimal.ZERO);

		if (((inner.getLNDMAST().getPrtpmt().compareTo(BigDecimal.ZERO) > 0)
				&& (inner.getLNDMAST().getNpdt8().compareTo(LNDEXCB.getSspdt8()) == 0) 
				&& (inner.getLNDMAST().getWrkblp().compareTo(BigDecimal.ZERO) >= 0))) {
			LNDBNOT.setLbcprn(LNDBNOT.getLbcprn().subtract(inner.getLNDMAST().getPrtpmt()));
			WPRTPM = WPRTPM.add(inner.getLNDMAST().getPrtpmt());
		}

		if ((inner.getLNDMAST().getPrtpmt().compareTo(BigDecimal.ZERO) < 0)) {
			ROLDT8 = BigDecimal.ZERO;
			if ((inner.getLNDMAST().getNpdt8().compareTo(LNDEXCB.getSspdt8()) > 0)) {
				ROLDT8 = LNDEXCB.getSspdt8();
				ROLTRM = inner.getLNDMAST().getFreq();
				ROLDAY = inner.getLNDMAST().getNpday();
				ROLCOD = inner.getLNDMAST().getFrcode().trim();
//				srlnravdm();
				ROLDT8 = CommonDateAdvanceByTerm.roll(ROLDT8, ROLTRM, ROLCOD, ROLDAY, "Y");

			}

			if (((inner.getLNDMAST().getNpdt8().compareTo(LNDEXCB.getSspdt8()) == 0) 
					&& (inner.getLNDMAST().getBilprn().compareTo(BigDecimal.ZERO) == 0))
					|| ((ROLDT8.compareTo(inner.getLNDMAST().getNpdt8()) == 0) 
							&& (inner.getLNDMAST().getBilprn().compareTo(BigDecimal.ZERO) == 0))) {
				LNDBNOT.setLbcprn(LNDBNOT.getLbcprn().subtract(inner.getLNDMAST().getPrtpmt()));
				WPRTPM = WPRTPM.add(inner.getLNDMAST().getPrtpmt());
			}

		}

		calbip(inner, LNDEXCB);

	}

	// *********************************************************************
	// *  PMTCD5 SUBR - CALCULATE BILL PRINCIPAL FOR PAYMENT CODE 5
	// *********************************************************************
	public void pmtcd5(IO inner, LNDEXCP LNDEXCB) throws Exception {

		BigDecimal WRKAMT = BigDecimal.ZERO;
		BigDecimal TMPACC = BigDecimal.ZERO;
		
	//** PAYMENT AMOUNT IS ZERO FOR PAYMENT CODE = 5
	//	* TO PROJECT THE ACCRUE INT IF PBLNDY>0       
	//	* REPLACE BY FCAST SR                         
	//	* TO FORECAST IF ADVANCE BILLING IS SPECIFIED 
	//STV - Do when Forecast flag = Y	if ((inner.getLNPPAR2().getPblndy().compareTo(BigDecimal.ZERO) > 0)
	//STV			|| inner.getLNPPAR2().getPbilin().trim().equals("U"))
		if ((inner.getLNPPAR2().getPblndy().compareTo(BigDecimal.ZERO) > 0)
				&& inner.getLNPPAR2().getPbilin().trim().equals("Y")) {
			fcast(inner, LNDEXCB);
		}

	//	* IF PCAPIN=Y (CAP AT EOM), UPON MATURITY BILLING SHOULD :-     
	//	**   BILLED  PRIN= CBAL-INTPAY (COS' CBAL INCLUSIVE OF INTPAY)  
	//	**   BILLED  INT.= ACCINT + INTPAY                              
		if (inner.getLNPPAR2().getPcapin().trim().equals("Y")) {
			LNDBNOT.setLbcprn(inner.getLNDMAST().getCbal().subtract(inner.getLNDMAST().getIntpay()));
			LNDBNOT.setLbcprn(LNDBNOT.getLbcprn().subtract(inner.getLNDMAST().getBilprn()));
			WKBINT = inner.getLNDMAST().getAccint().add(ACRINT);
			WKBMOR = inner.getLNDMAST().getMorint().add(SACRIN);
			TMPACC = WKBINT;
			//roundi();
			TMPACC = CommonRoundCent.roundCent(inner.getSSPAPPL().getSsarot(), TMPACC, inner.getLNDMAST().getCurdec());

			LNDBNOT.setLbcint(TMPACC.setScale(ScaleValue.BAL, RoundingMode.DOWN));
			
			MoraInt(inner, LNDEXCB, WKBMOR);
			//IF HAVE NOT TIME TO BILL THEN DO NOT BILLED. 
//			if ((inner.getLNDMAST().getStrdmi().compareTo(LNDEXCB.getSspdt8()) > 0
//					&& LNDEXCB.getSspdt8().compareTo(BigDecimal.ZERO) > 0)
//				|| (LNDEXCB.getSsipd8().compareTo(BigDecimal.ZERO) > 0
//						&& inner.getLNDMAST().getStrdmi().compareTo(LNDEXCB.getSsipd8()) > 0)
//				|| (inner.getLNDMAST().getStrdmi().compareTo(BigDecimal.ZERO) == 0))
//			{
//				LNDBNOT.setLbcmin(BigDecimal.ZERO);
//			} else {
//				TMPACC = WKBMOR;
//				//roundi();
//				TMPACC = CommonRoundCent.roundCent(inner.getSSPAPPL().getSsarot(), TMPACC, inner.getLNDMAST().getCurdec());
//				LNDBNOT.setLbcmin(TMPACC.setScale(ScaleValue.BAL, RoundingMode.DOWN));
//			}

			LNDBNOT.setLbcint(LNDBNOT.getLbcint().add(inner.getLNDMAST().getIntpay()));
			LNDBNOT.setLbcint(LNDBNOT.getLbcint().subtract(inner.getLNDMAST().getBilint()));
			LNDBNOT.setLbcmin(LNDBNOT.getLbcmin().subtract(inner.getLNDMAST().getBilmin()));
		}

		//**                                                                     
		//* IF PCAPMT=Y (CAP AT MAT), PCAPIN=N, OR                               
		//* IF PCAPNP=Y (CAP AT EOM AT MAT & NPL), UPON MATURITY BILLING SHOULD: 
		//**   BILLED  PRIN= CBAL ONLY (COS' CBAL EXCLUSIVE OF INTPAY)           
		//**   BILLED  INT.= ACCINT                                              
		//**   SUBSEQUENT BILLING SHOULD :-                                      
		//**   BILLED  INT = ACCINT                                              
		if (inner.getLNPPAR2().getPcapmt().trim().equals("Y")
				|| inner.getLNPPAR2().getPcapnp().trim().equals("Y")) {
			LNDBNOT.setLbcprn(LNDBNOT.getLbcprn().add(inner.getLNDMAST().getCbal()));
			LNDBNOT.setLbcprn(LNDBNOT.getLbcprn().subtract(inner.getLNDMAST().getBilprn()));
			LNDBNOT.setLbcprn(LNDBNOT.getLbcprn().subtract(inner.getLNDMAST().getBilint()));
			WKBINT = inner.getLNDMAST().getAccint().add(ACRINT);
			WKBMOR = inner.getLNDMAST().getMorint().add(SACRIN);
			TMPACC = WKBINT;
			//roundi();
			TMPACC = CommonRoundCent.roundCent(inner.getSSPAPPL().getSsarot(), TMPACC, inner.getLNDMAST().getCurdec());
			LNDBNOT.setLbcint(TMPACC.setScale(ScaleValue.BAL, RoundingMode.DOWN));
			
			MoraInt(inner, LNDEXCB, WKBMOR);
			//*IF HAVE NOT TIME TO BILL THEN DO NOT BILLED. 
//			if ((inner.getLNDMAST().getStrdmi().compareTo(LNDEXCB.getSspdt8()) > 0
//					&& LNDEXCB.getSspdt8().compareTo(BigDecimal.ZERO) > 0)
//				|| (LNDEXCB.getSsipd8().compareTo(BigDecimal.ZERO) > 0
//						&& inner.getLNDMAST().getStrdmi().compareTo(LNDEXCB.getSsipd8()) > 0)
//				|| (inner.getLNDMAST().getStrdmi().compareTo(BigDecimal.ZERO) == 0))
//			{
//				LNDBNOT.setLbcmin(BigDecimal.ZERO);
//			} else {
//				TMPACC = WKBMOR;
//				//roundi();
//				TMPACC = CommonRoundCent.roundCent(inner.getSSPAPPL().getSsarot(), TMPACC, inner.getLNDMAST().getCurdec());
//
//				LNDBNOT.setLbcmin(TMPACC.setScale(ScaleValue.BAL, RoundingMode.DOWN));
//			}

			WRKAMT = inner.getLNDMAST().getCbal().subtract(inner.getLNDMAST().getBilprn());
			if ((LNDBNOT.getMatcod().trim().equals("M") 
					&& (inner.getLNDMAST().getStatus().compareTo(BigDecimal.ONE) == 0))) {
				WRKAMT = inner.getLNDMAST().getCbal().subtract(LNDBNOT.getLbcprn());
				LNDBNOT.setLbcint(LNDBNOT.getLbcint().add(WRKAMT));
			}

		}

		if (inner.getLNPPAR2().getPcapin().trim().equals("Y")
				|| (inner.getLNPPAR2().getPcapin().trim().equals("N")
						&& inner.getLNPPAR2().getPcapnp().trim().equals("Y") 
						&& inner.isMaturityOver)) {
			LNDBNOT.setLbcint(LNDBNOT.getLbcint().add(inner.getLNDMAST().getIntpay()));
		}

		BillRestructureInt(inner);
	}

	// *********************************************************************
	//
	// *********************************************************************
	public void pmtcd6(IO inner, LNDEXCP LNDEXCB) throws Exception {

		BigDecimal TMPACC = BigDecimal.ZERO;
		BigDecimal ROLDT8 = BigDecimal.ZERO;
		BigDecimal ROLTRM = BigDecimal.ZERO;
		BigDecimal ROLDAY = BigDecimal.ZERO;
		String ROLCOD = "";
		
		if (((LNDEXCB.getXcpcod().compareTo(new BigDecimal("60")) == 0)
				&& (inner.getLNDMAST().getNspdt8().compareTo(inner.getLNDMAST().getMatdt8()) != 0) 
				&& (inner.getLNDMAST().getNspdt8().compareTo(inner.getLNDMAST().getNsipd8()) != 0))) {
			LNDBNOT.setLbcint(BigDecimal.ZERO);
		}

		LNDBNOT.setLbcprn(PMTWRK);
		String AMTPAID = "N";

		LNDPRSC LNDPRSC = new LNDPRSC();
		LNDPRSC.initialise();
		
		if (inner.getLNDMAST().getPrsch().trim().equals("Y")) {
			
			Boolean foundLNDPRSC = false;
			int index_listLNDPRSC = 0;
			
			Predicate<LNDPRSC> LPREF8EqualWLPREF8 = i -> i.getLpref8().compareTo(LNDBNOT.getLbcdt8()) == 0;

			//			Comparator<LNDPRSC> sortByLNPREF8 = (o1, o2) -> o1.getLpref8().compareTo(o2.getLpref8());

			LNDPRSC = inner.getListLNDPRSC().stream()
					.filter(LPREF8EqualWLPREF8)
					//					.sorted(sortByLNPREF8)
					.findFirst().orElse(null);

			if(LNDPRSC != null){
				foundLNDPRSC = true;
				if((LNDPRSC.getLprpd().compareTo(LNDPRSC.getLpramt()) == 0) 
						&& (LNDPRSC.getLprpd().compareTo(BigDecimal.ZERO) > 0)) {
					AMTPAID = "Y";
				}
			}else{
				foundLNDPRSC = false;
			}
		}
		
		if (AMTPAID.trim().equals("N")) {
			if (((inner.getLNDMAST().getPrtpmt().compareTo(BigDecimal.ZERO) > 0)
					&& (inner.getLNDMAST().getNpdt8().compareTo(LNDEXCB.getSspdt8()) == 0) 
					&& (inner.getLNDMAST().getWrkblp().compareTo(BigDecimal.ZERO) >= 0))) {
				LNDBNOT.setLbcprn(LNDBNOT.getLbcprn().subtract(inner.getLNDMAST().getPrtpmt()));
				WPRTPM = WPRTPM.add(inner.getLNDMAST().getPrtpmt());
			}
		} else {
			LNDBNOT.setLbcprn(BigDecimal.ZERO);
			WPRTPM = WPRTPM.add(LNDPRSC.getLprpd());
		}
		
		//** TO CHECK WHETHER TO BILL WHEN SHORT PAID (-VE PRTPMT)
		if ((inner.getLNDMAST().getPrtpmt().compareTo(BigDecimal.ZERO) < 0)) {
			ROLDT8 = BigDecimal.ZERO;
			if ((inner.getLNDMAST().getNpdt8().compareTo(LNDEXCB.getSspdt8()) > 0)) {
				ROLDT8 = LNDEXCB.getSspdt8();
				ROLTRM = inner.getLNDMAST().getFreq();
				ROLDAY = inner.getLNDMAST().getNpday();
				ROLCOD = inner.getLNDMAST().getFrcode().trim();
				//				srlnravdm();
				ROLDT8 = CommonDateAdvanceByTerm.roll(ROLDT8, ROLTRM, ROLCOD, ROLDAY, "Y");
			}

			if (((inner.getLNDMAST().getNpdt8().compareTo(LNDEXCB.getSspdt8()) == 0) 
					&& (inner.getLNDMAST().getBilprn().compareTo(BigDecimal.ZERO) == 0))
					|| ((ROLDT8.compareTo(inner.getLNDMAST().getNpdt8()) == 0) 
							&& (inner.getLNDMAST().getBilprn().compareTo(BigDecimal.ZERO) == 0))) {
				LNDBNOT.setLbcprn(LNDBNOT.getLbcprn().subtract(inner.getLNDMAST().getPrtpmt()));
				WPRTPM = WPRTPM.add(inner.getLNDMAST().getPrtpmt());
			}
		}

//		* TO BILL INTEREST ON MATURITY                                
//		* IF PCAPIN=Y (CAP AT EOM), UPON MATURITY BILLING SHOULD :-   
//		**   BILLED  PRIN= CBAL-INTPAY (COS' CBAL INCLUSIVE OF INTPAY)
		if (inner.getLNPPAR2().getPcapin().trim().equals("Y")) {
//		** DO ROUNDING FIRST B4 MOVE TO LBCINT (VCB REQUIREMENT)
			WKBINT = inner.getLNDMAST().getAccint().add(ACRINT);
			WKBMOR = inner.getLNDMAST().getMorint().add(SACRIN);
			TMPACC = WKBINT;
			//roundi();
			TMPACC = CommonRoundCent.roundCent(inner.getSSPAPPL().getSsarot(), TMPACC, inner.getLNDMAST().getCurdec());

			LNDBNOT.setLbcint(TMPACC.setScale(ScaleValue.BAL, RoundingMode.DOWN));
			
			MoraInt(inner, LNDEXCB, WKBMOR);
			//*IF HAVE NOT TIME TO BILL THEN DO NOT BILLED.
//			if (( (LNDEXCB.getSspdt8().compareTo(BigDecimal.ZERO) > 0))
//					|| ((LNDEXCB.getSsipd8().compareTo(BigDecimal.ZERO) > 0))
//					) 
//				//(inner.getLNDMAST().getBigDecimal("STRDMI").compareTo(LNDEXCB.getBigDecimal("SSPDT8")) > 0)  && - CYN101
//				//(inner.getLNDMAST().getBigDecimal("STRDMI").compareTo(LNDEXCB.getBigDecimal("SSIPD8")) > 0)  && - CYN101
//				//(inner.getLNDMAST().getBigDecimal("STRDMI").compareTo(LNDEXCB.getBigDecimal("SSIPD8")) > 0)  - CYN101
//			{
//				LNDBNOT.setLbcmin(BigDecimal.ZERO);
//			} else {
//				TMPACC = WKBMOR;
//				//roundi();
//				TMPACC = CommonRoundCent.roundCent(inner.getSSPAPPL().getSsarot(), TMPACC, inner.getLNDMAST().getCurdec());
//
//				LNDBNOT.setLbcmin(TMPACC.setScale(ScaleValue.BAL, RoundingMode.DOWN));
//			}

			LNDBNOT.setLbcint(LNDBNOT.getLbcint().add(inner.getLNDMAST().getIntpay()));
			LNDBNOT.setLbcint(LNDBNOT.getLbcint().subtract(inner.getLNDMAST().getBilint()));
			LNDBNOT.setLbcmin(LNDBNOT.getLbcmin().subtract(inner.getLNDMAST().getBilmin()));
		}

//		* IF PCAPMT=Y (CAP AT MAT), PCAPIN=N, OR                               
//		* IF PCAPNP=Y (CAP AT EOM AT MAT & NPL), UPON MATURITY BILLING SHOULD:-
//		**   BILLED  PRIN= CBAL ONLY (COS' CBAL EXCLUSIVE OF INTPAY)           
//		**   BILLED  INT.= ACCINT                                              
//		**   SUBSEQUENT BILLING SHOULD :-                                      
//		**   BILLED  INT = ACCINT                                              
		if ((inner.getLNPPAR2().getPcapmt().trim().equals("Y") 
				&& inner.isMaturityOver)
				|| (inner.getLNPPAR2().getPcapnp().trim().equals("Y") 
						&& inner.isMaturityOver)) {
			//** DO ROUNDING FIRST B4 MOVE TO LBCINT (VCB REQUIREMENT)
			WKBINT = inner.getLNDMAST().getAccint().add(ACRINT);
			WKBMOR = inner.getLNDMAST().getMorint().add(SACRIN);
			TMPACC = WKBINT;
			//roundi();
			TMPACC = CommonRoundCent.roundCent(inner.getSSPAPPL().getSsarot(), TMPACC, inner.getLNDMAST().getCurdec());
			LNDBNOT.setLbcint(TMPACC.setScale(ScaleValue.BAL, RoundingMode.DOWN));

			MoraInt(inner, LNDEXCB, WKBMOR);
			//*IF HAVE NOT TIME TO BILL THEN DO NOT BILLED.
//			if (((LNDEXCB.getSspdt8().compareTo(BigDecimal.ZERO) > 0))
//					|| ((LNDEXCB.getSsipd8().compareTo(BigDecimal.ZERO) > 0))) 
//				//(inner.getLNDMAST().getBigDecimal("STRDMI").compareTo(LNDEXCB.getBigDecimal("SSPDT8")) > 0)  && - CYN101
//				//(inner.getLNDMAST().getBigDecimal("STRDMI").compareTo(LNDEXCB.getBigDecimal("SSIPD8")) > 0)  && - CYN101
//				//|| (inner.getLNDMAST().getBigDecimal("STRDMI").compareTo(BigDecimal.ZERO) == 0) - CYN101
//			{
//				LNDBNOT.setLbcmin(BigDecimal.ZERO);
//			} else {
//				TMPACC = WKBMOR;
//				//roundi();
//				TMPACC = CommonRoundCent.roundCent(inner.getSSPAPPL().getSsarot(), TMPACC, inner.getLNDMAST().getCurdec());
//
//				LNDBNOT.setLbcmin(TMPACC.setScale(ScaleValue.BAL, RoundingMode.DOWN));
//			}
		}
	}
 
	// *********************************************************************
	//
	// *********************************************************************
	private BigDecimal fbill(IO inner) throws Exception {

		BigDecimal DATE8A = BigDecimal.ZERO;
		BigDecimal DATE8B = BigDecimal.ZERO;
		
		BigDecimal SAVDT8 = BigDecimal.ZERO;
		BigDecimal SAVACC = BigDecimal.ZERO;
		BigDecimal SAVACB = BigDecimal.ZERO;
		BigDecimal SAVACR = BigDecimal.ZERO;
		BigDecimal SAVTMP = BigDecimal.ZERO;
		BigDecimal WRKACC = BigDecimal.ZERO;
		BigDecimal ACRUAL = BigDecimal.ZERO;
		BigDecimal D360 = BigDecimal.ZERO;

		BigDecimal FRDAT8 = BigDecimal.ZERO;
		BigDecimal TODAT8 = BigDecimal.ZERO;
		int NUMC = 0;
		String DURCOD = "";
		
		BigDecimal UFPDT8 = BigDecimal.ZERO;
		BigDecimal ROLDT8 = BigDecimal.ZERO;
		BigDecimal ROLTRM = BigDecimal.ZERO;
		BigDecimal ROLDAY = BigDecimal.ZERO;
		String ROLADV = "";
		String ROLCOD = "";
		
		if (((inner.getLNDMAST().getFpdt8().compareTo(inner.LL1PD8) > 0)
				&& !inner.getLNPPAR2().getPcapin().trim().equals("Y") 
				&& inner.getLNPPAR2().getPinpay().trim().equals("Y"))
				|| (inner.getLNDMAST().getWchcod().trim().equals("Y")
						&& !inner.getLNPPAR2().getPcapin().trim().equals("Y") 
						&& inner.getLNPPAR2().getPinpay().trim().equals("Y"))) {
			ROLDT8 = inner.getLNDMAST().getFpdt8();
			if (inner.getLNDMAST().getWchcod().trim().equals("Y")) {
				ROLDT8 = LNDBNOT.getLbcdt8();
			}

			UFPDT8 = ROLDT8;
			ROLTRM = BigDecimal.ONE.multiply(new BigDecimal("-1"));
			ROLDAY = inner.getLNDMAST().getNpday();
			ROLADV = "Y";
			ROLCOD = "M";
			//			srlnravdm();
			ROLDT8 = CommonDateAdvanceByTerm.advanceMonth(ROLDT8, ROLTRM, ROLDAY, "Y");

			SAVDT8 = ROLDT8;
			SAVACB = BigDecimal.ZERO;
			SAVACR = BigDecimal.ZERO;
			FRDAT8 = SAVDT8;
			TODAT8 = UFPDT8;
			DURCOD = "D";
			//			srlnravdu();
			NUMC = CommonDateComputeDuration.getDays(FRDAT8, TODAT8);

			D360 = BigDecimal.valueOf(NUMC).multiply(new BigDecimal("12"));

			if (((SAVDT8.compareTo(inner.getLNDMAST().getFreld8()) > 0) 
					&& !inner.getLNDMAST().getWchcod().trim().equals("Y"))
					|| ((SAVDT8.compareTo(inner.getLNDMAST().getWchdt8()) > 0) 
							&& inner.getLNDMAST().getWchcod().trim().equals("Y"))) {

				Boolean foundLNDAACH = false;
				int index_listLNDAACH = 0;

				Predicate<LNDAACH> LAHDT8EqualWLAHDT8 = i -> i.getLahdt8().compareTo(LNDBNOT.getLbcdt8()) == 0;

				Comparator<LNDAACH> sortByLAHDT8 = (o1, o2) -> o1.getLahdt8().compareTo(o2.getLahdt8());

				List<LNDAACH> listLNDAACH = inner.getListLNDAACH().stream()
						.filter(LAHDT8EqualWLAHDT8)
						.sorted(sortByLAHDT8)
						.collect(Collectors.toList());

				for (LNDAACH OBLNDAACH : listLNDAACH) {
					Gson gson = CommonGsonParser.DEFAULT_GSON;
					String strObj = gson.toJson(OBLNDAACH);
					LNDAACH LNDAACH = gson.fromJson(strObj, LNDAACH.class);

					foundLNDAACH = true;

					if (SAVDT8.compareTo(LNDAACH.getLahdt8()) >= 0 ) {
						SAVACB = LNDAACH.getLahacb();
						SAVACR = LNDAACH.getLahacr();
						WFRATE = LNDAACH.getLahacf();
						WFMORT = LNDAACH.getLahacm();
						WFMIAM = LNDAACH.getLahmxf();
						WFMMAM = LNDAACH.getLahmxm();
					}

					if (SAVDT8.compareTo(LNDAACH.getLahdt8()) <= 0 ) {
						if (((SAVDT8.compareTo(inner.getLNDMAST().getFpdt8()) <= 0) 
								&& !inner.getLNDMAST().getWchcod().trim().equals("Y"))
								|| ((SAVDT8.compareTo(LNDBNOT.getLbcdt8()) <= 0) 
										&& inner.getLNDMAST().getWchcod().trim().equals("Y"))) {
							FRDAT8 = SAVDT8;
							if (((LNDAACH.getLahdt8().compareTo(inner.getLNDMAST().getFpdt8()) <= 0) 
									&& !inner.getLNDMAST().getWchcod().trim().equals("Y"))
									|| ((LNDAACH.getLahdt8().compareTo(LNDBNOT.getLbcdt8()) <= 0) 
											&& inner.getLNDMAST().getWchcod().trim().equals("Y"))) {
								TODAT8 = LNDAACH.getLahdt8();
							} else {
								if (inner.getLNDMAST().getWchcod().trim().equals("Y")) {
									TODAT8 = LNDAACH.getLahdt8();
								} else {
									TODAT8 = inner.getLNDMAST().getFpdt8();
								}
							}
							DURCOD = "D";
							//srlnravdu();
							NUMC = CommonDateComputeDuration.getDays(FRDAT8, TODAT8);

							if (((inner.getLNDMAST().getIbase().compareTo(new BigDecimal("8")) == 0) 
									&& (inner.getLNDMAST().getYbase().compareTo(new BigDecimal("5")) == 0))) {
								SAVTMP = SAVACB.multiply(SAVACR.setScale(ScaleValue.ACR, RoundingMode.DOWN));
								WRKACC = SAVTMP.divide(D360, ScaleValue.ACR,RoundingMode.HALF_EVEN);
								WRKACC = WRKACC.multiply(BigDecimal.valueOf(NUMC));
								SAVACC = SAVACC.add(WRKACC);
							} else {
								NDAYS  = BigDecimal.valueOf(NUMC);
								AMOUNT = SAVACB;
								RATACC = SAVACR;
								//basein();
								//basein(objHeader, objInput, objWork);
								DATE8A = FRDAT8;
								DATE8B = TODAT8;
								BASE = LoansYearBaseLoader.basein(inner.getLNDMAST().getYbase(), inner.getLNDMAST().getIbase());
								accrue(inner, BASE, DATE8A, DATE8B);

								SAVACC = SAVACC.add(ACRINT);
							}

							SAVDT8 = LNDAACH.getLahdt8();
							SAVACB = LNDAACH.getLahacb();
							SAVACR = LNDAACH.getLahacr();
						}

					}
					else {
						
						// process first or last record
						if (foundLNDAACH) {
							if (((SAVDT8.compareTo(inner.getLNDMAST().getFpdt8()) <= 0) 
									&& !inner.getLNDMAST().getWchcod().trim().equals("Y"))
									|| ((SAVDT8.compareTo(LNDBNOT.getLbcdt8()) <= 0) 
											&& inner.getLNDMAST().getWchcod().trim().equals("Y"))) {
								FRDAT8 = SAVDT8;
								if (((LNDAACH.getLahdt8().compareTo(inner.getLNDMAST().getFpdt8()) <= 0) 
										&& !inner.getLNDMAST().getWchcod().trim().equals("Y"))
										|| ((LNDAACH.getLahdt8().compareTo(LNDBNOT.getLbcdt8()) <= 0) 
												&& inner.getLNDMAST().getWchcod().trim().equals("Y"))) {
									TODAT8 = LNDAACH.getLahdt8();
								} else {
									if (inner.getLNDMAST().getWchcod().trim().equals("Y")) {
										TODAT8 = LNDAACH.getLahdt8();
									} else {
										TODAT8 = inner.getLNDMAST().getFpdt8();
									}
								}
								DURCOD = "D";
								//srlnravdu();
								NUMC = CommonDateComputeDuration.getDays(FRDAT8, TODAT8);

								if (((inner.getLNDMAST().getIbase().compareTo(new BigDecimal("8")) == 0) 
										&& (inner.getLNDMAST().getYbase().compareTo(new BigDecimal("5")) == 0))) {
									SAVTMP = SAVACB.multiply(SAVACR.setScale(ScaleValue.ACR, RoundingMode.DOWN));
									WRKACC = SAVTMP.divide(D360, ScaleValue.ACR,RoundingMode.HALF_EVEN);
									WRKACC = WRKACC.multiply(BigDecimal.valueOf(NUMC));
									SAVACC = SAVACC.add(WRKACC);
								} else {
									NDAYS  = BigDecimal.valueOf(NUMC);
									AMOUNT = SAVACB;
									RATACC = SAVACR;
									//basein();
									//basein(objHeader, objInput, objWork);

									DATE8A = FRDAT8;
									DATE8B = TODAT8;
									BASE = LoansYearBaseLoader.basein(inner.getLNDMAST().getYbase(), inner.getLNDMAST().getIbase());
									accrue(inner, BASE, DATE8A, DATE8B);


									SAVACC = SAVACC.add(ACRINT);
								}

							}
						}
						
						break;
					}
						
				}

				ACRUAL = SAVACC.setScale(ScaleValue.BAL, RoundingMode.DOWN);
			}

			if (inner.getLNDMAST().getWchcod().trim().equals("Y")) {
				inner.getLNDMAST().setWchcod("N");
				inner.getLNDMAST().setWchdt8(BigDecimal.ZERO);
			}

		}
		return ACRUAL;
	}

	// *********************************************************************
	//
	// *********************************************************************
	public void fcast(IO inner, LNDEXCP LNDEXCB) throws Exception {

		BigDecimal WACRIN = BigDecimal.ZERO;
		BigDecimal WRKSAC = BigDecimal.ZERO;
		BigDecimal TOTSAC = BigDecimal.ZERO;
		
		BigDecimal WRKNB8 = BigDecimal.ZERO;
		BigDecimal WRKCD8 = BigDecimal.ZERO;
		BigDecimal WRKPD8 = BigDecimal.ZERO;
		BigDecimal DATE8A = BigDecimal.ZERO;
		BigDecimal DATE8B = BigDecimal.ZERO;
		
		BigDecimal ROLDT8 = BigDecimal.ZERO;
		BigDecimal ROLTRM = BigDecimal.ZERO;
		BigDecimal ROLDAY = BigDecimal.ZERO;
		String ROLADV = "";
		String ROLCOD = "";
		String ROLMOD = "";
	
		BigDecimal ACCBAL = BigDecimal.ZERO;
		BigDecimal ACCRAT = BigDecimal.ZERO;
		BigDecimal SVSACC = BigDecimal.ZERO;
		
//		objSSPRATH.setBigDecimal("JRRATN", inner.getLNDMAST().getBigDecimal("PRATEN"));
//		objSSPRATH.setBigDecimal("JRBANK", inner.getLNDMAST().getBigDecimal("BKN"));
//		objSSPRATH.setBigDecimal("JRBRAN", inner.getLNDMAST().getBigDecimal("BRN"));
//		objSSPRATH.setString("JRRCUR", inner.getLNDMAST().getString("CURTYP").trim());
//		objSSPRATH.setBigDecimal("JRLFM8", objHeader.getBigDecimal("LL1PD8"));

		RATACC = inner.getLNDMAST().getRate();
		WFRATE = inner.getLNDMAST().getMfrate();
		WFMORT = inner.getLNDMAST().getMfmort();
		WFMIAM = inner.getLNDMAST().getMfmiam();
		WFMMAM = inner.getLNDMAST().getMfmmam();
//		SAVRAT = inner.getLNDMAST().getRate();
//		SAVRTN = inner.getLNDMAST().getPraten();
//		SAVVAR = inner.getLNDMAST().getPvari();
//		SAVVRC = inner.getLNDMAST().getPvcode().trim();
//		SAVRSQ = inner.getLNDMAST().getRpseq();
//		SAVNR8 = inner.getLNDMAST().getStnrp8();
		YBSACC = inner.getLNDMAST().getYbase();
		SVSACC = inner.getLNDSUBS().getLnsacc();

		
		ACRINT = BigDecimal.ZERO;

		//PNT01 - CURDEC 0=1, 1=1/10, 2=1/100
		if ((inner.OSBAL.compareTo(BigDecimal.ZERO) < 0)
				|| ((inner.OSBAL.compareTo(BigDecimal.ZERO) == 0)
						&& (inner.getLNDMAST().getComacc().compareTo(inner.PNT01) < 0)
						&& (inner.getLNDMAST().getAccint().compareTo(inner.PNT01) < 0) 
						&& (inner.getLNDMAST().getPenint().compareTo(inner.PNT01) < 0))) 
		{
			return;
		}

		if (((inner.XMTDT8.compareTo(LNDBNOT.getLbcdt8()) < 0)
				&& (inner.XMTDT8.compareTo(BigDecimal.ZERO) > 0)
				&& inner.getLNPPAR2().getPmrate().trim().equals("Z") 
				&& !inner.getLNDMAST().getRecall().trim().equals("Y"))
				|| ((inner.XMTDT8.compareTo(LNDBNOT.getLbcdt8()) < 0)
						&& (inner.XMTDT8.compareTo(BigDecimal.ZERO) > 0)
						&& inner.getLNPPAR2().getPrcmrt().trim().equals("Z") 
						&& inner.getLNDMAST().getRecall().trim().equals("Y"))
				|| ((inner.getLNDMAST().getStatus().compareTo(BigDecimal.ONE) == 0) 
						&& (inner.OSBAL.compareTo(BigDecimal.ZERO) == 0))) 
		{
			return;
		}

		if ((inner.getLNDMAST().getStatus().compareTo(new BigDecimal("5")) == 0)
				|| (inner.getLNDMAST().getStatus().compareTo(new BigDecimal("7")) == 0)
				|| inner.getLNDMAST().getAccmin().trim().equals("Y")
				|| ((inner.getLNDMAST().getNacdt8().compareTo(inner.LL1NB8) <= 0) 
						&& (inner.getLNDMAST().getNacdt8().compareTo(BigDecimal.ZERO) > 0))) 
		{
			return;
		}

		setamt(inner);

		WRKNB8 = inner.LL1NB8;
		WRKCD8 = LNDBNOT.getLbcdt8();

		if (inner.getLNPPAR2().getPbilin().trim().equals("U")) {
		
		
			ROLDT8 = LNDBNOT.getLbcdt8();
			if ((LNDEXCB.getXcpcod().compareTo(new BigDecimal("63")) == 0)) 
			{
				ROLTRM = inner.getLNDMAST().getIpfreq();
				ROLDAY = inner.getLNDMAST().getNipday();
				ROLADV = "Y";
				ROLCOD = inner.getLNDMAST().getIpcode().trim();				
				//				srlnravdm();
				ROLDT8 = CommonDateAdvanceByTerm.advanceMonth(ROLDT8, ROLTRM, ROLDAY, "Y");

			} else {
				ROLTRM = inner.getLNDMAST().getFreq();
				ROLDAY = inner.getLNDMAST().getNpday();
				ROLADV = "Y";
				ROLCOD = inner.getLNDMAST().getFrcode().trim();
				//				srlnravdm();
				ROLDT8 = CommonDateAdvanceByTerm.roll(ROLDT8, ROLTRM, ROLCOD, ROLDAY, ROLADV);
			}

			if (inner.getLNPPAR2().getPadjdd().trim().equals("Y")
					|| inner.getLNPPAR2().getPadjdd().trim().equals("F")
					|| inner.getLNPPAR2().getPadjdd().trim().equals("B")) {
				ROLMOD = inner.getLNPPAR2().getPadjdd().trim();
				//srlnravbd();
				ROLDT8 = CommonDateAdjustBusiness.adjustBusinessDate(ROLDT8, ROLMOD, 
						inner.getLNDMAST().getBkn(), inner.getLNDMAST().getBrn(), inner.getLNDMAST().getCurtyp(), 
						inner.getLNDMAST().getCurtyp(), inner.Xid);

			}

			WRKCD8 = ROLDT8;
		}
		if ((WRKNB8.compareTo(WRKCD8) != 0)) {
			while (((WRKNB8.compareTo(WRKCD8) < 0) 
					&& (inner.getLNDMAST().getNacdt8().compareTo(WRKNB8) > 0))
					|| ((WRKNB8.compareTo(WRKCD8) < 0) 
							&& (inner.getLNDMAST().getNacdt8().compareTo(BigDecimal.ZERO) == 0))) {

				//long StartTime1 = System.currentTimeMillis();
				part1:{
				WRKPD8 = WRKNB8;
				DATE8A = WRKPD8;
				ROLDT8 = WRKPD8;
				//				srlnravdm();
				ROLDT8 = CommonDateAdvanceByTerm.advanceDay(ROLDT8, BigDecimal.ONE);

				WRKNB8 = ROLDT8;
				DATE8B = ROLDT8;
				NDAYS  = BigDecimal.ONE;

//				WRKCD8 = LNDBNOT.getLbcdt8();
				if ((WRKNB8.compareTo(WRKCD8) > 0)) {
					break;
				}

				
				//check after First Release and Switch to Standard Rate
				/*
				if (((inner.getLNDMAST().getBigDecimal("STDNUM").compareTo(BigDecimal.ZERO) > 0)
						&& (inner.getLNDMAST().getBigDecimal("FRELD8").compareTo(BigDecimal.ZERO) > 0)
						&& inner.getLNDMAST().getString("USERP").trim().equals("Y") 
						&& !inner.getLNDMAST().getString("RATPC").trim().equals(""))) 
				{
					objWork.setBigDecimal("ROLDT8", inner.getLNDMAST().getBigDecimal("FRELD8"));
					objWork.setBigDecimal("ROLTRM", inner.getLNDMAST().getBigDecimal("STDNUM"));
					objWork.setBigDecimal("ROLDAY", BigDecimal.ZERO);
					objWork.setString("ROLCOD", "M");
					srlnravdm();

					if (((objWork.getBigDecimal("ROLDT8").compareTo(objWork.getBigDecimal("WRKPD8")) >= 0) 
							&& (objWork.getBigDecimal("ROLDT8").compareTo(objWork.getBigDecimal("WRKNB8")) < 0))) 
					{

						inner.getLNDMAST().setBigDecimal("RATE",inner.getLNDMAST().getBigDecimal("STDRAT"));
						objWork.setBigDecimal("RATACC",inner.getLNDMAST().getBigDecimal("STDRAT"));
						inner.getLNDMAST().setBigDecimal("PRATEN",inner.getLNDMAST().getBigDecimal("STDRTN"));
						inner.getLNDMAST().setBigDecimal("PVARI",inner.getLNDMAST().getBigDecimal("STDVAR"));
						inner.getLNDMAST().setString("PVCODE",inner.getLNDMAST().getString("STDVAC").trim());
					}

				}
				 */
				//End check after First Release and Switch to Standard Rate


				if (inner.getLNDMAST().getAltrat().trim().equals("Y")) {
					
					srlndrate(inner, WRKNB8, WRKPD8);

				}
				
			}

			if ((inner.getLNDMAST().getPraten().compareTo(BigDecimal.ZERO) > 0)) {
				lodrat(inner, WRKPD8);

			}

			part3:{

				setjdb(inner);
				srlnrcinr(inner, DATE8A, DATE8B);

			}

			//long EndTime3 = System.currentTimeMillis();
			//long Duration3 = (EndTime3 - StartTime3);               
			//System.out.println("Total part3 Duration............." + Long.toString(Duration3));
			/*
				switch (){
				case "S":
				case "T":
				case "X":
				case "L":
				case "H":
				case "P":
				case "Q":
				}
			 */

			//StartTime3 = System.currentTimeMillis();

			if (inner.getLNDMAST().getTiered().trim().equals("S")
					|| inner.getLNDMAST().getTiered().trim().equals("T")
					|| inner.getLNDMAST().getTiered().trim().equals("X")
					|| inner.getLNDMAST().getTiered().trim().equals("L")
					|| inner.getLNDMAST().getTiered().trim().equals("H")
					|| inner.getLNDMAST().getTiered().trim().equals("P")
					|| inner.getLNDMAST().getTiered().trim().equals("Q")) {
//				WTIERD8 = WRKPD8;
				srlnritier(inner, WRKPD8);

				if (inner.getLNDMAST().getTiered().trim().equals("T")) {
					tircgr(inner);

				}

			}

			// EndTime3 = System.currentTimeMillis();
			//Duration3 = (EndTime3 - StartTime3);               
			//System.out.println("Total TIERED Duration............." + Long.toString(Duration3));

			//StartTime3 = System.currentTimeMillis();

			if ((AMOUNT.compareTo(BigDecimal.ZERO) > 0)) {
				if (inner.getLNDMAST().getTiered().trim().equals("S")
						|| inner.getLNDMAST().getTiered().trim().equals("X")
						|| inner.getLNDMAST().getTiered().trim().equals("L")
						|| inner.getLNDMAST().getTiered().trim().equals("H")
						|| inner.getLNDMAST().getTiered().trim().equals("P")
						|| inner.getLNDMAST().getTiered().trim().equals("Q")) {
					
					setamt(inner);

					tiracr(inner, DATE8A, DATE8B);

				} else {
					if ((inner.getLNDMAST().getIbase().compareTo(new BigDecimal("5")) == 0)) {
						srlnracam(inner, DATE8A, DATE8B);

						acctmi(inner, WRKPD8);

					} else {
						if (((inner.getLNDMAST().getIbase().compareTo(new BigDecimal("8")) == 0) 
								&& (YBSACC.compareTo(new BigDecimal("5")) == 0))) {
//							srlnracy5(inner, ROLDT8, DATE8A, LTHD8, LTEFD8, LTRBAL);
							srlnracy5(inner, ROLDT8, DATE8A, inner.LL1PD8, inner.LL1PD8, "N");

							acctmi(inner, WRKPD8);

						} else {
							if ((inner.getLNDMAST().getIbase().compareTo(new BigDecimal("7")) == 0)) {
								RBDAT8 = WRKNB8;
								srlnrac78(inner, RBDAT8);

								acctmi(inner, WRKPD8);

							} else {
								//basein();
								//basein(objHeader, objInput, objWork);

								BASE = LoansYearBaseLoader.basein(inner.getLNDMAST().getYbase(), inner.getLNDMAST().getIbase());
								accrue(inner, BASE, DATE8A, DATE8B);


								acctmi(inner, WRKPD8);

							}

						}

					}

				}



				WACRIN = WACRIN.add(ACRINT);
				SAVRAT = RATACC;
				SAVAMT = AMOUNT;
				
				
//				W_YTDINC = W_YTDINC.add(ACRINT);
//				inner.getLNDMSTS().setYtdmxi(inner.getLNDMSTS().getYtdmxi().add(ACRINT));
//				inner.getLNDMSTS().setLtdmxi(inner.getLNDMSTS().getLtdmxi().add(ACRINT));

//				if ((inner.getLNPPAR2().getPmaxic().compareTo(BigDecimal.ZERO) > 0)) {
//					
////					SAVRA2 = RATACC;
//					RATACC = inner.getLNPPAR2().getPmaxic();
//
//					BASE = LoansYearBaseLoader.basein(inner.getLNDMAST().getYbase(), inner.getLNDMAST().getIbase());
//					accrue(inner, BASE, DATE8A, DATE8B);
//
////					RATACC = SAVRA2;
//					
////					W_YTDMXI = W_YTDMXI.add(ACRINT);
////					W_LTDMXI = W_LTDMXI.add(ACRINT);
//					
//				}

			}

			//EndTime3 = System.currentTimeMillis();
			//Duration3 = (EndTime3 - StartTime3);               
			//System.out.println("Total part4 Duration............." + Long.toString(Duration3));

			//long StartTime4 = System.currentTimeMillis();

			if (inner.getLNDMAST().getSubsid().trim().equals("S")
					|| inner.getLNDMAST().getSubsid().trim().equals("R")) {
//				SAVAMT = AMOUNT;

				if ((inner.getLNDSUBS().getLnsex8().compareTo(inner.LL1PD8) >= 0)
						|| (inner.getLNDSUBS().getLnsex8().compareTo(BigDecimal.ZERO) == 0)) {
					if (inner.getLNDMAST().getSubsid().trim().equals("R")) {
						AMOUNT = inner.getLNDSUBS().getLnsrel();
					}

					if (inner.getLNDMAST().getSubsid().trim().equals("R")) {
						ACCBAL = inner.getLNDSUBS().getLnsrel();
					} else {
						if (inner.getLNDMAST().getSubsid().trim().equals("S")) {
							if ((inner.getLNDMAST().getIbase().compareTo(new BigDecimal("8")) == 0)) {
								if ((inner.getLNDMAST().getPrebal().compareTo(BigDecimal.ZERO) > 0)) {
									ACCBAL = inner.getLNDMAST().getPrebal();
								} else {
									ACCBAL = inner.getLNDMAST().getCbal();
								}

							} else {
								if (inner.getLNDMAST().getLnsptf().trim().equals("Y")) {
									ACCBAL = inner.getLNDMAST().getCbal().subtract(inner.getLNDMAST().getIntreb());
									ACCBAL = ACCBAL.subtract(inner.getLNDMAST().getAccern()).setScale(ScaleValue.BAL,RoundingMode.DOWN);
								} else {
									ACCBAL = inner.getLNDMAST().getAcbal();
								}

							}

						}

					}

					ACCRAT = RATACC;

					srlnracsu(inner, DATE8A);

					inner.getLNDSUBS().setLnsacc(inner.getLNDSUBS().getLnsacc().add(DAINT));
					WRKSAC = inner.getLNDSUBS().getLnsacc().subtract(SVSACC);
					TOTSAC = TOTSAC.add(WRKSAC);
				}

//				AMOUNT = SAVAMT;
			}

			//long EndTime4 = System.currentTimeMillis();
			//long Duration4 = (EndTime4 - StartTime4);               
			//System.out.println("Total part5 Duration............." + Long.toString(Duration4));

			}

			ACRINT = WACRIN;
			if (inner.getLNDMAST().getSubsid().trim().equals("S")
					|| inner.getLNDMAST().getSubsid().trim().equals("R")) {
				inner.getLNDSUBS().setLnsacc(SVSACC.add(TOTSAC));
				LNDBNOT.setLbcsam(inner.getLNDSUBS().getLnsacc().setScale(ScaleValue.BAL, RoundingMode.DOWN));
			}

		}

		//		inner.getLNDMAST().setBigDecimal("RATE", objWork.getBigDecimal("SAVRAT"));
		//		inner.getLNDMAST().setBigDecimal("PRATEN", objWork.getBigDecimal("SAVRTN"));
		//		inner.getLNDMAST().setBigDecimal("PVARI", objWork.getBigDecimal("SAVVAR"));
		//		inner.getLNDMAST().setString("PVCODE", objWork.getString("SAVVRC").trim());
		//		inner.getLNDMAST().setBigDecimal("RPSEQ", objWork.getBigDecimal("SAVRSQ"));
		//		inner.getLNDMAST().setBigDecimal("STNRP8", objWork.getBigDecimal("SAVNR8"));

	}

	// *********************************************************************
	// CALBLI SUBR - CALCULATE BILL INTEREST
	// *********************************************************************
	public void calbli(IO inner, LNDEXCP LNDEXCB) throws Exception {

		BigDecimal TMPACC = BigDecimal.ZERO;
		BigDecimal ADJINT = BigDecimal.ZERO;
		BigDecimal ADJTMI = BigDecimal.ZERO;
		BigDecimal ADJTRI = BigDecimal.ZERO;
		BigDecimal YRINT  = BigDecimal.ZERO;
		
		//STV - Do when forecast flag = Y if ((inner.getLNPPAR2().getPblndy().compareTo(BigDecimal.ZERO) > 0)
		//		|| inner.getLNPPAR2().getPbilin().trim().equals("U")) {
		if ((inner.getLNPPAR2().getPblndy().compareTo(BigDecimal.ZERO) > 0)
				&& inner.getLNPPAR2().getPbilin().trim().equals("Y")) {
			//long StartTime = System.currentTimeMillis();
			fcast(inner, LNDEXCB);


			//long EndTime = System.currentTimeMillis();
			//long Duration = (EndTime - StartTime);               
			//System.out.println("Total fcast Duration............." + Long.toString(Duration));

		}

		//System.out.println(objWork.getHmap());

		WKBINT = inner.getLNDMAST().getAccint().add(ACRINT);
		WKBMOR = inner.getLNDMAST().getMorint().add(SACRIN);
		TMPACC = WKBINT;
		//roundi();
		TMPACC = CommonRoundCent.roundCent(inner.getSSPAPPL().getSsarot(), TMPACC, inner.getLNDMAST().getCurdec());
		LNDBNOT.setLbcint(TMPACC.setScale(ScaleValue.BAL, RoundingMode.DOWN));

		MoraInt(inner, LNDEXCB, WKBMOR);
//		if (((LNDEXCB.getSspdt8().compareTo(BigDecimal.ZERO) > 0))
//				|| ((LNDEXCB.getSsipd8().compareTo(BigDecimal.ZERO) > 0))) 
//			//|| (inner.getLNDMAST().getBigDecimal("STRDMI").compareTo(BigDecimal.ZERO) == 0) - CYN101
//			//(inner.getLNDMAST().getBigDecimal("STRDMI").compareTo(LNDEXCB.getBigDecimal("SSIPD8")) > 0)  && - CYN101
//			//(inner.getLNDMAST().getBigDecimal("STRDMI").compareTo(LNDEXCB.getBigDecimal("SSPDT8")) > 0)  && - CYN101
//		{
//			LNDBNOT.setLbcmin(BigDecimal.ZERO);
//		} else {
//			TMPACC = WKBMOR;
//			//roundi();
//			TMPACC = CommonRoundCent.roundCent(inner.getSSPAPPL().getSsarot(), TMPACC, inner.getLNDMAST().getCurdec());
//
//			LNDBNOT.setLbcmin(TMPACC.setScale(ScaleValue.BAL, RoundingMode.DOWN));
//		}

		if ((inner.getLNPPAR2().getPcapin().trim().equals("Y") 
				&& (inner.getLNDMAST().getIntpay().compareTo(BigDecimal.ZERO) > 0))
				|| (inner.getLNPPAR2().getPcapin().trim().equals("N")
						&& inner.getLNPPAR2().getPcapnp().trim().equals("Y")
						&& inner.isMaturityOver 
						&& (inner.getLNDMAST().getIntpay().compareTo(BigDecimal.ZERO) > 0))) {
			LNDBNOT.setLbcint(LNDBNOT.getLbcint().add(inner.getLNDMAST().getIntpay()));
		}

		LNDBNOT.setLbcint(LNDBNOT.getLbcint().subtract(inner.getLNDMAST().getBilint()));
		LNDBNOT.setLbcmin(LNDBNOT.getLbcmin().subtract(inner.getLNDMAST().getBilmin()));
		LNDBNOT.setLbcrin(LNDBNOT.getLbcrin().subtract(inner.getLNDMAST().getBilrin()));

		if ((LNDBNOT.getLbcint().compareTo(BigDecimal.ZERO) < 0)) {
			ADJINT = LNDBNOT.getLbcint();
			LNDBNOT.setLbcint(BigDecimal.ZERO);
		}

		if ((LNDBNOT.getLbcmin().compareTo(BigDecimal.ZERO) < 0)) {
			ADJTMI = LNDBNOT.getLbcmin();
			LNDBNOT.setLbcmin(BigDecimal.ZERO);
		}

		if ((LNDBNOT.getLbcrin().compareTo(BigDecimal.ZERO) < 0)) {
			ADJTRI = LNDBNOT.getLbcrin();
			LNDBNOT.setLbcrin(BigDecimal.ZERO);
		}

		if ((inner.getLNDMAST().getIbase().compareTo(new BigDecimal("5")) == 0)) {
			if (inner.getLNDMAST().getFrcode().trim().equals("D")) {
				YRINT = inner.getLNDMAST().getAcbal().multiply(inner.getLNDMAST().getRate().setScale(ScaleValue.ACR, RoundingMode.DOWN));
				YRINT = YRINT.multiply(inner.getLNDMAST().getFreq());
				LNDBNOT.setLbcint(YRINT.divide(new BigDecimal("365"), ScaleValue.BAL, RoundingMode.DOWN));
			} else {
				YRINT = inner.getLNDMAST().getAcbal().multiply(inner.getLNDMAST().getRate().setScale(ScaleValue.ACR, RoundingMode.DOWN));
				LNDBNOT.setLbcint(YRINT.divide(new BigDecimal("12"), ScaleValue.BAL, RoundingMode.DOWN));
			}

		}

		if ((LNDBNOT.getLbcint().compareTo(BigDecimal.ZERO) < 0)) {
			ADJINT = LNDBNOT.getLbcint();
			LNDBNOT.setLbcint(BigDecimal.ZERO);
		}

		if ((inner.getLNDMAST().getWrkbli().compareTo(BigDecimal.ZERO) < 0)) {
			WINTAD = inner.getLNDMAST().getWrkbli().multiply(new BigDecimal("-1"));
			WINTAD = WINTAD.add(ADJINT);
		} else {
			WINTAD = BigDecimal.ZERO;
		}

		if ((inner.getLNDMAST().getWrkbmi().compareTo(BigDecimal.ZERO) < 0)) {
			WINTADMI = inner.getLNDMAST().getWrkbmi().multiply(new BigDecimal("-1"));
			WINTADMI = WINTADMI.add(ADJTMI);
		} else {
			WINTADMI = BigDecimal.ZERO;
		}

		if ((inner.getLNDMAST().getWrkbri().compareTo(BigDecimal.ZERO) < 0)) {
			WINTADRI = inner.getLNDMAST().getWrkbri().multiply(new BigDecimal("-1"));
			WINTADRI = WINTADRI.add(ADJTRI);
		} else {
			WINTADRI = BigDecimal.ZERO;
		}
		IPMTAMWRK = fixint(inner);

		if ((LNDBNOT.getLbcrin().compareTo(BigDecimal.ZERO) <= 0)) {
			LNDBNOT.setLbcid("");
		}

	}

	// *********************************************************************
	//
	// *********************************************************************
	private BigDecimal fixint(IO inner) throws Exception {

		// rename IPMTAMWRK to WIPMTAM
		BigDecimal WIPMTAM = BigDecimal.ZERO;
		
		WIPMTAM = PMTWINT;

		if ((inner.getLNDMAST().getIpmtpc().compareTo(BigDecimal.ZERO) > 0)) {
			WIPMTAM = LNDBNOT.getLbcint().multiply(inner.getLNDMAST().getIpmtpc().setScale(ScaleValue.BAL, RoundingMode.DOWN));
		} else {
			WIPMTAM = inner.getLNDMAST().getIpmtam();
		}

		Boolean foundLNDPMTI = false;
		int index_listLNDPMTI = 0;

		Predicate<LNDPMTI> LIFED8GreaterEqualWLIFED8 = i -> i.getLifed8().compareTo(LNDBNOT.getLbcdt8()) >= 0;

		Comparator<LNDPMTI> sortByLIFED8 = (o1, o2) -> o1.getLifed8().compareTo(o2.getLifed8());

		LNDPMTI LNDPMTI = inner.getListLNDPMTI().stream()
				.filter(LIFED8GreaterEqualWLIFED8)
				.sorted(sortByLIFED8)
				.findFirst().orElse(null);

		if(LNDPMTI != null){
			foundLNDPMTI = true;
			if ((LNDBNOT.getLbcdt8().compareTo(LNDPMTI.getLifed8()) >= 0)) {
				if ((LNDPMTI.getLifnpc().compareTo(BigDecimal.ZERO) > 0)) {
					WIPMTAM = LNDBNOT.getLbcint().multiply(LNDPMTI.getLifnpc()).setScale(ScaleValue.BAL, RoundingMode.DOWN);
				} else {
					WIPMTAM = LNDPMTI.getLifnam();
				}

			}
		}else{
			foundLNDPMTI= false;
		}
		return WIPMTAM;
	}

	// *********************************************************************
	//* CALBIP : CALCULATE BILL PAYMNET FOR EACH OF PRN,I, MOR, RINT. 
	//* PMTAMT :-> (INCLUDE FIX PAYMENT PRN, I , MOR , RSI)           
	//* SUPPOSE PMTCOD 0 , "PMTAMT" = 10,000 AND HAVE FIX-RSI = 1,000 
	//*               THEN "PMTAMT" = 10,000 + 1,000 => 11,000.       
	//* IF PMTCOD 2 AND HAS FIXED PAYMENT THEN IT HAS PMTAMT AMOUNT.  
	//*                                                               
	//* PMTCOD 1,3 PMTAMT CONSIDER ONLY PRINCIPAL SO IF HAVE FIX-XXX   
	//* PMTAMT SHOULD NOT INCLUDE FIX-XXX.                             
	// *********************************************************************
	public void calbip(IO inner, LNDEXCP LNDEXCB) throws Exception {

		BigDecimal WRKAMT = BigDecimal.ZERO;
		BigDecimal PMTWRKT = BigDecimal.ZERO;
		
		WRKAMT = inner.getLNDMAST().getCbal().subtract(inner.getLNDMAST().getBilprn());

		if ( 	(LNDEXCB.getXcpcod().compareTo(new BigDecimal("63")) != 0
				&& inner.getLNDMAST().getStrdri().compareTo(LNDEXCB.getSspdt8()) > 0) 
				//&& inner.getLNDMAST().getStrpri().compareTo(BigDecimal.ZERO) > 0
				|| 
				(LNDEXCB.getXcpcod().compareTo(new BigDecimal("63")) == 0
				&& inner.getLNDMAST().getStrdri().compareTo(LNDEXCB.getSsipd8()) > 0)
				||
				(inner.getLNDMAST().getStrpri().compareTo(BigDecimal.ZERO) == 0			//strpri - Threshold for Restructured Int payment
				&& inner.getLNDMAST().getStrdri().compareTo(BigDecimal.ZERO) == 0   	//strdri - Start Date for Payment to Restructured Int
				&& !LNDBNOT.getMatcod().equals("M"))  // add IsMaturity date checking
				|| 
				((WRKAMT.compareTo(inner.getLNDMAST().getStrpri()) > 0 
				&& inner.getLNDMAST().getStrpri().compareTo(BigDecimal.ZERO) != 0))
				)
		{
			PMTWRSI = BigDecimal.ZERO; 
		} else {  // maturity run else
			if(inner.getLNDMAST().getMrflag().equals("Y") //Moratorium Flag
					&& (inner.getLNDMAST().getMrstr8().compareTo(inner.LL1PD8) <= 0 //Moratorium Start Date
					&& inner.getLNDMAST().getMrexp8().compareTo(inner.LL1PD8) >= 0 ))//Moratorium Expiry Date 
				LNDBNOT.setLbcid("M");
			
			if ((PMTWRSI.compareTo(BigDecimal.ZERO) == 0)
					|| ((inner.getLNDMAST().getMatdt8().compareTo(LNDBNOT.getLbcdt8()) <= 0) 
							&& (inner.getLNDMAST().getMatdt8().compareTo(BigDecimal.ZERO) != 0))
					|| ((inner.getLNDMAST().getRcldt8().compareTo(LNDBNOT.getLbcdt8()) <= 0) 
							&& (inner.getLNDMAST().getRcldt8().compareTo(BigDecimal.ZERO) != 0))) {
				PMTWRSI = inner.getLNDMAST().getResint();
			}
			
			if (((LNDBNOT.getLbcdt8().compareTo(inner.getLNDMAST().getMatdt8()) >= 0)
					&& (inner.getLNDMAST().getMatdt8().compareTo(BigDecimal.ZERO) != 0) 
					&& (LNDBNOT.getLbcdt8().compareTo(BigDecimal.ZERO) != 0))) {
				WRKAMT = inner.getLNDMAST().getResint();
			} else {
				WRKAMT = inner.getLNDMAST().getResint().subtract(inner.getLNDMAST().getDisrin());
				
			}

			WRKAMT = WRKAMT.subtract(inner.getLNDMAST().getBilrin());
			if ((PMTWRSI.compareTo(WRKAMT) > 0)) {
				PMTWRSI = WRKAMT;
			}

			if ((PMTWRSI.compareTo(BigDecimal.ZERO) < 0)) {
				PMTWRSI = BigDecimal.ZERO;
			}

		}
		//overwrite restructure interest value
    	//not maturity billing
		if(inner.getLNDMAST().getPmtcod().compareTo(BigDecimal.ZERO) == 0 && inner.getLNPPAR2().getPincri().equals("Y")) {
			if ((inner.getLNDMAST().getMatdt8().compareTo(LNDBNOT.getLbcdt8()) <= 0  //maturity date <= billing due date
				&& inner.getLNDMAST().getMatdt8().compareTo(BigDecimal.ZERO) != 0) 
				|| ((inner.getLNDMAST().getRcldt8().compareTo(LNDBNOT.getLbcdt8()) <= 0) //recall , system will bill everything
						&& (inner.getLNDMAST().getRcldt8().compareTo(BigDecimal.ZERO) != 0))) {
				LNDBNOT.setLbcrin(BigDecimal.ZERO);
			}else {
				PMTWRSI = LNDBNOT.getLbcrin();
			}
		}
		else if((inner.getLNDMAST().getPmtcod().compareTo(BigDecimal.ZERO) == 0 && inner.getLNPPAR2().getPincri().equals("N"))
				|| (inner.XMTDT8.compareTo(BigDecimal.ZERO) != 0 
						&& inner.XMTDT8.compareTo(LNDBNOT.getLbcdt8()) > 0)){//is maturity billing and Auto ExtendUpto = "E" )) {
			PMTWRSI = inner.getLNDMAST().getRipmta();
		}
		
		if (((LNDEXCB.getXcpcod().compareTo(new BigDecimal("63")) != 0
				&& !LNDBNOT.getMatcod().equals("M"))
				|| (LNDEXCB.getXcpcod().compareTo(new BigDecimal("63")) == 0))
				|| (inner.getLNDMAST().getStrdmi().compareTo(BigDecimal.ZERO) == 0 
						&& inner.getLNDMAST().getStrdmi().compareTo(LNDEXCB.getSsipd8()) > 0  
						&& inner.getLNDMAST().getStrdmi().compareTo(LNDEXCB.getSspdt8()) > 0) )
		{
			PMTWMIN = BigDecimal.ZERO;
		} else {
			if(inner.getLNDMAST().getMrflag().equals("Y") //Moratorium Flag
					&& (inner.getLNDMAST().getMrstr8().compareTo(inner.LL1PD8) <= 0 //Moratorium Start Date
					&& inner.getLNDMAST().getMrexp8().compareTo(inner.LL1PD8) >= 0 ))//Moratorium Expiry Date 
				LNDBNOT.setLbcid("M");
			
			if ((PMTWMIN.compareTo(BigDecimal.ZERO) == 0)
					|| ((inner.getLNDMAST().getMatdt8().compareTo(LNDBNOT.getLbcdt8()) <= 0) 
							&& (inner.getLNDMAST().getMatdt8().compareTo(BigDecimal.ZERO) != 0))
					|| ((inner.getLNDMAST().getRcldt8().compareTo(LNDBNOT.getLbcdt8()) <= 0) 
							&& (inner.getLNDMAST().getRcldt8().compareTo(BigDecimal.ZERO) != 0))) {
				PMTWMIN = WKBMOR.setScale(ScaleValue.BAL, RoundingMode.DOWN);
			}

			if (((LNDBNOT.getLbcdt8().compareTo(inner.getLNDMAST().getMatdt8()) >= 0)
					&& (inner.getLNDMAST().getMatdt8().compareTo(BigDecimal.ZERO) != 0) 
					&& (LNDBNOT.getLbcdt8().compareTo(BigDecimal.ZERO) != 0))) {
				WRKAMT = WKBMOR.setScale(ScaleValue.BAL, RoundingMode.DOWN);
			} else {
				//objWork.setBigDecimal("WRKAMT",objWork.getBigDecimal("WKBMOR").subtract(inner.getLNDMAST().getBigDecimal("DISMIN")).setScale(ScaleValue.BAL, RoundingMode.DOWN)); - CYN101
			}

			WRKAMT = WRKAMT.subtract(inner.getLNDMAST().getBilmin());
			if ((PMTWMIN.compareTo(WRKAMT) > 0)) {
				PMTWMIN = WRKAMT;
			}

			if ((PMTWMIN.compareTo(BigDecimal.ZERO) < 0)) {
				PMTWMIN = BigDecimal.ZERO;
			}

		}

		//overwrite moratorium interest value
    	//not maturity billing
		if(inner.getLNDMAST().getPmtcod().compareTo(BigDecimal.ZERO) == 0 && inner.getLNPPAR2().getPincmo().trim().equals("Y")) {
			if ((inner.getLNDMAST().getMatdt8().compareTo(LNDBNOT.getLbcdt8()) <= 0  //maturity date <= billing due date
				&& inner.getLNDMAST().getMatdt8().compareTo(BigDecimal.ZERO) != 0) 
				|| ((inner.getLNDMAST().getRcldt8().compareTo(LNDBNOT.getLbcdt8()) <= 0) //recall , system will bill everything
						&& (inner.getLNDMAST().getRcldt8().compareTo(BigDecimal.ZERO) != 0))) {
				LNDBNOT.setLbcmin(BigDecimal.ZERO);
			}else {
				PMTWMIN = LNDBNOT.getLbcmin();
			}
		}
		else if((inner.getLNDMAST().getPmtcod().compareTo(BigDecimal.ZERO) == 0 && inner.getLNPPAR2().getPincmo().equals("N"))
				|| (inner.XMTDT8.compareTo(BigDecimal.ZERO) != 0 
						&& inner.XMTDT8.compareTo(LNDBNOT.getLbcdt8()) > 0)){//is maturity billing and Auto ExtendUpto = "E" )) {
			PMTWMIN = inner.getLNDMAST().getMipmta();
		}
		
		if (inner.getLNDMAST().getPmtcod().compareTo(BigDecimal.ZERO) == 0 // restructure interest bill on top 
				|| (inner.getLNDMAST().getPmtcod().compareTo(new BigDecimal("8")) == 0) // restructure interest bill on top 
				|| (inner.getLNDMAST().getPmtcod().compareTo(BigDecimal.ONE) == 0)
				|| (inner.getLNDMAST().getPmtcod().compareTo(new BigDecimal("3")) == 0)
				|| (inner.getLNDMAST().getPmtcod().compareTo(new BigDecimal("6")) == 0)
				|| ((inner.getLNDMAST().getMatdt8().compareTo(LNDBNOT.getLbcdt8()) <= 0)
						&& (inner.getLNDMAST().getMatdt8().compareTo(BigDecimal.ZERO) != 0) 
						&& (inner.getLNDMAST().getPmtcod().compareTo(BigDecimal.ZERO) == 0))
				|| ((inner.getLNDMAST().getRcldt8().compareTo(LNDBNOT.getLbcdt8()) <= 0)
						&& (inner.getLNDMAST().getRcldt8().compareTo(BigDecimal.ZERO) != 0) 
						&& (inner.getLNDMAST().getPmtcod().compareTo(BigDecimal.ZERO) == 0))) {
			PMTWRK = PMTWRK.add(IPMTAMWRK);
			PMTWRK = PMTWRK.add(PMTWMIN);
			PMTWRK = PMTWRK.add(PMTWRSI);
		}

		if ((PMTWRK.compareTo(BigDecimal.ZERO) > 0)) {
			if ((PMTWPRN.compareTo(BigDecimal.ZERO) > 0)
					|| 
					(IPMTAMWRK.compareTo(BigDecimal.ZERO) > 0)
					|| (PMTWMIN.compareTo(BigDecimal.ZERO) > 0)
					|| (PMTWRSI.compareTo(BigDecimal.ZERO) > 0)) {
				PMTWRKT = PMTWRK;
				if ((LNDBNOT.getLbcrin().compareTo(BigDecimal.ZERO) == 0)) {
					LNDBNOT.setLbcrin(PMTWRSI);
				}

				if ((LNDBNOT.getLbcmin().compareTo(BigDecimal.ZERO) == 0)) {
					LNDBNOT.setLbcmin(PMTWMIN);
				}

				if (((PMTWPRN.compareTo(BigDecimal.ZERO) > 0) 
						&& (LNDBNOT.getLbcprn().compareTo(BigDecimal.ZERO) > 0))) {
					if ((LNDBNOT.getLbcprn().compareTo(PMTWPRN) > 0)) {
						LNDBNOT.setLbcprn(PMTWPRN);
					}

				}

				if (((PMTWRKT.compareTo(BigDecimal.ZERO) > 0) 
						&& (PMTWMIN.compareTo(BigDecimal.ZERO) > 0))) {
					if ((inner.getLNDMAST().getMipmta().compareTo(BigDecimal.ZERO) > 0)) {
						if ((LNDBNOT.getLbcmin().compareTo(PMTWMIN) > 0)) {
							LNDBNOT.setLbcmin(PMTWMIN);
						}

						if ((PMTWRKT.compareTo(LNDBNOT.getLbcmin()) > 0)) {
							PMTWRKT = PMTWRKT.subtract(LNDBNOT.getLbcmin());
						} else {
							LNDBNOT.setLbcmin(PMTWRKT);
							PMTWRKT = BigDecimal.ZERO;
							if ((inner.getLNDMAST().getPmtcod().compareTo(BigDecimal.ZERO) == 0)) {
								LNDBNOT.setLbcrin(BigDecimal.ZERO);
								LNDBNOT.setLbcint(BigDecimal.ZERO);
							}

						}

					}

				} else {
					LNDBNOT.setLbcmin(BigDecimal.ZERO);
				}

				if (((PMTWRKT.compareTo(BigDecimal.ZERO) > 0) 
						&& (PMTWRSI.compareTo(BigDecimal.ZERO) > 0))) {
					if ((inner.getLNDMAST().getRipmta().compareTo(BigDecimal.ZERO) > 0)) {
						if ((LNDBNOT.getLbcrin().compareTo(PMTWRSI) > 0)) {
							LNDBNOT.setLbcrin(PMTWRSI);
						}
//remove restructure interest from installment amount
						if ((PMTWRKT.compareTo(LNDBNOT.getLbcrin()) > 0)) {
							PMTWRKT = PMTWRKT.subtract(LNDBNOT.getLbcrin());
						} else {
							LNDBNOT.setLbcrin(PMTWRKT);
							PMTWRKT = BigDecimal.ZERO;
							if ((inner.getLNDMAST().getPmtcod().compareTo(BigDecimal.ZERO) == 0)) {
								LNDBNOT.setLbcint(BigDecimal.ZERO);
							}

						}

					}

				} else {
					LNDBNOT.setLbcrin(BigDecimal.ZERO);
				}

				if (((PMTWRKT.compareTo(BigDecimal.ZERO) > 0) 
						&& (LNDBNOT.getLbcint().compareTo(BigDecimal.ZERO) > 0))) {
					if (((inner.getLNDMAST().getMatdt8().compareTo(LNDBNOT.getLbcdt8()) <= 0) 
							&& (inner.getLNDMAST().getMatdt8().compareTo(BigDecimal.ZERO) != 0))
							|| ((inner.getLNDMAST().getRcldt8().compareTo(LNDBNOT.getLbcdt8()) <= 0) 
									&& (inner.getLNDMAST().getRcldt8().compareTo(BigDecimal.ZERO) != 0))) {
					} else {
						if (((LNDBNOT.getLbcint().compareTo(IPMTAMWRK) > 0) 
								&& (IPMTAMWRK.compareTo(BigDecimal.ZERO) > 0))) {
							LNDBNOT.setLbcint(IPMTAMWRK);
							if ((inner.getLNDMAST().getPmtcod().compareTo(BigDecimal.ZERO) != 0)) {
								if ((PMTWRKT.compareTo(LNDBNOT.getLbcint()) > 0)) {
									PMTWRKT = PMTWRKT.subtract(LNDBNOT.getLbcint());
								} else {
									PMTWRKT = BigDecimal.ZERO;
								}

							}

						}

						if ((inner.getLNDMAST().getPmtcod().compareTo(BigDecimal.ZERO) == 0)) {
							if ((PMTWRKT.compareTo(LNDBNOT.getLbcint()) > 0)) {
								PMTWRKT = PMTWRKT.subtract(LNDBNOT.getLbcint());
							} else {
								LNDBNOT.setLbcint(PMTWRKT);
								PMTWRKT = BigDecimal.ZERO;
								if ((inner.getLNDMAST().getRipmta().compareTo(BigDecimal.ZERO) == 0)) {
									LNDBNOT.setLbcrin(BigDecimal.ZERO);
								}

								if ((inner.getLNDMAST().getMipmta().compareTo(BigDecimal.ZERO) == 0)) {
									LNDBNOT.setLbcmin(BigDecimal.ZERO);
								}

							}

						}

					}

				}

				if (((PMTWRKT.compareTo(BigDecimal.ZERO) > 0)
						&& (PMTWMIN.compareTo(BigDecimal.ZERO) > 0) 
						&& (inner.getLNDMAST().getMipmta().compareTo(BigDecimal.ZERO) == 0))) {
					if ((inner.getLNDMAST().getMatdt8().compareTo(LNDBNOT.getLbcdt8()) <= 0  //maturity date <= billing due date
							&& inner.getLNDMAST().getMatdt8().compareTo(BigDecimal.ZERO) != 0) 
							|| ((inner.getLNDMAST().getRcldt8().compareTo(LNDBNOT.getLbcdt8()) <= 0) //recall , system will bill everything
									&& (inner.getLNDMAST().getRcldt8().compareTo(BigDecimal.ZERO) != 0))) {
						if ((LNDBNOT.getLbcmin().compareTo(PMTWMIN) > 0)) {
							LNDBNOT.setLbcmin(PMTWMIN);
						}
					}
//remove mora interest into payment amount 
					if ((PMTWRKT.compareTo(LNDBNOT.getLbcmin()) > 0)) {
						PMTWRKT = PMTWRKT.subtract(LNDBNOT.getLbcmin());
					} else {
						LNDBNOT.setLbcmin(PMTWRKT);
						PMTWRKT = BigDecimal.ZERO;
					}

				}

				if (((PMTWRKT.compareTo(BigDecimal.ZERO) > 0)
						&& (PMTWRSI.compareTo(BigDecimal.ZERO) > 0) 
						&& (inner.getLNDMAST().getRipmta().compareTo(BigDecimal.ZERO) == 0))) {
					if ((inner.getLNDMAST().getMatdt8().compareTo(LNDBNOT.getLbcdt8()) <= 0  //maturity date <= billing due date
							&& inner.getLNDMAST().getMatdt8().compareTo(BigDecimal.ZERO) != 0) 
							|| ((inner.getLNDMAST().getRcldt8().compareTo(LNDBNOT.getLbcdt8()) <= 0) //recall , system will bill everything
									&& (inner.getLNDMAST().getRcldt8().compareTo(BigDecimal.ZERO) != 0))) {
						if ((LNDBNOT.getLbcrin().compareTo(PMTWRSI) > 0)) {
							LNDBNOT.setLbcrin(PMTWRSI);
						}
					}

// remove restructure interest into payment amount 
					if ((PMTWRKT.compareTo(LNDBNOT.getLbcrin()) > 0)) {
						PMTWRKT = PMTWRKT.subtract(LNDBNOT.getLbcrin());
					} else {
						LNDBNOT.setLbcrin(PMTWRKT);
						PMTWRKT = BigDecimal.ZERO;
					}

				}

				if ((PMTWRKT.compareTo(BigDecimal.ZERO) > 0)) {
					if (LNDBNOT.getLbcdt8().compareTo(inner.getLNDMAST().getMatdt8()) >= 0
							&& inner.getLNDMAST().getMatdt8().compareTo(BigDecimal.ZERO) != 0
							&& LNDBNOT.getLbcdt8().compareTo(BigDecimal.ZERO) != 0) {
						WRKAMT = inner.getLNDMAST().getCbal();
					} else {
						WRKAMT = inner.getLNDMAST().getCbal();
						//objWork.setBigDecimal("WRKAMT",inner.getLNDMAST().getBigDecimal("CBAL").subtract(inner.getLNDMAST().getBigDecimal("DISPRN"))); - CYN101
					}

					if ((PMTWRKT.compareTo(WRKAMT) > 0)) {
						PMTWRKT = WRKAMT;
					}

					LNDBNOT.setLbcprn(PMTWRKT);
				}

				/*
				 * MONO-15451 - check if before maturity billing will not minus interest
				 * check if maturity billing but Auto Extend Upto = E, billing will minus interest
				 */
				if(inner.getLNDMAST().getPmtcod().compareTo(BigDecimal.ZERO) == 0) {
					if((inner.getLNDMAST().getMatdt8().compareTo(LNDBNOT.getLbcdt8()) <= 0) 
						&& (inner.getLNDMAST().getMatdt8().compareTo(BigDecimal.ZERO) != 0)){
						if(inner.XMTDT8.compareTo(BigDecimal.ZERO) != 0 
								&& inner.XMTDT8.compareTo(LNDBNOT.getLbcdt8()) > 0) {
							LNDBNOT.setLbcprn(LNDBNOT.getLbcprn().subtract(LNDBNOT.getLbcint()));
						}
					}
				}
			}
			
		}  
	}

	// *********************************************************************
	// TAKE OUT MORINT. 
	// *********************************************************************
	public void acctmi(IO inner, BigDecimal WRKNB8) throws Exception {

		BigDecimal SACRINW = BigDecimal.ZERO;
		BigDecimal WRKACC = BigDecimal.ZERO;
		BigDecimal XPPEARN = BigDecimal.ZERO;
		BigDecimal XPPMEAR = BigDecimal.ZERO;
		BigDecimal TMPACC = BigDecimal.ZERO;
		BigDecimal PCT = BigDecimal.ZERO;

		if (((WRKNB8.compareTo(inner.getLNDMAST().getMrexp8()) >= 0) 
				&& (inner.getLNDMAST().getMrexp8().compareTo(BigDecimal.ZERO) != 0))
				|| ((WRKNB8.compareTo(inner.getLNDMAST().getMrstr8()) < 0) 
						&& (inner.getLNDMAST().getMrstr8().compareTo(BigDecimal.ZERO) != 0))) {
			WFRATE = BigDecimal.ZERO;
			WFMORT = BigDecimal.ZERO;
			WFMIAM = BigDecimal.ZERO;
			WFMMAM = BigDecimal.ZERO;
		}

		if ((WFRATE.compareTo(BigDecimal.ZERO) > 0)
				|| (WFMORT.compareTo(BigDecimal.ZERO) > 0)) {
			if ((WFMORT.compareTo(BigDecimal.ZERO) > 0)) {
				if ((WFMORT.compareTo(RATACC) > 0)) {
					PCT = BigDecimal.ONE;
				} else {
					PCT = WFMORT.divide(RATACC, ScaleValue.FAC,RoundingMode.DOWN);
				}

			} else {
				if ((WFRATE.compareTo(RATACC) > 0)) {
					PCT = BigDecimal.ZERO;
				} else {
					PCT = RATACC.subtract(WFRATE);
				}

				PCT = PCT.divide(RATACC, ScaleValue.FAC,RoundingMode.DOWN);
			}

			SACRINW = ACRINT.multiply(PCT).setScale(ScaleValue.ACR, RoundingMode.DOWN);
			SACRIN  = SACRIN.add(SACRINW);
			ACRINT  = ACRINT.subtract(SACRINW);
		}

		XPPEARN = inner.getLNDMAST().getPpearn().add(ACRINT);
		XPPMEAR = inner.getLNDMAST().getPpmear().add(SACRIN);

		if ((WFMIAM.compareTo(BigDecimal.ZERO) > 0)) {
			WRKACC = XPPEARN.add(XPPMEAR);
			if ((WRKACC.compareTo(WFMIAM) <= 0)) {
			} else {
				WRKACC = WRKACC.subtract(WFMIAM);
				if ((WRKACC.compareTo(BigDecimal.ZERO) > 0)) {
					WRKACC = WRKACC.subtract(XPPMEAR);
					if ((WRKACC.compareTo(BigDecimal.ZERO) > 0)) {
					}

				}

			}

		}

		if ((WFMMAM.compareTo(BigDecimal.ZERO) > 0)) {
			WRKACC = XPPEARN.add(XPPMEAR);
			if ((WRKACC.compareTo(WFMMAM) <= 0)) {
			} else {
				WRKACC = WRKACC.subtract(WFMMAM);
				if ((WRKACC.compareTo(BigDecimal.ZERO) > 0)) {
					WRKACC = WRKACC.subtract(XPPEARN);
					if ((WRKACC.compareTo(BigDecimal.ZERO) > 0)) {
					}

				}

			}

		}

		if ((inner.getLNDMAST().getIbase().compareTo(new BigDecimal("9")) == 0)) {
			TMPACC = SACRIN;
			//roundi();
			TMPACC = CommonRoundCent.roundCent(inner.getSSPAPPL().getSsarot(), TMPACC, inner.getLNDMAST().getCurdec());

			SACRIN = SACRIN.subtract(TMPACC);
			ACRINT = ACRINT.add(SACRIN);
			SACRIN = TMPACC;
		}

	}

	// *********************************************************************
	//**  CALC EARNINGS TIL INT MATY OF EOM FOR YEARLY REST
	//    PMTMAT SUBR - CALCULATE BILL PRINCIPAL FOR MATURED ACCOUNT 
	// *********************************************************************
	public void pmtmat(IO inner) throws Exception {

		BigDecimal TSTREB = BigDecimal.ZERO;
		BigDecimal WRKAMT = BigDecimal.ZERO;
		BigDecimal YRDAYS = BigDecimal.ZERO;
		BigDecimal REBFC = BigDecimal.ZERO;
		
//		SAVREB = inner.getLNDMAST().getIntreb();
		
		BigDecimal ROLDT8 = BigDecimal.ZERO;
		BigDecimal ROLTRM = BigDecimal.ZERO;
		BigDecimal ROLDAY = BigDecimal.ZERO;
		String ROLCOD = "";
		
		BigDecimal FRDAT8 = BigDecimal.ZERO;
		BigDecimal TODAT8 = BigDecimal.ZERO;
		String DURCOD = "";
		int NUMC = 0;
		
		BigDecimal DATE8A = BigDecimal.ZERO;
		BigDecimal DATE8B = BigDecimal.ZERO;

		if (((inner.getLNDMAST().getIbase().compareTo(new BigDecimal("8")) == 0)
				&& inner.getLNDMAST().getIfreq().trim().equals("Y")
				&& (inner.getLNDMAST().getIntreb().compareTo(BigDecimal.ZERO) > 0)
				&& inner.getLNPPAR2().getPrmtbk().trim().equals("Y")
				&& inner.getLNPPAR2().getPinmat().trim().equals("Y")
				&& (inner.getLNDMAST().getInmdt8().compareTo(BigDecimal.ZERO) > 0) 
				&& (inner.getLNDMAST().getInmdt8().compareTo(inner.LL1PD8) > 0))) {
			ROLDT8 = inner.LL1PD8;
			ROLTRM = BigDecimal.ONE;
			ROLDAY = BigDecimal.ONE;
			ROLCOD = "M";
			//			srlnravdm();
			ROLDT8 = CommonDateAdvanceByTerm.advanceMonth(ROLDT8, ROLTRM, ROLDAY, "Y");

			if ((ROLDT8.compareTo(inner.getLNDMAST().getInmdt8()) > 0)) {
				RBDAT8 = inner.getLNDMAST().getInmdt8();
			} else {
				RBDAT8 = ROLDT8;
			}

			//daysin();

			YRDAYS = LoansYearBaseDaysLoader.daysin(inner.LL1PD8, inner.getLNDMAST().getYbase());

			REBFC = srlnrbacy(inner, YRDAYS);

//			inner.getLNDMAST().setIntreb(SAVREB);
			TSTREB = inner.getLNDMAST().getBkdisc().multiply(REBFC).setScale(ScaleValue.BAL, RoundingMode.DOWN);
			if ((TSTREB.compareTo(inner.getLNPPAR2().getPmnrbk()) < 0)) {
				TSTREB = BigDecimal.ZERO;
			}

		}

		ACRINT = BigDecimal.ZERO;
		if (((inner.getLNDMAST().getIbase().compareTo(new BigDecimal("8")) == 0)
				&& !inner.getLNDMAST().getIfreq().trim().equals("Y")
				&& inner.getLNPPAR2().getPinmat().trim().equals("Y")
				&& (inner.getLNDMAST().getInmdt8().compareTo(BigDecimal.ZERO) > 0)
				&& (inner.getLNDMAST().getInmdt8().compareTo(inner.LL1PD8) > 0) 
				&& (inner.getLNDMAST().getPrebal().compareTo(BigDecimal.ZERO) > 0))) {
			ROLDT8 = inner.LL1PD8;
			ROLTRM = BigDecimal.ONE;
			ROLDAY = BigDecimal.ONE;
			ROLCOD = "M";
			//			srlnravdm();
			ROLDT8 = CommonDateAdvanceByTerm.advanceMonth(ROLDT8, ROLTRM, ROLDAY, "Y");

			if ((ROLDT8.compareTo(inner.getLNDMAST().getInmdt8()) > 0)) {
				DATE8B = inner.getLNDMAST().getInmdt8();
				TODAT8 = inner.getLNDMAST().getInmdt8();
			} else {
				DATE8B = ROLDT8;
				TODAT8 = ROLDT8;
			}

			DATE8A = inner.LL1PD8;
			FRDAT8 = inner.LL1PD8;
			DURCOD = "D";
			//srlnravdu();
			NUMC = CommonDateComputeDuration.getDays(FRDAT8, TODAT8);

			NDAYS = BigDecimal.valueOf(NUMC);
			AMOUNT = inner.getLNDMAST().getPrebal();
			if ((AMOUNT.compareTo(BigDecimal.ZERO) > 0)) {
				RATACC = inner.getLNDMAST().getRate();
				WFRATE = inner.getLNDMAST().getMfrate();
				WFMORT = inner.getLNDMAST().getMfmort();
				WFMIAM = inner.getLNDMAST().getMfmiam();
				WFMMAM = inner.getLNDMAST().getMfmmam();

				//basein();
				//basein(objHeader, objInput, objWork);

				BASE = LoansYearBaseLoader.basein(inner.getLNDMAST().getYbase(), inner.getLNDMAST().getIbase());
				accrue(inner, BASE, DATE8A, DATE8B);


			}

		}

		if ((inner.getLNDMAST().getPmtcod().compareTo(new BigDecimal("5")) != 0)) {
			LNDBNOT.setLbtprn(inner.getLNDMAST().getCbal());
			LNDBNOT.setLbtprn(LNDBNOT.getLbtprn().add(ACRINT).setScale(ScaleValue.BAL, RoundingMode.DOWN));
			LNDBNOT.setLbtprn(LNDBNOT.getLbtprn().subtract(TSTREB));
			if (((inner.getLNDMAST().getRcldt8().compareTo(BigDecimal.ZERO) > 0)
					&& inner.ISLACT.trim().equals("Y") 
					&& (TSTREB.compareTo(BigDecimal.ZERO) == 0))) {
				LNDBNOT.setLbtprn(LNDBNOT.getLbtprn().subtract(inner.getLNDMAST().getIntreb()));
				LNDBNOT.setLbtprn(LNDBNOT.getLbtprn().add(WINTRB));
			}

			if (inner.getLNPPAR2().getPcapin().trim().equals("Y")
					|| inner.getLNPPAR2().getPcapmt().trim().equals("Y") 
					&& inner.isMaturityOver
					|| inner.getLNPPAR2().getPcapnp().trim().equals("Y")
					&& inner.isMaturityOver 
					&& inner.getLNDMAST().getNplsta().trim().equals("Y")) {
				LNDBNOT.setLbtprn(LNDBNOT.getLbtprn().subtract(inner.getLNDMAST().getIntpay()));
			}

		}

		LNDBNOT.setLbcprn(LNDBNOT.getLbtprn().subtract(inner.getLNDMAST().getBilprn()));
		if (LNDBNOT.getMatcod().trim().equals("M")) {
			if (inner.getLNPPAR2().getPcapin().trim().equals("Y")
					|| inner.getLNPPAR2().getPcapmt().trim().equals("Y")
					|| inner.getLNPPAR2().getPcapnp().trim().equals("Y")) {
				WRKAMT = inner.getLNDMAST().getCbal().subtract(inner.getLNDMAST().getBilprn());
				if ((inner.getLNDMAST().getStatus().compareTo(BigDecimal.ONE) == 0)) {
					WRKAMT = WRKAMT.subtract(LNDBNOT.getLbcprn());
				}

				LNDBNOT.setLbcint(LNDBNOT.getLbcint().add(WRKAMT));
			} else {
				LNDBNOT.setLbcprn(inner.getLNDMAST().getCbal().subtract(inner.getLNDMAST().getBilprn()));
//				if ((inner.getLNDMAST().getWrkblp().compareTo(BigDecimal.ZERO) < 0)) {
//						LNDBNOT.setLbcprn(LNDBNOT.getLbcprn().subtract(inner.getLNDMAST().getWrkblp()));
//				}

				if ((inner.getLNDMAST().getIbase().compareTo(new BigDecimal("9")) == 0)
						|| inner.BS8REB.trim().equals("Y")) {
					if ((inner.getLNDMAST().getRcldt8().compareTo(BigDecimal.ZERO) > 0)
							|| inner.isMaturityOver
							|| (LNDBNOT.getMatcod().trim().equals("M") 
									&& inner.getLNPPAR2().getPrfdbk().trim().equals("Y"))) {
						LNDBNOT.setLbcprn(LNDBNOT.getLbcprn().subtract(inner.getLNDMAST().getIntreb()));
						LNDBNOT.setLbcprn(LNDBNOT.getLbcprn().subtract(inner.getLNDMAST().getAccern()).setScale(ScaleValue.BAL, RoundingMode.DOWN));
					}

				}

			}

			Boolean foundLNDIRSC = false;
			int index_listLNDIRSC = 0;

			//			Predicate<LNDIRSC> LIREF8GreaterEqualWLIREF8 = i -> i.getLiref8().compareTo(LNDBNOT.getLbcdt8()) >= 0;

			Comparator<LNDIRSC> sortByLIREF8 = (o1, o2) -> o1.getLiref8().compareTo(o2.getLiref8());

			List<LNDIRSC> listLNDIRSC = inner.getListLNDIRSC().stream()
					//					.filter(LIREF8GreaterEqualWLIREF8)
					.sorted(sortByLIREF8)
					.collect(Collectors.toList());

			for (LNDIRSC OBLNDIRSC : listLNDIRSC) {
				Gson gson = CommonGsonParser.DEFAULT_GSON;
				String strObj = gson.toJson(OBLNDIRSC);
				LNDIRSC LNDIRSC = gson.fromJson(strObj, LNDIRSC.class);

				foundLNDIRSC = true;
				// need to update the array LNDIRSC.Lirbil as "Y".
				if (!LNDIRSC.getLirbil().equals("Y")) {
					LNDIRSC.setLirbil("Y");

				}
			}

		}

		if ((LNDBNOT.getLbcprn().compareTo(BigDecimal.ZERO) < 0)) {
			LNDBNOT.setLbcprn(BigDecimal.ZERO);
		}

//		TEST = inner.getLNDMSTS().getIntltd().add(LNDBNOT.getLbtint());
//		WMINCG = inner.getLNDMAST().getMincg();
//		if ((inner.getLNPPAR2().getPadjac().trim().equals("Y") 
//				&& inner.getLNDMAST().getCgrint().trim().equals("Y"))) {
//			if (inner.getLNDMAST().getMclnid().trim().equals("T")) {
//				WMINCG = inner.getLNDMAST().getTchamt().subtract(inner.getLNDMAST().getSwrels());
//			} else {
//				if (inner.getLNDMAST().getMclnid().trim().equals("")) {
//					WMINCG = inner.getLNDMAST().getOrgamt().subtract(inner.getLNDMAST().getSwrels());
//				}
//
//			}
//
//			TEST = TEST.add(inner.getLNDMAST().getCbal());
//			TEST = TEST.add(inner.getLNDMSTS().getLtdprn());
//			TEST = TEST.subtract(inner.getLNDMAST().getSwrels());
//		}

//		if ((TEST.compareTo(BigDecimal.ZERO) < 0)) {
//			TEST = BigDecimal.ZERO;
//		}

//		TEST = WMINCG.subtract(TEST);
		
		if (((inner.TESTMIN.compareTo(BigDecimal.ZERO) > 0)
				&& (inner.getLNDMAST().getIbase().compareTo(new BigDecimal("9")) != 0) 
				&& !inner.BS8REB.trim().equals("Y"))) {
			LNDBNOT.setLbtint(LNDBNOT.getLbtint().add(inner.TESTMIN));
			LNDBNOT.setLbcint(LNDBNOT.getLbtint().subtract(inner.getLNDMAST().getBilint()));
		}

		if ((inner.getLNPPAR2().getPadjac().trim().equals("Y") 
				&& inner.getLNDMAST().getCgrint().trim().equals("Y"))) {
			LNDBNOT.setLbcprn(LNDBNOT.getLbcprn().add(LNDBNOT.getLbcint()));
			LNDBNOT.setLbcint(BigDecimal.ZERO);
		}

		if ((!inner.getLNDMAST().getRolm().trim().equals("") 
				&& LNDBNOT.getMatcod().trim().equals("M"))) {
			srlndroll(inner, inner.getLNDMAST().getMatdt8());
		}

	}

	// *********************************************************************
	//
	// *********************************************************************
	public void inodpr(IO inner) throws Exception {

		BigDecimal NTLIMT = BigDecimal.ZERO;
		BigDecimal SPMTWR = BigDecimal.ZERO;
		
		SPMTWR = PMTWRK;
		NTLIMT = inner.getLNDMAST().getDrlimt().subtract(inner.getLNDMAST().getIdlimt());
		PMTWRK = inner.getLNDMAST().getCbal().subtract(NTLIMT);
		PMTWRK = PMTWRK.subtract(inner.getLNDMAST().getBilprn());
		PMTWRK = PMTWRK.subtract(inner.getLNDMAST().getAccern()).setScale(ScaleValue.BAL, RoundingMode.DOWN);
		PMTWRK = PMTWRK.subtract(inner.getLNDMAST().getIntreb());
		if ((PMTWRK.compareTo(BigDecimal.ZERO) < 0)) {
			PMTWRK = BigDecimal.ZERO;
		}

		if ((inner.getLNDMAST().getPmtcod().compareTo(BigDecimal.ZERO) == 0)) {
			PMTWRK = PMTWRK.add(LNDBNOT.getLbcint());
			if ((PMTWRK.compareTo(SPMTWR) > 0)) {
				PMTWRK = SPMTWR;
			}
		}
	}
	
	public void BillRestructureLC(IO inner) throws Exception {

		LNDBNOT.setLbcrlc(BigDecimal.ZERO);
		BigDecimal RestructuredLateCharge = inner.getLNDMAST().getReslc().setScale(ScaleValue.BAL, RoundingMode.DOWN);
		BigDecimal ToBillreslc = RestructuredLateCharge.subtract(inner.getLNDMAST().getBilrlc());
				
		if (((inner.getLNDMAST().getMatdt8().compareTo(LNDBNOT.getLbcdt8()) <= 0) //maturity date <= billing due date
				&& (inner.getLNDMAST().getMatdt8().compareTo(BigDecimal.ZERO) != 0))
				|| ((inner.getLNDMAST().getRcldt8().compareTo(LNDBNOT.getLbcdt8()) <= 0) 
						&& (inner.getLNDMAST().getRcldt8().compareTo(BigDecimal.ZERO) != 0))) { 
			if (inner.getLNDMAST().getReslc().compareTo(BigDecimal.ZERO) > 0 ) {
				if(inner.XMTDT8.compareTo(BigDecimal.ZERO) != 0 
						&& inner.XMTDT8.compareTo(LNDBNOT.getLbcdt8()) > 0){//is maturity billing and Auto ExtendUpto = "E" 
					LNDBNOT.setLbcrlc(BigDecimal.ZERO);
				}
				else {
					LNDBNOT.setLbcrlc(ToBillreslc);//MONO-8349
				}
			}
		}
	}
	
	public void BillRestructureInt(IO inner) throws Exception {
		
		LNDBNOT.setLbcrin(BigDecimal.ZERO);
		
		BigDecimal resint = inner.getLNDMAST().getResint().setScale(ScaleValue.BAL, RoundingMode.DOWN);
		BigDecimal ToBillresint = resint.subtract(inner.getLNDMAST().getBilrin());
		if ((inner.getLNDMAST().getMatdt8().compareTo(LNDBNOT.getLbcdt8()) <= 0  //maturity date <= billing due date
					&& inner.getLNDMAST().getMatdt8().compareTo(BigDecimal.ZERO) != 0)
				||  ((inner.getLNDMAST().getRcldt8().compareTo(LNDBNOT.getLbcdt8()) <= 0) //recall , system will bill everything
						&& (inner.getLNDMAST().getRcldt8().compareTo(BigDecimal.ZERO) != 0))) {
			LNDBNOT.setLbcrin(ToBillresint);
		} else if((inner.getLNDMAST().getRipmta().compareTo(BigDecimal.ZERO) > 0 
				&& inner.getLNDMAST().getStrdri().compareTo(BigDecimal.ZERO) > 0   	//strdri - Start Date for Payment to Restructured Int
				&& inner.getLNDMAST().getStrdri().compareTo(LNDBNOT.getLbcdt8()) <= 0)
			|| (inner.getLNDMAST().getStrdri().compareTo(BigDecimal.ZERO) > 0   	//strdri - Start Date for Payment to Restructured Int
					&& inner.getLNDMAST().getStrdri().compareTo(LNDBNOT.getLbcdt8()) <= 0)	) {
			
			//Ripmta - fixed Restructured Interest Pymt Amount',
			//check min amount between late charge and remaining installment amount
			if(inner.getLNDMAST().getRipmta().compareTo(BigDecimal.ZERO) > 0)
				LNDBNOT.setLbcrin(inner.getLNDMAST().getRipmta().min(ToBillresint));
			else 
				LNDBNOT.setLbcrin(ToBillresint);
		}
	}

	public void MoraInt(IO inner,LNDEXCP LNDEXCB, BigDecimal MoraInt) throws Exception {
		
		//MONO-20960 - billed on maturity billing
		if ((inner.getLNDMAST().getMatdt8().compareTo(LNDBNOT.getLbcdt8()) <= 0  //maturity date <= billing due date
				&& inner.getLNDMAST().getMatdt8().compareTo(BigDecimal.ZERO) != 0)
			||  ((inner.getLNDMAST().getRcldt8().compareTo(LNDBNOT.getLbcdt8()) <= 0) //recall , system will bill everything
					&& (inner.getLNDMAST().getRcldt8().compareTo(BigDecimal.ZERO) != 0))) {
			LNDBNOT.setLbcmin(MoraInt);
		}//*IF HAVE NOT TIME TO BILL THEN DO NOT BILLED.
		else if ((inner.getLNDMAST().getStrdmi().compareTo(LNDEXCB.getSspdt8()) > 0
				&& LNDEXCB.getSspdt8().compareTo(BigDecimal.ZERO) > 0)
			|| (LNDEXCB.getSsipd8().compareTo(BigDecimal.ZERO) > 0
					&& inner.getLNDMAST().getStrdmi().compareTo(LNDEXCB.getSsipd8()) > 0)
			|| (inner.getLNDMAST().getStrdmi().compareTo(BigDecimal.ZERO) == 0))
		{
			LNDBNOT.setLbcmin(BigDecimal.ZERO);
		} else {
//					TMPACC = MoraInt;
			//roundi();
			MoraInt = CommonRoundCent.roundCent(inner.getSSPAPPL().getSsarot(), MoraInt, inner.getLNDMAST().getCurdec());
			LNDBNOT.setLbcmin(MoraInt.setScale(ScaleValue.BAL, RoundingMode.DOWN));
		}
		
	}
	// *********************************************************************
	//
	// *********************************************************************
	public void latchg(IO inner, String CALCLC) throws Exception {

		BigDecimal WRKNB8 = BigDecimal.ZERO;
		BigDecimal WRKCD8 = BigDecimal.ZERO;
		BigDecimal WRKPD8 = BigDecimal.ZERO;
		BigDecimal DATE8A = BigDecimal.ZERO;
		BigDecimal DATE8B = BigDecimal.ZERO;
		
		BigDecimal ROLDT8 = BigDecimal.ZERO;
		BigDecimal ROLTRM = BigDecimal.ZERO;
		BigDecimal ROLDAY = BigDecimal.ZERO;
		String ROLCOD = "";
		
		BigDecimal WRKMM = BigDecimal.ZERO;
		
		if ((inner.OSBAL.compareTo(BigDecimal.ZERO) < 0)
				|| ((inner.OSBAL.compareTo(BigDecimal.ZERO) == 0)
						&& (inner.getLNDMAST().getComacc().compareTo(inner.PNT01) < 0)
						&& (inner.getLNDMAST().getAccint().compareTo(inner.PNT01) < 0)
						&& (inner.getLNDMAST().getMorint().compareTo(inner.PNT01) < 0)
						&& (inner.getLNDMAST().getResint().compareTo(inner.PNT01) < 0) 
						&& (inner.getLNDMAST().getPenint().compareTo(inner.PNT01) < 0))) {
			return;
		}

		if (inner.getLNDMAST().getAccmlc().trim().equals("Y")
				|| (inner.getLNDMAST().getStatus().compareTo(new BigDecimal("5")) == 0)
				|| (inner.getLNDMAST().getStatus().compareTo(new BigDecimal("7")) == 0)) {
			return;
		}

		if (((inner.getLNDMAST().getLctype().compareTo(BigDecimal.ZERO) > 0) 
				&& !CALCLC.trim().equals("I"))
				|| ((inner.getLNDMAST().getLcrate().compareTo(BigDecimal.ZERO) != 0) 
						&& !CALCLC.trim().equals("I"))
				|| ((inner.getLNDMAST().getLcityp().compareTo(BigDecimal.ZERO) > 0) 
						&& CALCLC.trim().equals("I"))
				|| ((inner.getLNDMAST().getLcirat().compareTo(BigDecimal.ZERO) != 0) 
						&& CALCLC.trim().equals("I"))) {

			WRKNB8 = inner.LL1NB8;
			WRKCD8 = LNDBNOT.getLbcdt8();

			while ((WRKNB8.compareTo(WRKCD8) < 0)) {
				WRKPD8 = WRKNB8;
				DATE8A = WRKPD8;
				ROLDT8 = WRKPD8;
				ROLTRM = BigDecimal.ONE;
				ROLCOD = "D";
				//				srlnravdm();
				ROLDT8 = CommonDateAdvanceByTerm.advanceDay(ROLDT8, ROLTRM);

				WRKNB8 = ROLDT8;
				DATE8B = ROLDT8;
				//				objOption.setString("PFORMAT", "LNRACLC");
				srlnraclc(inner, CALCLC);

//				WASSLC   = WASSLC.add(LCHG);
//				W_YTDINC = W_YTDINC.add(LCHG);
//				WPENIN   = WPENIN.add(WACRIC);
//				W_YTDINC = W_YTDINC.add(WACRIC);
//				WPENIN   = WPENIN.add(WACRIN);
//				W_YTDINC = W_YTDINC.add(WACRIN);

				if (inner.getLNPPAR2().getPcaplc().trim().equals("P")) {
					if ((WRKNB8.compareTo(WRKCD8) <= 0)) {
						caplc(inner, WRKPD8);

					}

				} else {
					objCommonDateProcessor.setDate(WRKPD8);
					WRKMM = objCommonDateProcessor.getMonth();
					objCommonDateProcessor.setDate(WRKNB8);
					if ((WRKMM.compareTo(objCommonDateProcessor.getMonth()) != 0)) {
						if ((inner.getLNPPAR2().getPcapnp().trim().equals("Y")
								&& inner.isMaturityOver 
								&& inner.getLNDMAST().getNplsta().trim().equals("Y"))
								|| inner.getLNPPAR2().getPcaplc().trim().equals("M")
								|| (inner.getLNPPAR2().getPcaplc().trim().equals("Q") 
										&& (objCommonDateProcessor.getMonth().compareTo(new BigDecimal("3")) == 0))
								|| (inner.getLNPPAR2().getPcaplc().trim().equals("Q") 
										&& (objCommonDateProcessor.getMonth().compareTo(new BigDecimal("6")) == 0))
								|| (inner.getLNPPAR2().getPcaplc().trim().equals("Q") 
										&& (objCommonDateProcessor.getMonth().compareTo(new BigDecimal("9")) == 0))
								|| (inner.getLNPPAR2().getPcaplc().trim().equals("Q") 
										&& (objCommonDateProcessor.getMonth().compareTo(new BigDecimal("12")) == 0))
								|| (inner.getLNPPAR2().getPcaplc().trim().equals("H") 
										&& (objCommonDateProcessor.getMonth().compareTo(new BigDecimal("6")) == 0))
								|| (inner.getLNPPAR2().getPcaplc().trim().equals("H") 
										&& (objCommonDateProcessor.getMonth().compareTo(new BigDecimal("12")) == 0))
								|| (inner.getLNPPAR2().getPcaplc().trim().equals("Y") 
										&& (objCommonDateProcessor.getMonth().compareTo(new BigDecimal("12")) == 0))) {
							caplc(inner, WRKPD8);

						}

					}

				}

			}

		}

	}

	// *********************************************************************
	//
	// *********************************************************************
	public void caplc(IO inner, BigDecimal WRKPD8) throws Exception {

		BigDecimal LX6MIN = BigDecimal.ZERO;
		BigDecimal LX6MAX = BigDecimal.ZERO;
		BigDecimal LCMXOV = BigDecimal.ZERO;
		BigDecimal LCTST = BigDecimal.ZERO;
		
		BigDecimal TMPACC = BigDecimal.ZERO;
		
//		if ((inner.getLNDMAST().getLctype().compareTo(SLCTYP) != 0)) {
//			SLCTYP = inner.getLNDMAST().getLctype();
//			objParameterLNPPAR6.setBigDecimal("LP6PCT", BigDecimal.ZERO);
//			objParameterLNPPAR6.setBigDecimal("LP6PPC", BigDecimal.ZERO);
//
//			isParameterFound = objParameterLNPPAR6.checkKey("LNPPAR6",
//					String.valueOf(inner.getLNDMAST().getLctype()));
//
//		}

		if (inner.isMaturityOver
				|| inner.getLNDMAST().getRecall().trim().equals("Y")) {
			LX6MIN = inner.getLNPPAR6().getLp6mmi();
			LX6MAX = inner.getLNPPAR6().getLp6mma();
		} else {
			if ((inner.getLNDMAST().getFpdt8().compareTo(BigDecimal.ZERO) == 0)
					|| (inner.getLNDMAST().getFpdt8().compareTo(WRKPD8) > 0)) {
				LX6MIN = inner.getLNPPAR6().getLp6pmi();
				LX6MAX = inner.getLNPPAR6().getLp6pma();
			} else {
				LX6MIN = inner.getLNPPAR6().getLp6min();
				LX6MAX = inner.getLNPPAR6().getLp6max();
			}

		}

		if (((WPENIN.compareTo(inner.PNT01) < 0) 
				&& (LX6MIN.compareTo(BigDecimal.ZERO) == 0))
				|| (WPENIN.compareTo(BigDecimal.ZERO) == 0)) {
			return;
		}

//		ORGPEN = WPENIN;
		if (((WPENIN.compareTo(LX6MIN) < 0) 
				&& (LX6MIN.compareTo(BigDecimal.ZERO) != 0))) {
			WPENIN = LX6MIN;
		}

		if (((WPENIN.compareTo(LX6MAX) > 0) 
				&& (LX6MAX.compareTo(BigDecimal.ZERO) != 0))) {
			WPENIN = LX6MAX;
		}

		if (((inner.getLNPPAR2().getPmaxlc().compareTo(BigDecimal.ZERO) > 0) 
				&& (WPENIN.compareTo(BigDecimal.ZERO) > 0))) {
			LCTST  = WASSLC.add(WPENIN).setScale(ScaleValue.BAL, RoundingMode.DOWN);
			LCMXOV = LCTST.subtract(inner.getLNPPAR2().getPmaxlc());
			if ((LCMXOV.compareTo(BigDecimal.ZERO) > 0)) {
				WPENIN = WPENIN.subtract(LCMXOV);
			}

		}

		TMPACC = WPENIN;
		//roundi();
		TMPACC = CommonRoundCent.roundCent(inner.getSSPAPPL().getSsarot(), TMPACC, inner.getLNDMAST().getCurdec());

		WASSLC = TMPACC.setScale(ScaleValue.BAL, RoundingMode.DOWN);
		WPENIN = BigDecimal.ZERO;
//		LNDEXCB.setBigDecimal("LCDUE", WASSLC.subtract(inner.getLNDMAST().getPaidlc()));
	}

	// *********************************************************************
	//
	// *********************************************************************
	public void tircgr(IO inner) throws Exception {

		BigDecimal TAMT = BigDecimal.ZERO;
		TAMT = inner.getLNDMAST().getCbal();
		int intWork2 = 0;

//		LNDEXCB.setBigDecimal("BRATE", inner.getLNDMAST().getRate());

		Boolean foundLNDTIRH = false;
		int index_listLNDTIRH = 0;

		//		Predicate<LNDTIRH> LTHD8GreaterEqualWLTHD8 = i -> i.getLthd8().compareTo(LNDBNOT.getLbcdt8()) >= 0;

		Comparator<LNDTIRH> sortByLTHSEQ = (o1, o2) -> o1.getLthseq().compareTo(o2.getLthseq());

		List<LNDTIRH> listLNDTIRHI = inner.getListLNDTIRHI().stream()
				//				.filter(LTHD8GreaterEqualWLTHD8)
				.sorted(sortByLTHSEQ)
				.collect(Collectors.toList());

		for (LNDTIRH OBLNDTIRHI : listLNDTIRHI) {
			Gson gson = CommonGsonParser.DEFAULT_GSON;
			String strObj = gson.toJson(OBLNDTIRHI);
			LNDTIRH LNDTIRHI = gson.fromJson(strObj, LNDTIRH.class);

			foundLNDTIRH = true;

			inner.getLNDMAST().setRate(LNDTIRHI.getLthrt());

			// need to update the array LNDIRSC.Lirbil as "Y".
			if (TAMT.compareTo(BigDecimal.ZERO) > 0) {
				TAMT = TAMT.subtract(LNDTIRHI.getLthbl());
			}

			if (LNDTIRHI.getLthbl().compareTo(BigDecimal.ZERO) == 0) {
				TAMT = BigDecimal.ZERO;
			}

			if (TAMT.compareTo(BigDecimal.ZERO) <= 0) {
				break;
			}
		}


	}

	// *********************************************************************
	//
	// *********************************************************************
	public void comacr(IO inner) throws Exception {

		BigDecimal WRKNB8 = BigDecimal.ZERO;
		BigDecimal WRKCD8 = BigDecimal.ZERO;
		BigDecimal WRKPD8 = BigDecimal.ZERO;
		BigDecimal DATE8A = BigDecimal.ZERO;
		BigDecimal DATE8B = BigDecimal.ZERO;
		
		BigDecimal TOTREL = BigDecimal.ZERO;
		BigDecimal TOTBAL = BigDecimal.ZERO;
		BigDecimal TOTREB = BigDecimal.ZERO;
		BigDecimal TOTERN = BigDecimal.ZERO;
		
		BigDecimal ROLDT8 = BigDecimal.ZERO;
		BigDecimal ROLTRM = BigDecimal.ZERO;
		BigDecimal ROLDAY = BigDecimal.ZERO;
		String ROLCOD = "";
		
		BigDecimal WCOMAC = BigDecimal.ZERO;
		
		
		if ((inner.OSBAL.compareTo(BigDecimal.ZERO) < 0)
				|| ((inner.OSBAL.compareTo(BigDecimal.ZERO) == 0)
						&& (inner.getLNDMAST().getComacc().compareTo(inner.PNT01) < 0)
						&& (inner.getLNDMAST().getAccint().compareTo(inner.PNT01) < 0) 
						&& (inner.getLNDMAST().getPenint().compareTo(inner.PNT01) < 0))) {
			return;
		}

		WRKNB8 = inner.LL1NB8;
		WRKCD8 = LNDBNOT.getLbcdt8();

		if ((inner.getLNDMAST().getMulpc().compareTo(BigDecimal.ZERO) > 0)) {
			if (!inner.getLNDMAST().getMclnid().trim().equals("M")) {
//				inner.getLNDMAST().setMinul(inner.getLNDMAST().getMulpc().multiply(inner.getLNDMAST().getOrgamt())
//						.setScale(ScaleValue.BAL, RoundingMode.DOWN));
//			} else {
				inner.getLNDMAST().setMinul(inner.getLNDMAST().getMulpc().multiply(inner.getLNDMAST().getOrgamt())
						.setScale(ScaleValue.BAL, RoundingMode.DOWN));
			}

		}

		if (inner.getLNDMAST().getMclnid().trim().equals("M")) {
			//			objOption.setString("PFORMAT", "LNRCALT");
			srlnrcalt();
			

		} else {
			TOTREL = inner.getLNDMAST().getAmtrel();
			TOTBAL = inner.getLNDMAST().getCbal();
			TOTREB = inner.getLNDMAST().getIntreb();
			TOTERN = inner.getLNDMAST().getAccern();
		}

		while ((WRKNB8.compareTo(WRKCD8) < 0)) {
			WRKPD8 = WRKNB8;
			DATE8A = WRKPD8;
			ROLDT8 = WRKPD8;
			ROLTRM = BigDecimal.ONE;
			ROLCOD = "D";
			//			srlnravdm();
			ROLDT8 = CommonDateAdvanceByTerm.advanceDay(ROLDT8, ROLTRM);

			WRKNB8 = ROLDT8;
			DATE8B = ROLDT8;
			//			objOption.setString("PFORMAT", "LNRACCF");
			WCOMAC = srlnraccf(inner);

			WRKCOM = WRKCOM.add(WCOMAC);
			if ((inner.getLNDMAST().getFcanc().trim().equals("Y") 
					&& (inner.getLNDMAST().getFca1().compareTo(BigDecimal.ZERO) > 0))) {
				ROLDT8 = WRKPD8;
				ROLTRM = BigDecimal.ONE.multiply(new BigDecimal("-1"));
				ROLDAY = BigDecimal.ZERO;
				ROLCOD = "D";
				//			srlnravdm();
				ROLDT8 = CommonDateAdvanceByTerm.advanceDay(ROLDT8, ROLTRM);
				drwcfe(inner, ROLDT8);
			}
		}

	}

	// *********************************************************************
	//
	// *********************************************************************
	public void drwcfe(IO inner, BigDecimal ROLDT8) throws Exception {

		BigDecimal TMPACC = BigDecimal.ZERO;
		BigDecimal WKAMT = BigDecimal.ZERO;
//		BigDecimal ROLDT8 = BigDecimal.ZERO;
//		BigDecimal ROLTRM = BigDecimal.ZERO;
//		BigDecimal ROLDAY = BigDecimal.ZERO;
//		String ROLCOD = "";
//		
//		if ((inner.getLNDMAST().getFcanc().trim().equals("Y") 
//				&& (inner.getLNDMAST().getFca1().compareTo(BigDecimal.ZERO) > 0))) {
//			ROLDT8 = WRKPD8;
//			ROLTRM = BigDecimal.ONE.multiply(new BigDecimal("-1"));
//			ROLDAY = BigDecimal.ZERO;
//			ROLCOD = "D";
//			//			srlnravdm();
//			ROLDT8 = CommonDateAdvanceByTerm.advanceDay(ROLDT8, ROLTRM, ROLDAY, "Y");
			//System.out.println("drwcfe");

			Boolean foundLNDCOMT = false;
			int index_listLNDCOMT = 0;
					
			Predicate<LNDCOMT> LCEXD8GreaterEqualWLCEXD8 = i -> i.getLcexd8().compareTo(ROLDT8) >= 0;
			Comparator<LNDCOMT> sortByLCEXD8 = (o1, o2) -> o1.getLcexd8().compareTo(o2.getLcexd8());

			List<LNDCOMT> listLNDCOMT = inner.getListLNDCOMT().stream()
					.filter(LCEXD8GreaterEqualWLCEXD8)
					.sorted(sortByLCEXD8)
					.collect(Collectors.toList());

			for (LNDCOMT OBLNDCOMT : listLNDCOMT) {
				Gson gson = CommonGsonParser.DEFAULT_GSON;
				String strObj = gson.toJson(OBLNDCOMT);
				LNDCOMT LNDCOMT = gson.fromJson(strObj, LNDCOMT.class);

				foundLNDCOMT = true;

				if ((LNDCOMT.getLcrlam().compareTo(LNDCOMT.getLcutam()) > 0)) {
					WKAMT = LNDCOMT.getLcrlam().subtract(LNDCOMT.getLcutam());
					WKAMT = WKAMT.multiply(inner.getLNDMAST().getFca1().setScale(ScaleValue.BAL, RoundingMode.DOWN));
					TMPACC = WKAMT;
					//roundi();
					TMPACC = CommonRoundCent.roundCent(inner.getSSPAPPL().getSsarot(), TMPACC, inner.getLNDMAST().getCurdec());
					WKAMT = TMPACC.setScale(ScaleValue.BAL, RoundingMode.DOWN);
					
					srlnddfee(inner, WKAMT);

				}
				
			}
//		}

	}

	// *********************************************************************
	//
	// *********************************************************************
	public void srlnddfee(IO inner, BigDecimal WKAMT) throws Exception {
		
		Boolean foundLNDDFEE = false;
		int index_listLNDDFEE = 0;

		Predicate<LNDDFEE> LFETYPEqualWLFETYP = i -> i.getLfetyp().equals("CA");
//		Comparator<LNDDFEE> sortByLFEDU8 = (o1, o2) -> o1.getLfedu8().compareTo(o2.getLfedu8());

	
		LNDDFEE LNDDFEE = inner.getListLNDDFEE().stream()
				.filter(LFETYPEqualWLFETYP)
//				.sorted(sortByLFEDU8)
				.findFirst().orElse(null);
//				.collect(Collectors.toList());

		if(LNDDFEE != null){
			srssppare(inner, LNDDFEE.getLfecde(), WKAMT);
		}
	}
	
	// *********************************************************************
	//
	// *********************************************************************
	public void srssppare(IO inner, String WPECCOD, BigDecimal WKAMT) throws Exception {
		
		Boolean foundSSPPARE = false;
		int index_listSSPPARE = 0;

		Predicate<SSPPARE> PECCODEqualWPECCOD = i -> i.getPeccod().equals(WPECCOD.trim());
//		Comparator<LNDDFEE> sortByLFEDU8 = (o1, o2) -> o1.getLfedu8().compareTo(o2.getLfedu8());

		if (inner.getListSSPPARE() != null){
			SSPPARE SSPPARE = inner.getListSSPPARE().stream()
					.filter(PECCODEqualWPECCOD)
	//				.sorted(sortByLFEDU8)
					.findFirst().orElse(null);
	//				.collect(Collectors.toList());
	
			if(SSPPARE != null){
				if (SSPPARE.getPecbat().trim().equals("O")) {
						WRKOTH = WRKOTH.add(WKAMT);
					} else {
						WRKMIS = WRKMIS.add(WKAMT);
					}
			
			}
		}
	}

	// *********************************************************************
	// REBFCA SUBR - REBATE TO FORECAST PROFIT FOR BILLING
	// *********************************************************************
	public void rebfca(IO inner) throws Exception {

		SINTRB = inner.getLNDMAST().getIntreb();
		
		BigDecimal YRDAYS = BigDecimal.ZERO;
		BigDecimal WRKREF = BigDecimal.ZERO;
		
		inner.setWAFTGRC();
		inner.setBKDCDF();
		
//		String WRBDT = "";
//		String WRBAD = "";
//		BigDecimal WRBDY = BigDecimal.ZERO;
//		String WRBEX = "";
//		String POREB = "N";
		BigDecimal REBFC = BigDecimal.ZERO;
		
		if ((inner.getLNPPAR2().getPblndy().compareTo(BigDecimal.ZERO) > 0)) {
			//* NO PROFIT FOR FOLLOWING STATUSES.
			if ((inner.getLNDMAST().getStatus().compareTo(new BigDecimal("5")) == 0)
					|| (inner.getLNDMAST().getStatus().compareTo(new BigDecimal("7")) == 0)
					|| inner.getLNDMAST().getAccmin().trim().equals("Y")
					|| ((inner.getLNDMAST().getStins8().compareTo(inner.LL1PD8) <= 0)
							&& (inner.getLNDMAST().getStins8().compareTo(BigDecimal.ZERO) > 0)
							&& (inner.getLNDMAST().getStine8().compareTo(inner.LL1PD8) >= 0) 
							&& (inner.getLNDMAST().getStine8().compareTo(BigDecimal.ZERO) > 0))) {
			} else {
//				BKDCDF= BigDecimal.ZERO;
//				setgrc(objHeader, objInput, objWork);
				//* SELECT REBATE METHOD
				switch (inner.getLNPPAR2().getPrmtbk().trim()) {
				case "D":
					if (((inner.LL1NB8.compareTo(inner.XMTDT8) > 0)
							&& (inner.XMTDT8.compareTo(BigDecimal.ZERO) > 0)
							&& inner.getLNPPAR2().getPmrate().trim().equals("Z") 
							&& !inner.getLNDMAST().getRecall().trim().equals("Y"))
							|| ((inner.LL1NB8.compareTo(inner.XMTDT8) > 0)
									&& (inner.XMTDT8.compareTo(BigDecimal.ZERO) > 0)
									&& inner.getLNPPAR2().getPrcmrt().trim().equals("Z") 
									&& inner.getLNDMAST().getRecall().trim().equals("Y"))) {
						SINTRB = inner.getLNDMAST().getIntreb();
						WINTRB = BigDecimal.ZERO;
					} else {
					 
						if (inner.WAFTGRC.trim().equals("Y")) {
							REBFC = srlnrbacd(inner);

						} else {
							REBFC = srlnrbgpd(inner); 
						}
						  
//						WINTRB = inner.getLNDMAST().getBkdisc().multiply(REBFC)
//								.setScale(ScaleValue.BAL, RoundingMode.DOWN);
						// divide 10000 due to rebate earn multiply 10000
						BigDecimal ADJ = inner.getLNDMAST().getBkdisc().multiply(REBFC);
						WINTRB = ADJ.divide(new BigDecimal("100000")).setScale(ScaleValue.BAL, RoundingMode.DOWN);
						REBFC = REBFC.divide(new BigDecimal("100000")).setScale(ScaleValue.REB, RoundingMode.DOWN);
						
						SINTRB = WINTRB;
						WINTRB = inner.getLNDMAST().getIntreb().subtract(WINTRB);
					}

					break;
				//* FORECAST REBATE METHOD OTHER ISLAMIC 
				case "O":
					if (((inner.LL1NB8.compareTo(inner.XMTDT8) > 0)
							&& (inner.XMTDT8.compareTo(BigDecimal.ZERO) > 0)
							&& inner.getLNPPAR2().getPmrate().trim().equals("Z") 
							&& !inner.getLNDMAST().getRecall().trim().equals("Y"))
							|| ((inner.LL1NB8.compareTo(inner.XMTDT8) > 0)
									&& (inner.XMTDT8.compareTo(BigDecimal.ZERO) > 0)
									&& inner.getLNDMAST().getRecall().trim().equals("Y") 
									&& inner.getLNPPAR2().getPrcmrt().trim().equals("Z"))) {
						SINTRB = inner.getLNDMAST().getIntreb();
						WINTRB = BigDecimal.ZERO;
					} else {
//						WRBDY = inner.getLNPPAR2().getPrldbk();
//						WRBDT = inner.getLNPPAR2().getPrdtbk().trim();
						if (inner.WAFTGRC.trim().equals("Y")) {
							YRDAYS = LoansYearBaseDaysLoader.daysin(inner.LL1PD8, inner.getLNDMAST().getYbase());
							REBFC = srlnrbacm(inner, YRDAYS);

						} else {
							REBFC = srlnrbgpm(inner);

						}

						WINTRB = inner.getLNDMAST().getBkdisc().multiply(REBFC)
								.setScale(ScaleValue.BAL, RoundingMode.DOWN);
						SINTRB = WINTRB;
						WINTRB = inner.getLNDMAST().getIntreb().subtract(WINTRB);
					}

					break;
				//* FORECAST REBATE METHOD RULE78 ISLAMIC  
				case "R":
//					WRBDT = inner.getLNPPAR2().getPrdtbk().trim();
//					WRBAD = inner.getLNPPAR2().getPrmebk().trim();
//					WRBDY = inner.getLNPPAR2().getPrldbk();
//					WRBEX = inner.getLNPPAR2().getPrbexf().trim();
//					POREB = "N";
					if (inner.WAFTGRC.trim().equals("Y")) {
						REBFC = srlnrbr78(inner, RBDAT8);

					} else {
						REBFC = srlnrbgpd(inner); 
						
					}

//					rebr78( objHeader, objInput, objWork);
					WRKREF = LoansRebateFactorOnRuleOf78.rebr78(inner.ISLACT, inner.WAFTGRC, 
							inner.getLNDISLM().getLisgpp(), inner.BKDCDF, 
//							TODAR2, TODARB, TODAC2,
							BigDecimal.ZERO, BigDecimal.ZERO, BigDecimal.ZERO, 
							inner.getLNDMSTS().getLtdar2(), inner.getLNDMSTS().getLtdarb(), inner.getLNDMSTS().getLtdac2());
					WINTRB = LoansRebateFactorOnRuleOf78.rebr78(inner.ISLACT, inner.WAFTGRC, 
							inner.getLNDISLM().getLiecpm(), inner.getLNDISLM().getLisgpp(), inner.getLNDISLM().getLiscpm(),
							inner.BKDCDF, inner.getLNDMAST().getBkdisc(), inner.getLNDMAST().getAccreb(), REBFC, WRKREF,
							inner.getLNDMAST().getMclnid(), inner.getLNDISLM().getLissel(), inner.getLNDMAST().getOrgamt(), 
							inner.getLNDMAST().getTchamt()).setScale(ScaleValue.BAL, RoundingMode.DOWN);//POC-1263 - rounding down due to 1 cent different
 
					
					SINTRB = WINTRB;
					WINTRB = inner.getLNDMAST().getIntreb().subtract(WINTRB);
					break;
				case "S":
//					WRBDT = inner.getLNPPAR2().getPrdtbk().trim();
//					WRBDY = inner.getLNPPAR2().getPrldbk();
					srlnrbsld(inner);

					WINTRB = inner.getLNDMAST().getBkdisc().multiply(REBFC)
							.setScale(ScaleValue.BAL, RoundingMode.DOWN);
					SINTRB = WINTRB;
					WINTRB = inner.getLNDMAST().getIntreb().subtract(WINTRB);
					break;
				} 
			} 
		} 
	}

	/** *********************************************************************
	// ISLPMT SUBR - CALCULATE PAYMENT AMOUNT FOR ISLAMIC
	// *********************************************************************/
	public void islpmt(IO inner, LNDEXCP LNDEXCB) throws Exception {

		/** During Grace Period Do Not Service Principal */
		if (((inner.getLNDISLM().getLisge8().compareTo(LNDBNOT.getLbcdt8()) >= 0)
				&& (inner.getLNDISLM().getLisgtr().compareTo(BigDecimal.ZERO) > 0)
				&& (inner.getLNDMAST().getFulld8().compareTo(BigDecimal.ZERO) == 0) 
				/*&& !inner.getLNDMAST().getFfpdt().trim().equals("E")) -V11 changes , revert back to V10, using LISGPC */
				&& !inner.getLNDISLM().getLisgpc().trim().equals("E")
				&& !inner.getLNDISLM().getLisgpc().trim().equals("I"))
				|| ((inner.getLNDISLM().getLisge8().compareTo(LNDBNOT.getLbcdt8()) >= 0)
						&& (inner.getLNDISLM().getLisgtr().compareTo(BigDecimal.ZERO) > 0) 
						/*&& inner.getLNDMAST().getFfpdt().trim().equals("E"))) { -V11 changes , revert back to V10, using LISGPC */
						&& inner.getLNDISLM().getLisgpc().trim().equals("E"))) {
			PMTWRK = BigDecimal.ZERO;
			return;
		}

		if ((inner.getLNDMAST().getNpdt8().compareTo(LNDEXCB.getSspdt8()) <= 0)) {
			PMTWRK = inner.getLNDMAST().getPmtamt();
		} else {
			PMTWRK = BigDecimal.ZERO;
		}

		/** SEE IF GRACE EXPIRES DURING FORECASTED PERIOD */
		if (((inner.getLNDISLM().getLisge8().compareTo(inner.LL1PD8) > 0) 
				&& (inner.getLNDISLM().getLisge8().compareTo(LNDBNOT.getLbcdt8()) < 0))) {
			PMTWRK = inner.getLNDMAST().getFnlpmt();
		}

//		objLNDPMTF.setBigDecimal("LNFDT8", LNDBNOT.getBigDecimal("LBCDT8"));

		if (!inner.getLNDISLM().getLidual().trim().equals("")) {

			Boolean foundLNDPMTF = false;
			int index_listLNDPMTF = 0;

			Predicate<LNDPMTF> LNFDT8EqualWLNFDT8 = i -> i.getLnfdt8().compareTo(LNDBNOT.getLbcdt8()) == 0;

			Comparator<LNDPMTF> sortByLNFDT8 = (o1, o2) -> o1.getLnfdt8().compareTo(o2.getLnfdt8());

			LNDPMTF LNDPMTF = inner.getListLNDPMTF().stream()
					.filter(LNFDT8EqualWLNFDT8)
					.sorted(sortByLNFDT8)
					.findFirst().orElse(null);

			if(LNDPMTF != null){
				foundLNDPMTF = true;
				PMTWRK = LNDPMTF.getLnfnam();
			}else{
				foundLNDPMTF = false;
				PMTWRK = BigDecimal.ZERO;
			}

		} else {

			Boolean foundLNDPMTF = false;
			int index_listLNDPMTF = 0;

			Predicate<LNDPMTF> LNFDT8LessThanEqualLbcdt8= i -> i.getLnfdt8().compareTo(LNDBNOT.getLbcdt8()) <= 0;

			Comparator<LNDPMTF> sortByLNFDT8 = (o1, o2) -> o1.getLnfdt8().compareTo(o2.getLnfdt8());

			LNDPMTF LNDPMTF = inner.getListLNDPMTF().stream()
					.filter(LNFDT8LessThanEqualLbcdt8)
					.sorted(sortByLNFDT8.reversed())
					.findFirst().orElse(null);

			if(LNDPMTF != null){
				foundLNDPMTF = true;
				if ((inner.getLNDMAST().getNpdt8().compareTo(LNDPMTF.getLnfdt8()) <= 0)) {
					PMTWRK = LNDPMTF.getLnfnam();
				}
			}
//			else{
//				foundLNDPMTF = false;
//				PMTWRK = BigDecimal.ZERO;
//			} 
		} 
	}

	// *********************************************************************
	// FCASI9 SUBR - FORECAST REBATE FOR IBASE 9
	// *********************************************************************
	public void fcasi9(IO inner, LNDEXCP LNDEXCB) throws Exception {

//		System.out.println("fcasi9");

		BigDecimal ROLDT8 = BigDecimal.ZERO;
		BigDecimal ROLTRM = BigDecimal.ZERO;
		BigDecimal ROLDAY = BigDecimal.ZERO;
		String ROLCOD = "";
		
		BigDecimal XINTRB = BigDecimal.ZERO;
		BigDecimal TMPACC = BigDecimal.ZERO;
		 
//		LNDBNOT.getLbcpi9() = BigDecimal.ZERO;
//		replace lbcpi9 with lbcprf
		
		LNDBNOT.setLbcprf(BigDecimal.ZERO);
		//** FORECAST INTEREST REBATE
		if ((LNDEXCB.getXcpcod().compareTo(new BigDecimal("60")) == 0)
				|| (LNDEXCB.getXcpcod().compareTo(new BigDecimal("67")) == 0)) {
			
			//* Get Last Month Rebate
			RBDAT8 = BigDecimal.ZERO; 
			Boolean foundLNDPMTB = false;
			int index_listLNDPMTB = 0;

			Predicate<LNDPMTB> LBDUD8LessEqualWLBDUD8 = i -> i.getLbdud8().compareTo(LNDBNOT.getLbcdt8()) <= 0;

			Comparator<LNDPMTB> sortByLBDUD8 = (o1, o2) -> o1.getLbdud8().compareTo(o2.getLbdud8());

			List<LNDPMTB> listLNDPMTB = inner.getListLNDPMTB().stream()
					.filter(LBDUD8LessEqualWLBDUD8)
					.sorted(sortByLBDUD8)
					.collect(Collectors.toList());

			for (LNDPMTB OBLNDPMTB : listLNDPMTB) {
				Gson gson = CommonGsonParser.DEFAULT_GSON;
				String strObj = gson.toJson(OBLNDPMTB);
				LNDPMTB LNDPMTB = gson.fromJson(strObj, LNDPMTB.class);

				foundLNDPMTB = true;
				
				if ((LNDPMTB.getLbprfo().compareTo(BigDecimal.ZERO) > 0)) {
					RBDAT8 = LNDPMTB.getLbdud8();
					break;
				}
			}
			
			if ((RBDAT8.compareTo(BigDecimal.ZERO) == 0)) {
				ROLDT8 = LNDBNOT.getLbcdt8();
				ROLTRM = inner.getLNDMAST().getFreq().multiply(new BigDecimal("-1"));
				ROLDAY = inner.getLNDMAST().getNpday();
				ROLCOD = inner.getLNDMAST().getFrcode().trim();
				//				srlnravdm();
				ROLDT8 = CommonDateAdvanceByTerm.roll(ROLDT8, ROLTRM, ROLCOD, ROLDAY, "Y");

				if ((ROLDT8.compareTo(inner.getLNDMAST().getFpdt8()) <= 0)) {
				} else {
					RBDAT8 = ROLDT8;
				} 
			}

			if ((RBDAT8.compareTo(BigDecimal.ZERO) > 0)) {
				rebfca(inner); 
				XINTRB = SINTRB;
			} else {
				XINTRB = inner.getLNDMAST().getBkdisc();
			}
			//* Get Current Rebate 
			RBDAT8 = LNDBNOT.getLbcdt8();
			rebfca(inner);

//			LNDBNOT.setLbcpi9(XINTRB.subtract(SINTRB)); // lbcprf for ibase9 ; lbcint for ibase8
//			ACRINT = LNDBNOT.getLbcpi9(); 			

//			LNDBNOT.setLbcprf(XINTRB.subtract(SINTRB));
			LNDBNOT.setLbcprf(inner.getLNDMAST().getIntreb().subtract(SINTRB).add(inner.getLNDMAST().getAccern().subtract(inner.getLNDMAST().getBilprf())));
			
			//** COMPUTE NORMAL EARNING (ACRINT) AND MORA EARNING (SACRIN) 
			ACRINT = LNDBNOT.getLbcprf();
			RATACC = inner.getLNDMAST().getRate();
//			ibase 9 did not use WRKPD8. so use LL1PD8 instead.
			acctmi(inner, inner.LL1PD8);

//			LNDBNOT.setLbcpi9(ACRINT.setScale(ScaleValue.BAL,RoundingMode.DOWN));
			LNDBNOT.setLbcprf(ACRINT.setScale(ScaleValue.BAL,RoundingMode.DOWN));
			WKBMOR = inner.getLNDMAST().getMorint().add(SACRIN);
			
			MoraInt(inner, LNDEXCB, WKBMOR);
			//*IF HAVE NOT TIME TO BILL THEN DO NOT BILLED.
//			if (((LNDEXCB.getSspdt8().compareTo(BigDecimal.ZERO) > 0))
//					|| ((LNDEXCB.getSsipd8().compareTo(BigDecimal.ZERO) > 0))) 
//				//|| (inner.getLNDMAST().getBigDecimal("STRDMI").compareTo(BigDecimal.ZERO) == 0) - CYN101
//				//(inner.getLNDMAST().getBigDecimal("STRDMI").compareTo(LNDEXCB.getBigDecimal("SSIPD8")) > 0)  && - CYN101
//				//(inner.getLNDMAST().getBigDecimal("STRDMI").compareTo(LNDEXCB.getBigDecimal("SSPDT8")) > 0)  && - CYN101
//			{
//				LNDBNOT.setLbcmin(BigDecimal.ZERO);
//			} else {
//				TMPACC = WKBMOR;
//				//roundi();
//				TMPACC = CommonRoundCent.roundCent(inner.getSSPAPPL().getSsarot(), TMPACC, inner.getLNDMAST().getCurdec());
//
//				LNDBNOT.setLbcmin(TMPACC.setScale(ScaleValue.BAL, RoundingMode.DOWN));
//			}

//			LNDBNOT.setLbcprf(LNDBNOT.getLbcpi9());
			LNDBNOT.setLbcprf(LNDBNOT.getLbcprf());
			LNDBNOT.setLbcprn(LNDBNOT.getLbcprn().subtract(LNDBNOT.getLbcprf()));
			if ((LNDBNOT.getLbcprn().compareTo(BigDecimal.ZERO) < 0)) {
				LNDBNOT.setLbcprn(BigDecimal.ZERO);
			}

		}

	}

	/** *********************************************************************
	// ISLPRF SUBR - CALCULATE ISLAMIC PROFIT AND REFUND
	// *********************************************************************/
	public void islprf(IO inner, LNDEXCP LNDEXCB) throws Exception {

		BigDecimal WACERN = BigDecimal.ZERO;
		BigDecimal WLICRF = BigDecimal.ZERO;
		BigDecimal TMPACC = BigDecimal.ZERO;
		BigDecimal FRDAT8 = BigDecimal.ZERO;
		BigDecimal TODAT8 = BigDecimal.ZERO;
		BigDecimal NOMTHS = BigDecimal.ZERO;
		String DURCOD = "";
		int NUMC = 0;
		
		LNDBNOT.setLbcprf(BigDecimal.ZERO);
		LNDBNOT.setLbcref(BigDecimal.ZERO);
		LNDBNOT.setLbccom(BigDecimal.ZERO);

		/** FORECAST ISLAMIC PROFIT */
		if ((LNDEXCB.getXcpcod().compareTo(new BigDecimal("60")) == 0)
				|| (LNDEXCB.getXcpcod().compareTo(new BigDecimal("63")) == 0)
				|| (LNDEXCB.getXcpcod().compareTo(new BigDecimal("67")) == 0)) {
			RBDAT8 = LNDBNOT.getLbcdt8();
			rebfca(inner);

			/** COMPUTE NORMAL EARNING (ACRINT) AND MORA EARNING (SACRIN)*/
			ACRINT = WINTRB;
			RATACC = inner.getLNDMAST().getRate();
			// WRKPD8 is used in forecast accrual. ibase 9 did not use this work fields
			acctmi(inner, inner.LL1PD8);

			WINTRB = ACRINT.setScale(ScaleValue.BAL,RoundingMode.DOWN);
			WKBMOR = inner.getLNDMAST().getMorint().add(SACRIN);
			
			MoraInt(inner, LNDEXCB, WKBMOR);
			/** IF HAVE NOT TIME TO BILL THEN DO NOT BILLED. */
//			if ( (inner.getLNDMAST().getBigDecimal("STRDMI").compareTo(LNDEXCB.getBigDecimal("SSIPD8")) > 0
//					&& LNDEXCB.getSspdt8().compareTo(BigDecimal.ZERO) > 0)
//					|| (inner.getLNDMAST().getBigDecimal("STRDMI").compareTo(LNDEXCB.getBigDecimal("SSPDT8")) > 0
//							&& LNDEXCB.getSsipd8().compareTo(BigDecimal.ZERO) > 0 )
//					|| (inner.getLNDMAST().getBigDecimal("STRDMI").compareTo(BigDecimal.ZERO) == 0))
//			{
//				LNDBNOT.setLbcmin(BigDecimal.ZERO);
//			} else {
//				TMPACC = WKBMOR;
//				//roundi();
//				TMPACC = CommonRoundCent.roundCent(inner.getSSPAPPL().getSsarot(), TMPACC, inner.getLNDMAST().getCurdec());
//
//				LNDBNOT.setLbcmin(TMPACC.setScale(ScaleValue.BAL, RoundingMode.DOWN));
//			}
		}

		if ((LNDEXCB.getXcpcod().compareTo(new BigDecimal("60")) == 0)
				|| (LNDEXCB.getXcpcod().compareTo(new BigDecimal("63")) == 0)) {
			WINTRB = WINTRB.add(inner.getLNDMAST().getAccern()).setScale(ScaleValue.BAL, RoundingMode.DOWN);
			if (inner.getLNDISLM().getLisgpc().trim().equals("N")
					|| inner.getLNDISLM().getLisgpc().trim().equals("G")) {
				FRDAT8 = LNDBNOT.getLbcdt8();
				TODAT8 = inner.getLNDMAST().getMatdt8();
				DURCOD = "M";
				//srlnravdu();
				NUMC = CommonDateComputeDuration.getMonths(FRDAT8, TODAT8, "");
				NOMTHS = BigDecimal.valueOf(NUMC);

				if ((inner.getLNDMAST().getTerm().compareTo(BigDecimal.ZERO) > 0)) {
					WACERN = NOMTHS.divide(inner.getLNDMAST().getTerm(), ScaleValue.ACR,RoundingMode.DOWN);
					WACERN = WACERN.multiply(inner.getLNDMSTS().getLtdac2()).setScale(ScaleValue.ACR, RoundingMode.DOWN);
					WINTRB = WINTRB.subtract(WACERN).setScale(ScaleValue.BAL, RoundingMode.DOWN);
				}

			}

			if ((inner.getLNDMAST().getBilprf().compareTo(BigDecimal.ZERO) > 0)) {
				LNDBNOT.setLbcprf(WINTRB.subtract(inner.getLNDMAST().getBilprf()));
				LNDBNOT.setLbcprf(LNDBNOT.getLbcprf().subtract(inner.getLNDMAST().getBilrin()));
			} else {
				LNDBNOT.setLbcprf(WINTRB);
				LNDBNOT.setLbcprf(LNDBNOT.getLbcprf().subtract(inner.getLNDMAST().getBilrin()));
			}

			if (inner.getLNDISLM().getLirpft().trim().equals("P")
					|| inner.getLNDISLM().getLirgpp().trim().equals("P")
					|| inner.getLNDISLM().getLirpft().trim().equals("S")
					|| inner.getLNDISLM().getLirgpp().trim().equals("S")) {
				WLICRF = WLICRF.add(inner.getLNDMAST().getAccreb());
				LNDBNOT.setLbcref(WLICRF.subtract(inner.getLNDISLM().getLiblrf()).setScale(ScaleValue.BAL, RoundingMode.DOWN));
				if ((LNDBNOT.getLbcref().compareTo(BigDecimal.ZERO) < 0)) {
					LNDBNOT.setLbcref(BigDecimal.ZERO);
				}

			} else {
				LNDBNOT.setLbcref(BigDecimal.ZERO);
			}

			if (((inner.getLNDISLM().getLisge8().compareTo(LNDBNOT.getLbcdt8()) >= 0)
					&& (inner.getLNDMAST().getFulld8().compareTo(BigDecimal.ZERO) == 0)
					&& (inner.getLNDISLM().getLisgtr().compareTo(BigDecimal.ZERO) > 0) 
					&& !inner.getLNDMAST().getFfpdt().trim().equals("E"))
					|| ((inner.getLNDISLM().getLisge8().compareTo(LNDBNOT.getLbcdt8()) >= 0)
							&& (inner.getLNDISLM().getLisgtr().compareTo(BigDecimal.ZERO) > 0) 
							&& inner.getLNDMAST().getFfpdt().trim().equals("E"))) {
				if ((inner.getLNDISLM().getLisgfx().compareTo(BigDecimal.ZERO) > 0)) {
					LNDBNOT.setLbcprf(inner.getLNDISLM().getLisgfx());
				}

			} else {
				if ((inner.getLNDISLM().getLisnfx().compareTo(BigDecimal.ZERO) > 0)) {
					LNDBNOT.setLbcprf(inner.getLNDISLM().getLisnfx());
				}

			}

			if ((inner.getLNDISLM().getLifref().compareTo(BigDecimal.ZERO) > 0)) {
				if (inner.getLNDISLM().getLirpft().trim().equals("P")
						|| inner.getLNDISLM().getLirgpp().trim().equals("P")
						|| inner.getLNDISLM().getLirpft().trim().equals("S")
						|| inner.getLNDISLM().getLirgpp().trim().equals("S")) {
					LNDBNOT.setLbcref(inner.getLNDISLM().getLifref());
				}

			}

			if ((inner.getLNDISLM().getLiccom().compareTo(BigDecimal.ZERO) > 0)) {
				LNDBNOT.setLbccom(inner.getLNDISLM().getLiccom());
			} else {
				LNDBNOT.setLbccom(BigDecimal.ZERO);
			}

			if (((LNDBNOT.getLbcdt8().compareTo(inner.getLNDMAST().getMrstr8()) > 0)
					&& (LNDBNOT.getLbcdt8().compareTo(inner.getLNDMAST().getMrexp8()) <= 0) 
					&& !LNDBNOT.getMatcod().trim().equals("M"))) {
				IPMTAMWRK = fixint(inner);

				if (((IPMTAMWRK.compareTo(BigDecimal.ZERO) > 0) 
						&& (IPMTAMWRK.compareTo(LNDBNOT.getLbcprf()) < 0))) {
					LNDBNOT.setLbcrin(LNDBNOT.getLbcprf().subtract(IPMTAMWRK));
					LNDBNOT.setLbcprf(IPMTAMWRK);
				} else {
					LNDBNOT.setLbcrin(LNDBNOT.getLbcprf());
					LNDBNOT.setLbcprf(BigDecimal.ZERO);
				}

			}

			if ((LNDBNOT.getLbcprf().compareTo(WINTRB) > 0)) {
				LNDBNOT.setLbcprf(WINTRB);
			}

			if ((LNDEXCB.getXcpcod().compareTo(new BigDecimal("60")) == 0)) {
				if (((inner.getLNDMAST().getPmtcod().compareTo(new BigDecimal("2")) != 0) 
						&& (inner.getLNDMAST().getPmtcod().compareTo(new BigDecimal("6")) != 0))) {
					if (((LNDBNOT.getLbcprf().compareTo(LNDBNOT.getLbcprn()) > 0) 
							&& (LNDBNOT.getLbcprn().compareTo(BigDecimal.ZERO) > 0))) {
						LNDBNOT.setLbcprf(LNDBNOT.getLbcprn());
					}

					LNDBNOT.setLbcprn(LNDBNOT.getLbcprn().subtract(LNDBNOT.getLbcprf()));
					if ((LNDBNOT.getLbcprn().compareTo(BigDecimal.ZERO) < 0)) {
						LNDBNOT.setLbcprn(BigDecimal.ZERO);
					}

				}

			}

		}

	}
	
	// *********************************************************************
	//
	// *********************************************************************
	public void srlndpsch(IO inner) throws Exception {

		Boolean foundLNDPSCH = false;
		int index_listLNDPSCH = 0;

		Predicate<LNDPSCH> LPWDU8EqualWLPWDU8 = i -> i.getLpwdu8().compareTo(LNDBNOT.getLbcdt8()) == 0;

		Comparator<LNDPSCH> sortByLPWDU8 = (o1, o2) -> o1.getLpwdu8().compareTo(o2.getLpwdu8());

		LNDPSCH LNDPSCH = inner.getListLNDPSCH().stream()
				.filter(LPWDU8EqualWLPWDU8)
				.sorted(sortByLPWDU8)
				.findFirst().orElse(null);

		if((LNDPSCH != null)
			&& (LNDPSCH.getLpwsch().trim().equals("Y"))) {
			foundLNDPSCH = true;
				inner.getLNDMAST().setPmtcod(LNDPSCH.getLpwcod());
				inner.getLNDMAST().setFreq(LNDPSCH.getLpwfrq());
				inner.getLNDMAST().setIpfreq(LNDPSCH.getLpwifr());

				PMTWRK  = LNDPSCH.getLpwpmt();
				PMTWINT = LNDPSCH.getLpwipm();
				PMTWPRN = LNDPSCH.getLpwprp();
				PMTWMIN = LNDPSCH.getLpwmip();
				PMTWRSI = LNDPSCH.getLpwrip();
		}else{
			foundLNDPSCH = false;
			if(LNDPSCH != null) {
			Predicate<LNDPSCH> LPWDU8LessEqualWLPWDU8 = i -> i.getLpwdu8().compareTo(LNDBNOT.getLbcdt8()) <= 0;
			LNDPSCH = inner.getListLNDPSCH().stream()
					.filter(LPWDU8LessEqualWLPWDU8)
					.sorted(sortByLPWDU8.reversed())
					.findFirst().orElse(null);
			}
			if((LNDPSCH != null)
					&& (!LNDPSCH.getLpwsch().trim().equals("Y"))) {
				foundLNDPSCH = true;
				inner.getLNDMAST().setPmtcod(LNDPSCH.getLpwcod());
				inner.getLNDMAST().setFreq(LNDPSCH.getLpwfrq());
				inner.getLNDMAST().setIpfreq(LNDPSCH.getLpwifr());

				PMTWRK  = LNDPSCH.getLpwpmt();
				PMTWINT = LNDPSCH.getLpwipm();
				PMTWPRN = LNDPSCH.getLpwprp();
				PMTWMIN = LNDPSCH.getLpwmip();
				PMTWRSI = LNDPSCH.getLpwrip();
			}
		}
		
	}
	
	// *********************************************************************
		//
		// *********************************************************************
		public void srlndroll(IO inner, BigDecimal WMATDT8) throws Exception {
			
//			BigDecimal WMATDT8 = inner.getLNDMAST().getMatdt8();
			
			Boolean foundLNDROLL = false;
			int index_listLNDROLL = 0;

			Predicate<LNDROLL> LOEFD8EqualWLOEFD8 = i -> i.getLoefd8().compareTo(WMATDT8) == 0;
			//			Comparator<LNDROLL> sortByLOEFD8 = (o1, o2) -> o1.getLoefd8().compareTo(o2.getLoefd8());

			LNDROLL LNDROLL = inner.getListLNDROLL().stream()
					.filter(LOEFD8EqualWLOEFD8)
					//					.sorted(sortByLOEFD8)
					.findFirst().orElse(null);

			if(LNDROLL != null){

				foundLNDROLL = true;

				if ((LNDROLL.getLobto8().compareTo(BigDecimal.ZERO) == 0)) {
					if (LNDROLL.getLometd().trim().equals("A")
							|| LNDROLL.getLometd().trim().equals("B")
							|| LNDROLL.getLometd().trim().equals("C")) {
						LNDBNOT.setLbcprn(BigDecimal.ZERO);
						if (LNDROLL.getLometd().trim().equals("A")) {
							LNDBNOT.setLbcint(BigDecimal.ZERO);
						}

						if (LNDROLL.getLometd().trim().equals("C")) {
							LNDBNOT.setLbcint(LNDBNOT.getLbcint().subtract(LNDROLL.getLoamti()));
							if ((LNDBNOT.getLbcint().compareTo(BigDecimal.ZERO) < 0)) {
								LNDBNOT.setLbcint(BigDecimal.ZERO);
							}
						}
					} else {
						if (LNDROLL.getLometd().trim().equals("P")) {
							LNDBNOT.setLbcprn(LNDBNOT.getLbcprn().subtract(LNDROLL.getLoamt()));
							if ((LNDBNOT.getLbcprn().compareTo(BigDecimal.ZERO) < 0)) {
								LNDBNOT.setLbcprn(BigDecimal.ZERO);
							}

						}

					}

				}

			}
			
		}
	
		// *********************************************************************
		//
		// *********************************************************************
		public void srlndrate(IO inner, BigDecimal WRKNB8, BigDecimal WRKPD8) throws Exception {
			
			BigDecimal SVYBSE = BigDecimal.ZERO;
			
			Boolean foundLNDRATE = false;
			int index_listLNDRATE = 0;

			Predicate<LNDRATE> AEFFD8GreaterEqualWAEFFD8 = i -> i.getAeffd8().compareTo(WRKPD8) >= 0;

			Comparator<LNDRATE> sortByAEFFD8 = (o1, o2) -> o1.getAeffd8().compareTo(o2.getAeffd8());

			LNDRATE LNDRATE = inner.getListLNDRATE().stream()
					.filter(AEFFD8GreaterEqualWAEFFD8)
					.sorted(sortByAEFFD8)
					.findFirst().orElse(null);

			if(LNDRATE != null){
				foundLNDRATE = true;
			}
			else{
				foundLNDRATE = false;
			}

			if ((foundLNDRATE == true
					&& (LNDRATE.getAeffd8().compareTo(WRKPD8) == 0) 
					&& (LNDRATE.getArate().compareTo(BigDecimal.ZERO) > 0))) 
			{
                if(!LNDRATE.getAdybse().trim().equals(""))
                {
                    SVYBSE = new BigDecimal(LNDRATE.getAdybse().trim());
                }
                else {
                    SVYBSE = BigDecimal.ZERO;
                }
				if (((inner.getLNDMAST().getYbase().compareTo(SVYBSE) != 0) 
						&& (SVYBSE).compareTo(new BigDecimal("5")) == 0)) 
				{
					YBSACC = new BigDecimal(LNDRATE.getAdybse().trim());
//					WRKCD8 = LNDBNOT.getLbcdt8();
//					if ((WRKNB8.compareTo(WRKCD8) >= 0)) {
//						break;
//					}
				}

				RATACC = LNDRATE.getArate();
				WFRATE = LNDRATE.getApfxrt();
				WFMORT = LNDRATE.getApfmrt();
				WFMIAM = LNDRATE.getApmfin();
				WFMMAM = LNDRATE.getApfmrt().setScale(ScaleValue.BAL,RoundingMode.DOWN);

				if ((inner.getLNDMAST().getUserp().trim().equals("Y")
						&& (inner.getLNDMAST().getStnrp8().compareTo(BigDecimal.ZERO) > 0) 
						&& !inner.getLNDMAST().getRatpc().trim().equals(""))) 
				{

//					isParameterFound = objParameterLNPRPSD.checkKey("LNPRPSD",inner.getLNDMAST().getString("RATPC").trim().trim()+ ":"+ String.valueOf(inner.getLNDMAST().getBigDecimal("RPSEQ")).trim());
//check key field not blank instead of record found
					if (!inner.getLNPRPSD().getRpccod().equals("")) {
						if ((inner.getLNDMAST().getPvari().compareTo(BigDecimal.ZERO) > 0)) 
						{
							if (inner.getLNDMAST().getPvcode().trim().equals("-")) 
							{
								inner.getLNDMAST().setPvari(inner.getLNDMAST().getPvari().add(inner.getLNPRPSD().getRpperc()));
								inner.getLNDMAST().setPvcode("-");
							} else {
								inner.getLNDMAST().setPvari(inner.getLNDMAST().getPvari().subtract(inner.getLNPRPSD().getRpperc()));
								if ((inner.getLNDMAST().getPvari().compareTo(BigDecimal.ZERO) < 0)) {
									inner.getLNDMAST().setPvari(inner.getLNDMAST().getPvari().negate());
									inner.getLNDMAST().setPvcode("-");
								}

							}

						} else {
							inner.getLNDMAST().setRate(inner.getLNDMAST().getRate().subtract(inner.getLNPRPSD().getRpperc()));
							RATACC = inner.getLNDMAST().getRate();
						}

					}

				}

			}
		}
		
	// *********************************************************************
	// 
	// *********************************************************************

	public LNDPMTB genpmb(IO inner, LNDEXCP LNDEXCB, LNDPMTB LNDPMTB) throws Exception {
		
		BigDecimal WRKAMT = BigDecimal.ZERO;

		BigDecimal SLBPRN = BigDecimal.ZERO;
		BigDecimal SLBINT = BigDecimal.ZERO;
		BigDecimal SLBLC = BigDecimal.ZERO;
		BigDecimal SLBMIN = BigDecimal.ZERO;
		BigDecimal SLBCF = BigDecimal.ZERO;
		BigDecimal SLBRIN = BigDecimal.ZERO;
		BigDecimal SLBRLC = BigDecimal.ZERO;

		BigDecimal ROLDT8 = BigDecimal.ZERO;
		BigDecimal ROLTRM = BigDecimal.ZERO;
		BigDecimal ROLDAY = BigDecimal.ZERO;
		String ROLCOD = "";
		String ROLMOD = "";

		LNDPMTB.setLbacct(inner.getLNDMAST().getAcctno());
		LNDPMTB.setLbatyp(inner.getLNDMAST().getActype().trim());
		LNDPMTB.setLbamno(inner.getLNDMAST().getActmno());
		LNDPMTB.setLballl(inner.getLNDMAST().getActlll());
		LNDPMTB.setLbaddd(inner.getLNDMAST().getActddd());
		LNDPMTB.setLbdud8(LNDBNOT.getLbcdt8());
		LNDPMTB.setLbpmt8(LNDPMTB.getLbdud8());

		if ((inner.getLNDMAST().getNpday().compareTo(inner.getLNDMAST().getPmtday()) == 0)
				|| (inner.getLNDMAST().getPmtday().compareTo(BigDecimal.ZERO) == 0)
				|| (inner.getLNDMAST().getPmtcod().compareTo(new BigDecimal("2")) == 0)) 
		{
			LNDPMTB.setLbpmt8(LNDPMTB.getLbdud8());
		} else {
			ROLDT8 = LNDPMTB.getLbdud8();
			if (inner.getLNDMAST().getNpday().compareTo(inner.getLNDMAST().getPmtday()) < 0) 
			{
				ROLTRM = BigDecimal.ZERO;
			} else {
				ROLTRM = BigDecimal.ONE;
			}

			ROLDAY = inner.getLNDMAST().getPmtday();
			ROLCOD = "M";
			//			srlnravdm();
			ROLDT8 = CommonDateAdvanceByTerm.advanceMonth(ROLDT8, ROLTRM, ROLDAY, "Y");

			LNDPMTB.setLbpmt8(ROLDT8);

			if (inner.getLNPPAR2().getPadjdd().trim().equals("Y")
					|| inner.getLNPPAR2().getPadjdd().trim().equals("F")
					|| inner.getLNPPAR2().getPadjdd().trim().equals("B")) {
				ROLMOD = inner.getLNPPAR2().getPadjdd().trim();
				//				srlnravbd();
				ROLDT8 = CommonDateAdjustBusiness.adjustBusinessDate(ROLDT8, ROLMOD, 
						inner.getLNDMAST().getBkn(), inner.getLNDMAST().getBrn(), inner.getLNDMAST().getCurtyp(), 
						inner.getLNDMAST().getCurtyp(), inner.Xid);
				//						systemCurrecy, Xid); // temporary use account currency.
				LNDPMTB.setLbpmt8(ROLDT8);
			}

		}			
		ROLDT8 = LNDPMTB.getLbpmt8();

		boolean foundLNDPMTB = false;
		int index_listLNDPMTB = 0;

		Predicate<LNDPMTB> LBDUD8EqualLBCDT8 = i -> i.getLbdud8().compareTo(LNDBNOT.getLbcdt8()) == 0;
		//		Comparator<LNDPMTB> sortByLBDUD8 = (o1, o2) -> o1.getLbdud8().compareTo(o2.getLbdud8());
		LNDPMTB OBLNDPMTB = inner.getListLNDPMTB().stream().filter(LBDUD8EqualLBCDT8)
				//				.sorted(sortByLBDUD8)
				.findFirst().orElse(null);
		if(OBLNDPMTB != null){
			index_listLNDPMTB = inner.getListLNDPMTB().indexOf(OBLNDPMTB);
			
			Gson gson = CommonGsonParser.DEFAULT_GSON;
			String strObj = gson.toJson(OBLNDPMTB);
			LNDPMTB = gson.fromJson(strObj, LNDPMTB.class);
			
			foundLNDPMTB = true;
		}
		else {
			index_listLNDPMTB = inner.getListLNDPMTB().size();
			
			foundLNDPMTB = false;
		}

		LNDPMTB.setLbpmt8(ROLDT8);

		if(!foundLNDPMTB){
			if ((LNDEXCB.getXcpcod().compareTo(new BigDecimal("67")) != 0)) {
				LNDPMTB.setLbtamt(LNDBNOT.getLbctot());
				LNDPMTB.setLbprn(LNDBNOT.getLbcprn());
				LNDPMTB.setLbint(LNDBNOT.getLbcint());
				LNDPMTB.setLbmin(LNDBNOT.getLbcmin());
				LNDPMTB.setLbprf(LNDBNOT.getLbcprf());
				LNDPMTB.setLbref(LNDBNOT.getLbcref());
				LNDPMTB.setLbcom(LNDBNOT.getLbccom());
				LNDPMTB.setLblc(LNDBNOT.getLbclc());
				LNDPMTB.setLbcf(LNDBNOT.getLbccf());
				LNDPMTB.setLboc(LNDBNOT.getLbcoc());
				LNDPMTB.setLbmc(LNDBNOT.getLbcmc());
				LNDPMTB.setLbrin(LNDBNOT.getLbcrin());
				LNDPMTB.setLbrlc(LNDBNOT.getLbcrlc());
//				LNDPMTB.setLbrmid(LNDBNOT.getLbcid().trim());
				LNDPMTB.setLbrmid(" ");
				if (LNDPMTB.getLbmin().compareTo(BigDecimal.ZERO) > 0) 
				{
					//lndpmtb.Lbrmid/lndbnot.Lbcid is mora indicator use only
					LNDPMTB.setLbrmid("M");
				}
				
//				if (LNDPMTB.getLbrin().compareTo(BigDecimal.ZERO) == 0)  
//				{
//					LNDPMTB.setLbrmid(" ");
//				}

			} else {
				LNDPMTB.setLbtamt(BigDecimal.ZERO);
				LNDPMTB.setLbprn(BigDecimal.ZERO);
				LNDPMTB.setLbint(BigDecimal.ZERO);
				LNDPMTB.setLbprf(BigDecimal.ZERO);
				LNDPMTB.setLbref(BigDecimal.ZERO);
				LNDPMTB.setLbcom(BigDecimal.ZERO);
				LNDPMTB.setLblc(BigDecimal.ZERO);
				LNDPMTB.setLbcf(BigDecimal.ZERO);
				LNDPMTB.setLboc(BigDecimal.ZERO);
				LNDPMTB.setLbmc(BigDecimal.ZERO);
				LNDPMTB.setLbvat(BigDecimal.ZERO);
				LNDPMTB.setLbrin(BigDecimal.ZERO);
				LNDPMTB.setLbmin(BigDecimal.ZERO);
				LNDPMTB.setLbrlc(BigDecimal.ZERO);
				LNDPMTB.setLbrmid(" ");
			}

			LNDPMTB.setLbtamo(LNDBNOT.getLbctoto());
			LNDPMTB.setLbprno(LNDBNOT.getLbcprn());
			LNDPMTB.setLbinto(LNDBNOT.getLbcint());
			LNDPMTB.setLbmino(LNDBNOT.getLbcmin());

			// use LBCPRF instead of LBCPI9
//			if (inner.ISLACT.trim().equals("Y")) {
				LNDPMTB.setLbprfo(LNDBNOT.getLbcprf());
//			} else {
//				LNDPMTB.setLbprfo(LNDBNOT.getLbcpi9());
//			}

			LNDPMTB.setLbrefo(LNDBNOT.getLbcref());
			LNDPMTB.setLbcomo(LNDBNOT.getLbccom());
			LNDPMTB.setLblco(LNDBNOT.getLbclc());
			LNDPMTB.setLbcfo(LNDBNOT.getLbccf());
			LNDPMTB.setLboco(LNDBNOT.getLbcoco());
			LNDPMTB.setLbmco(LNDBNOT.getLbcmco());
			//			LNDPMTB.setLbrino(LNDPMTB.getLbrin());
			//			LNDPMTB.setLbrlco(LNDPMTB.getLbrlc());
			LNDPMTB.setLbrino(LNDBNOT.getLbcrin());
			LNDPMTB.setLbrlco(LNDBNOT.getLbcrlc());
			LNDPMTB.setLbspam(LNDBNOT.getLbcsam());
			LNDPMTB.setLbprno(LNDPMTB.getLbprno().add(WPRTPM));
			LNDPMTB.setLbinto(LNDPMTB.getLbinto().add(WINTAD));
			LNDPMTB.setLbmino(LNDPMTB.getLbmino().add(WINTADMI));
			LNDPMTB.setLbrino(LNDPMTB.getLbrino().add(WINTADRI));
			LNDPMTB.setLbrlco(LNDPMTB.getLbrlco().add(WINTADRL));
			LNDPMTB.setLblco(LNDPMTB.getLblco().add(WLCAD));

			LNDPMTB.setLbtamo(LNDPMTB.getLbtamo().add(WPRTPM));
			LNDPMTB.setLbtamo(LNDPMTB.getLbtamo().add(WINTAD));
			LNDPMTB.setLbtamo(LNDPMTB.getLbtamo().add(WINTADMI));
			LNDPMTB.setLbtamo(LNDPMTB.getLbtamo().add(WINTADRI));
			LNDPMTB.setLbtamo(LNDPMTB.getLbtamo().add(WINTADRL));
			LNDPMTB.setLbtamo(LNDPMTB.getLbtamo().add(WLCAD));
			LNDPMTB.setMnldt8(BigDecimal.ZERO);

			if (inner.getLNDMAST().getPmtcod().compareTo(BigDecimal.ZERO) == 0 
					&& !inner.getLNPPAR2().getPmtboa().trim().equals("Y")) 
			{
				LNDPMTB.setLbtamo(LNDPMTB.getLbtamo().subtract(LNDPMTB.getLbprno()));
				inner.getLNDMAST().setBilprn(inner.getLNDMAST().getBilprn().subtract(LNDPMTB.getLbprno()));
				LNDPMTB.setLbprno(LNDPMTB.getLbprno().subtract(WINTAD));
				LNDPMTB.setLbprno(LNDPMTB.getLbprno().subtract(WINTADMI));
				LNDPMTB.setLbprno(LNDPMTB.getLbprno().subtract(WINTADRI));

				if (LNDPMTB.getLbprno().compareTo(BigDecimal.ZERO) < 0) 
				{
					LNDPMTB.setLbprno(BigDecimal.ZERO);
				}

				LNDPMTB.setLbtamo(LNDPMTB.getLbtamo().add(LNDPMTB.getLbprno()));
				inner.getLNDMAST().setBilprn(inner.getLNDMAST().getBilprn().add(LNDPMTB.getLbprno()));
				if (LNDPMTB.getLbprn().compareTo(LNDPMTB.getLbprno()) > 0) 
				{
					LNDPMTB.setLbtamt(LNDPMTB.getLbtamt().subtract(LNDPMTB.getLbprn()));
					LNDPMTB.setLbprn(LNDPMTB.getLbprno());
					LNDPMTB.setLbtamt(LNDPMTB.getLbtamt().add(LNDPMTB.getLbprn()));
				}

			}

			if ((LNDEXCB.getXcpcod().compareTo(new BigDecimal("60")) == 0)
					|| (LNDEXCB.getXcpcod().compareTo(new BigDecimal("67")) == 0)) 
			{
				if (((LNDPMTB.getLbprno().compareTo(BigDecimal.ZERO) == 0)
						&& (LNDPMTB.getLbprn().compareTo(BigDecimal.ZERO) > 0) 
						&& (LNDEXCB.getXcpcod().compareTo(new BigDecimal("60")) == 0))
						|| ((LNDEXCB.getXcpcod().compareTo(new BigDecimal("60")) != 0)
								&& (LNDPMTB.getLbprno().compareTo(BigDecimal.ZERO) == 0) 
								&& (LNDEXCB.getSspdt8().compareTo(BigDecimal.ZERO) > 0))) 
				{
					if (inner.getLNDMAST().getAltsch().trim().equals("Y")) {
						if(foundLNDPSCH = true){
//						if(inner.getLNDPSCH()!=null){
//							if(inner.getLNDPSCH().getLpwsch().trim().equals("Y")){
//								LNDPMTB.setLbprno(inner.getLNDPSCH().getLpwprp());
//								LNDPMTB.setLbmino(inner.getLNDPSCH().getLpwmip());
//								LNDPMTB.setLbrino(inner.getLNDPSCH().getLpwrip());
//								LNDPMTB.setLbinto(inner.getLNDPSCH().getLpwipm());
//								LNDPMTB.setLbprno(inner.getLNDMAST().getPmtamt());
								LNDPMTB.setLbprno(PMTWPRN);
								LNDPMTB.setLbmino(PMTWMIN);
								LNDPMTB.setLbrino(PMTWRSI);
								LNDPMTB.setLbinto(PMTWINT);
								LNDPMTB.setLbprno(inner.getLNDMAST().getPmtamt());
//							}
//						}
						}
					}
					
					if(inner.getListLNDPMTF().size()==0){
						/** for GPP Mtd D or F, shud take billed profit as bill prin */
						if (inner.getLNDISLM().getLisge8().compareTo(LNDBNOT.getLbcdt8()) >= 0
								&& inner.getLNDISLM().getLisge8().compareTo(BigDecimal.ZERO) != 0
								&& inner.ISLACT.trim().equals("Y"))
						{
						} else {
							LNDPMTB.setLbprno(inner.getLNDMAST().getPmtamt());
						}
					} else {
						if(inner.getListLNDPMTF().size()>0){
							for(LNDPMTF LNDPMTF: inner.getListLNDPMTF()){
								if(LNDPMTF.getLnfdt8().compareTo(LNDEXCB.getSspdt8()) >= 0 
										&& LNDPMTF.getLnfdt8().compareTo(inner.getLNDMAST().getNpdt8()) <=0){
									LNDPMTB.setLbprno(LNDPMTF.getLnfnam());
								}
							}
						}
					}

					if ((inner.getLNDMAST().getPmtcod().compareTo(BigDecimal.ZERO) == 0)) 
					{
						LNDPMTB.setLbprno(LNDPMTB.getLbprno().subtract(LNDBNOT.getLbcint()));
						if (((inner.getLNDMAST().getWrkbli().compareTo(BigDecimal.ZERO) < 0) 
								&& inner.getLNPPAR2().getPmtboa().trim().equals("N"))) 
						{
							LNDPMTB.setLbprno(LNDPMTB.getLbprno().add(inner.getLNDMAST().getWrkbli()));
							LNDPMTB.setLbinto(LNDPMTB.getLbinto().subtract(inner.getLNDMAST().getWrkbli()));
							LNDPMTB.setLbtamo(LNDPMTB.getLbtamo().subtract(inner.getLNDMAST().getWrkbli()));
							if ((LNDPMTB.getLbinto().compareTo(BigDecimal.ZERO) < 0)) 
							{
								LNDPMTB.setLbtamo(LNDPMTB.getLbtamo().subtract(LNDPMTB.getLbinto()));
								LNDPMTB.setLbinto(BigDecimal.ZERO);
							}

						}

						LNDPMTB.setLbprno(LNDPMTB.getLbprno().subtract(LNDBNOT.getLbcmin()));
						if (((inner.getLNDMAST().getWrkbmi().compareTo(BigDecimal.ZERO) < 0) 
								&& inner.getLNPPAR2().getPmtboa().trim().equals("N"))) 
						{

							LNDPMTB.setLbprno(LNDPMTB.getLbprno().add(inner.getLNDMAST().getWrkbmi()));
							LNDPMTB.setLbmino(LNDPMTB.getLbmino().subtract(inner.getLNDMAST().getWrkbmi()));
							LNDPMTB.setLbtamo(LNDPMTB.getLbtamo().subtract(inner.getLNDMAST().getWrkbmi()));
							if (LNDPMTB.getLbmino().compareTo(BigDecimal.ZERO) < 0) 
							{
								LNDPMTB.setLbtamo(LNDPMTB.getLbtamo().subtract(LNDPMTB.getLbmino()));
								LNDPMTB.setLbmino(BigDecimal.ZERO);
							}

						}

						LNDPMTB.setLbprno(LNDPMTB.getLbprno().subtract(LNDBNOT.getLbcrin()));
						if (((inner.getLNDMAST().getWrkbri().compareTo(BigDecimal.ZERO) < 0) 
								&& inner.getLNPPAR2().getPmtboa().trim().equals("N"))) 
						{
							LNDPMTB.setLbprno(LNDPMTB.getLbprno().add(inner.getLNDMAST().getWrkbri()));
							LNDPMTB.setLbrino(LNDPMTB.getLbrino().subtract(inner.getLNDMAST().getWrkbri()));
							LNDPMTB.setLbtamo(LNDPMTB.getLbtamo().subtract(inner.getLNDMAST().getWrkbri()));
							if ((LNDPMTB.getLbrino().compareTo(BigDecimal.ZERO) < 0)) {
								LNDPMTB.setLbtamo(LNDPMTB.getLbtamo().subtract(LNDPMTB.getLbrino()));
								LNDPMTB.setLbrino(BigDecimal.ZERO);
							}

						}

					}

					if (inner.ISLACT.trim().equals("Y")) {
						LNDPMTB.setLbprno(LNDPMTB.getLbprno().subtract(LNDBNOT.getLbcprf()));
					}

					if ((LNDPMTB.getLbprno().compareTo(BigDecimal.ZERO) < 0)) {
						LNDPMTB.setLbprno(BigDecimal.ZERO);
					}
					
					LNDPMTB.setLbtamo(LNDPMTB.getLbtamo().add(LNDPMTB.getLbprno()));
				}

			}

//removed this condition to offset wrkblp and lbprn
//						&& inner.getLNPPAR2().getPadvpm().trim().equals("Y") 
			if (((LNDPMTB.getLbprn().compareTo(BigDecimal.ZERO) > 0)
					&& (inner.getLNDMAST().getWrkblp().compareTo(BigDecimal.ZERO) < 0))) {
				LNDPMTB.setLbtamt(LNDPMTB.getLbtamt().subtract(LNDPMTB.getLbprn()));
				inner.getLNDMAST().setBilprn(inner.getLNDMAST().getBilprn().subtract(LNDPMTB.getLbprn()));
				WRKAMT = inner.getLNDMAST().getWrkblp().multiply(new BigDecimal("-1"));
				if ((LNDPMTB.getLbprn().compareTo(WRKAMT) > 0)) {
					LNDPMTB.setLbprn(LNDPMTB.getLbprn().subtract(WRKAMT));
					LNDBNOT.setLbcprn(LNDBNOT.getLbcprn().subtract(WRKAMT));
				} else {
					LNDPMTB.setLbprn(BigDecimal.ZERO);
					LNDBNOT.setLbcprn(BigDecimal.ZERO);
				}

				LNDPMTB.setLbtamt(LNDPMTB.getLbtamt().add(LNDPMTB.getLbprn()));
				inner.getLNDMAST().setBilprn(inner.getLNDMAST().getBilprn().add(LNDPMTB.getLbprn()));
			}

			inner.getLNDMAST().setWrkbli(inner.getLNDMAST().getWrkbli().add(LNDPMTB.getLbinto()));
			inner.getLNDMAST().setWrkbmi(inner.getLNDMAST().getWrkbmi().add(LNDPMTB.getLbmino()));
			inner.getLNDMAST().setWrkbri(inner.getLNDMAST().getWrkbri().add(LNDPMTB.getLbrino()));
			inner.getLNDMAST().setWrkbrl(inner.getLNDMAST().getWrkbrl().add(LNDPMTB.getLbrlco()));
			inner.getLNDMAST().setWrkblp(inner.getLNDMAST().getWrkblp().add(LNDPMTB.getLbprno()));
			inner.getLNDMAST().setWrkblc(inner.getLNDMAST().getWrkblc().add(LNDPMTB.getLblco()));
			inner.getLNDMAST().setWrkbcf(inner.getLNDMAST().getWrkbcf().add(LNDPMTB.getLbcfo()));
			//System.out.println(inner.List_LNDPMTB().get(index_lndpmtb).getBigDecimal("LBTAMO"));
			//System.out.println(inner.List_LNDPMTB().get(index_lndpmtb).getBigDecimal("LBPRFO"));
			if ((LNDPMTB.getLbtamo().compareTo(BigDecimal.ZERO) != 0)
					|| (LNDPMTB.getLbprfo().compareTo(BigDecimal.ZERO) != 0)
					|| (inner.ODTYPE.trim().equals("C") 
							&& (LNDPMTB.getLbrefo().compareTo(BigDecimal.ZERO) > 0))) 
			{
				//lbcid is for mora indicator use only 
//				if (!LNDBNOT.getLbcid().trim().equals("M")) {
//					LNDPMTB.setLbrin(BigDecimal.ZERO);
//					LNDPMTB.setLbrino(BigDecimal.ZERO);
//					LNDPMTB.setLbrlc(BigDecimal.ZERO);
//					LNDPMTB.setLbrlco(BigDecimal.ZERO);
//				}

				LNDPMTB.setLbcrd8(inner.LL1PD8);
				LNDPMTB.setMncuid(WMNUID.trim());
				LNDPMTB.setMncwid(WMNWID.trim());
				LNDPMTB.setMnlsrc(WMNWID.trim());
				LNDPMTB.setMncsrc(WMNWID.trim());
				LNDPMTB.setMncdt8(inner.LL1PD8);
				LNDPMTB.setMnctim(Timestamp.valueOf(SVXDateTimeFormatUtil.formatCurrentTimeStamp()));

				LNDPMTB.setLbtamf(LNDPMTB.getLbtamo());
				LNDPMTB.setLbprnf(LNDPMTB.getLbprno());
				LNDPMTB.setLbintf(LNDPMTB.getLbinto());
				LNDPMTB.setLbprff(LNDPMTB.getLbprfo());
				LNDPMTB.setLbreff(LNDPMTB.getLbrefo());
				LNDPMTB.setLbcomf(LNDPMTB.getLbcomo());
				LNDPMTB.setLblcf(LNDPMTB.getLblco());
				LNDPMTB.setLbcff(LNDPMTB.getLbcfo());
				LNDPMTB.setLbocf(LNDPMTB.getLboco());
				LNDPMTB.setLbmcf(LNDPMTB.getLbmco());
				LNDPMTB.setLbreff(LNDPMTB.getLbrefo());
				LNDPMTB.setLbprff(LNDPMTB.getLbprfo());
				LNDPMTB.setLbcomf(LNDPMTB.getLbcomo());
				LNDPMTB.setLbrinf(LNDPMTB.getLbrino());
				LNDPMTB.setLbrlcf(LNDPMTB.getLbrlco());
				LNDPMTB.setLbminf(LNDPMTB.getLbmino());
				if(inner.getLNDMAST().getPmtcod().compareTo(new BigDecimal("8")) == 0)
					inner.getLNDMAST().setPmtamt(LNDPMTB.getLbtamt());

				// temporary removed as LNHPMS not used
				//				if (inner.HPCODE.trim().equals("Y")) {
				//					LNDPMTB.setLbvato(BigDecimal.ZERO);
				//					LNDPMTB.setLbvat(BigDecimal.ZERO);
				//					genvatbl();
				//				}

				Gson gson = CommonGsonParser.DEFAULT_GSON;
				String strObj = gson.toJson(LNDPMTB);
				LNDPMTB WLNDPMTB = gson.fromJson(strObj, LNDPMTB.class);
				
				inner.getListLNDPMTB().add(WLNDPMTB);
				inner.write_LNDPMTB(inner.getListLNDPMTB().get(index_listLNDPMTB));
			}

		} else {

			SLBPRN = LNDPMTB.getLbprno();
			SLBINT = LNDPMTB.getLbinto();
			SLBMIN = LNDPMTB.getLbmino();
			SLBLC  = LNDPMTB.getLblco();
			SLBCF  = LNDPMTB.getLbcfo();
			SLBRIN = LNDPMTB.getLbrino();
			SLBRLC = LNDPMTB.getLbrlco();

			if (LNDBNOT.getMatcod().trim().equals("M")) {
				if (inner.getLNPPAR2().getPcapmt().trim().equals("Y")
						|| inner.getLNPPAR2().getPcapnp().trim().equals("Y")) {
					LNDBNOT.setLbctot(LNDBNOT.getLbctot().subtract(LNDPMTB.getLbint()));
				}

			}

			if ((LNDEXCB.getXcpcod().compareTo(new BigDecimal("67")) != 0)) 
			{
				LNDPMTB.setLbtamt(LNDPMTB.getLbtamt().add(LNDBNOT.getLbctot()));
				LNDPMTB.setLbprn(LNDPMTB.getLbprn().add(LNDBNOT.getLbcprn()));
				LNDPMTB.setLbint(LNDPMTB.getLbint().add(LNDBNOT.getLbcint()));
				LNDPMTB.setLbprf(LNDPMTB.getLbprf().add(LNDBNOT.getLbcprf()));
				LNDPMTB.setLbref(LNDPMTB.getLbref().add(LNDBNOT.getLbcref()));
				LNDPMTB.setLbcom(LNDPMTB.getLbcom().add(LNDBNOT.getLbccom()));
				if (LNDBNOT.getMatcod().trim().equals("M")) {
					if (inner.getLNPPAR2().getPcapmt().trim().equals("Y")
							|| inner.getLNPPAR2().getPcapnp().trim().equals("Y")) 
					{
						LNDPMTB.setLbint(LNDBNOT.getLbcint());
					}

				}

				LNDPMTB.setLblc(LNDPMTB.getLblc().add(LNDBNOT.getLbclc()));
				LNDPMTB.setLbcf(LNDPMTB.getLbcf().add(LNDBNOT.getLbccf()));
				LNDPMTB.setLboc(LNDPMTB.getLboc().add(LNDBNOT.getLbcoc()));
				LNDPMTB.setLbmc(LNDPMTB.getLbmc().add(LNDBNOT.getLbcmc()));
				LNDPMTB.setLbrin(LNDPMTB.getLbrin().add(LNDBNOT.getLbcrin()));
				LNDPMTB.setLbrlc(LNDPMTB.getLbrlc().add(LNDBNOT.getLbcrlc()));
				LNDPMTB.setLbmin(LNDPMTB.getLbmin().add(LNDBNOT.getLbcmin()));
				if (LNDPMTB.getLbrmid().trim().equals("")) 
				{ 
					if (LNDPMTB.getLbmin().compareTo(BigDecimal.ZERO) > 0) 
					{
						//lndpmtb.Lbrmid/lndbnot.Lbcid is mora indicator use only
						LNDPMTB.setLbrmid(LNDBNOT.getLbcid().trim());
					}
//					LNDPMTB.setLbrmid(LNDBNOT.getLbcid().trim());
				}

			} else {
				if ((LNDPMTB.getLbprno().compareTo(BigDecimal.ZERO) == 0)) 
				{
					LNDPMTB.setLbprno(inner.getLNDMAST().getPmtamt());
					LNDPMTB.setLbtamo(LNDPMTB.getLbtamo().add(inner.getLNDMAST().getPmtamt()));
				}

			}

			LNDPMTB.setLbtamo(LNDPMTB.getLbtamo().add(LNDBNOT.getLbctot()));
			LNDPMTB.setLbprno(LNDPMTB.getLbprno().add(LNDBNOT.getLbcprn()));
			LNDPMTB.setLbinto(LNDPMTB.getLbinto().add(LNDBNOT.getLbcint()));
			LNDPMTB.setLbmino(LNDPMTB.getLbmino().add(LNDBNOT.getLbcmin()));

//			if (inner.ISLACT.trim().equals("Y")) 
//			{
				LNDPMTB.setLbprfo(LNDPMTB.getLbprfo().add(LNDBNOT.getLbcprf()));
//			} else {
//				LNDPMTB.setLbprfo(LNDPMTB.getLbprfo().add(LNDBNOT.getLbcpi9()));
//			}

			LNDPMTB.setLbrefo(LNDPMTB.getLbrefo().add(LNDBNOT.getLbcref()));
			LNDPMTB.setLbcomo(LNDPMTB.getLbcomo().add(LNDBNOT.getLbccom()));
			if (LNDBNOT.getMatcod().trim().equals("M")) 
			{
				if (inner.getLNPPAR2().getPcapmt().trim().equals("Y")
						|| inner.getLNPPAR2().getPcapnp().trim().equals("Y")) 
				{
					LNDPMTB.setLbinto(LNDBNOT.getLbcint());
				}

			}

			LNDPMTB.setLblco(LNDPMTB.getLblco().add(LNDBNOT.getLbclc()));
			LNDPMTB.setLbcfo(LNDPMTB.getLbcfo().add(LNDBNOT.getLbccf()));
			LNDPMTB.setLboco(LNDPMTB.getLboco().add(LNDBNOT.getLbcoc()));
			LNDPMTB.setLbmco(LNDPMTB.getLbmco().add(LNDBNOT.getLbcmc()));
			LNDPMTB.setLbrino(LNDPMTB.getLbrino().add(LNDBNOT.getLbcrin()));
			LNDPMTB.setLbrlco(LNDPMTB.getLbrlco().add(LNDBNOT.getLbcrlc()));

			if ((LNDEXCB.getXcpcod().compareTo(new BigDecimal("60")) == 0)
					|| (LNDEXCB.getXcpcod().compareTo(new BigDecimal("63")) == 0)) 
			{
				LNDPMTB.setLbspam(LNDBNOT.getLbcsam());
			}

			LNDPMTB.setLbprno(LNDPMTB.getLbprno().add(WPRTPM));
			LNDPMTB.setLbtamo(LNDPMTB.getLbtamo().add(WPRTPM));
			LNDPMTB.setLbinto(LNDPMTB.getLbinto().add(WINTAD));
			LNDPMTB.setLbmino(LNDPMTB.getLbmino().add(WINTADMI));
			LNDPMTB.setLbrino(LNDPMTB.getLbrino().add(WINTADRI));
			LNDPMTB.setLbrlco(LNDPMTB.getLbrlco().add(WINTADRL));
			LNDPMTB.setLbtamo(LNDPMTB.getLbtamo().add(WINTAD));
			LNDPMTB.setLbtamo(LNDPMTB.getLbtamo().add(WINTADMI));
			LNDPMTB.setLbtamo(LNDPMTB.getLbtamo().add(WINTADRI));
			LNDPMTB.setLbtamo(LNDPMTB.getLbtamo().add(WINTADRL));
			LNDPMTB.setLbtamo(LNDPMTB.getLbtamo().add(WLCAD));
			LNDPMTB.setLblco(LNDPMTB.getLblco().add(WLCAD));

			if ((!inner.getLNPPAR2().getPmtboa().trim().equals("Y") 
					&& (inner.getLNDMAST().getPmtcod().compareTo(BigDecimal.ZERO) == 0))) 
			{
				LNDPMTB.setLbtamo(LNDPMTB.getLbtamo().subtract(LNDPMTB.getLbprno()));
				LNDPMTB.setLbprno(LNDPMTB.getLbprno().subtract(WINTAD));
				LNDPMTB.setLbprno(LNDPMTB.getLbprno().subtract(WINTADMI));
				LNDPMTB.setLbprno(LNDPMTB.getLbprno().subtract(WINTADRI));

				if ((LNDPMTB.getLbprno().compareTo(BigDecimal.ZERO) < 0)) 
				{
					LNDPMTB.setLbprno(BigDecimal.ZERO);
				}

				LNDPMTB.setLbtamo(LNDPMTB.getLbtamo().add(LNDPMTB.getLbprno()));
				if ((LNDPMTB.getLbprn().compareTo(LNDPMTB.getLbprno()) > 0)) 
				{
					LNDPMTB.setLbtamt(LNDPMTB.getLbtamt().subtract(LNDPMTB.getLbprn()));
					LNDPMTB.setLbprn(LNDPMTB.getLbprno());
					LNDPMTB.setLbtamt(LNDPMTB.getLbtamt().add(LNDPMTB.getLbprn()));
				}

			}

			if ((LNDEXCB.getXcpcod().compareTo(new BigDecimal("60")) == 0)
					|| (LNDEXCB.getXcpcod().compareTo(new BigDecimal("67")) == 0)) 
			{
				if (((LNDPMTB.getLbprno().compareTo(BigDecimal.ZERO) == 0)
						&& (LNDPMTB.getLbprn().compareTo(BigDecimal.ZERO) > 0)
						&& (LNDEXCB.getSspdt8().compareTo(BigDecimal.ZERO) > 0) 
						&& (LNDEXCB.getXcpcod().compareTo(new BigDecimal("60")) == 0))
						|| ((LNDEXCB.getXcpcod().compareTo(new BigDecimal("60")) != 0)
								&& (LNDPMTB.getLbprno().compareTo(BigDecimal.ZERO) == 0) 
								&& (LNDEXCB.getSspdt8().compareTo(BigDecimal.ZERO) > 0))) 
				{


					if(inner.getListLNDPMTF().size()>0){

						LNDPMTB.setLbprno(inner.getLNDMAST().getPmtamt());

						for(LNDPMTF LNDPMTF: inner.getListLNDPMTF()){
							if(LNDPMTF.getLnfdt8().compareTo(LNDEXCB.getSspdt8()) >= 0 
									&& LNDPMTF.getLnfdt8().compareTo(inner.getLNDMAST().getNpdt8()) <=0){
								LNDPMTB.setLbprno(LNDPMTF.getLnfnam());
							}
						}
					}else{
						if (((inner.getLNDISLM().getLisge8().compareTo(LNDBNOT.getLbcdt8())) >= 0)
								&& inner.getLNDISLM().getLisge8().compareTo(BigDecimal.ZERO) != 0
								&& inner.ISLACT.trim().equals("Y"))
						{
						} else {
							LNDPMTB.setLbprno(inner.getLNDMAST().getPmtamt());
						}
					}
					if ((inner.getLNDMAST().getPmtcod().compareTo(BigDecimal.ZERO) == 0)) 
					{
						LNDPMTB.setLbprno(LNDPMTB.getLbprno().subtract(LNDBNOT.getLbcint()));
						if (((inner.getLNDMAST().getWrkbli().compareTo(BigDecimal.ZERO) < 0) 
								&& inner.getLNPPAR2().getPmtboa().trim().equals("N"))) 
						{
							LNDPMTB.setLbprno(LNDPMTB.getLbprno().add(inner.getLNDMAST().getWrkbli()));
							LNDPMTB.setLbinto(LNDPMTB.getLbinto().subtract(inner.getLNDMAST().getWrkbli()));
							LNDPMTB.setLbtamo(LNDPMTB.getLbtamo().subtract(inner.getLNDMAST().getWrkbli()));
							if ((LNDPMTB.getLbinto().compareTo(BigDecimal.ZERO) < 0)) 
							{
								LNDPMTB.setLbtamo(LNDPMTB.getLbtamo().subtract(LNDPMTB.getLbinto()));
								LNDPMTB.setLbinto(BigDecimal.ZERO);
							}

						}

						LNDPMTB.setLbprno(LNDPMTB.getLbprno().subtract(LNDBNOT.getLbcmin()));
						if (((inner.getLNDMAST().getWrkbmi().compareTo(BigDecimal.ZERO) < 0) 
								&& inner.getLNPPAR2().getPmtboa().trim().equals("N"))) 
						{
							LNDPMTB.setLbprno(LNDPMTB.getLbprno().add(inner.getLNDMAST().getWrkbmi()));
							LNDPMTB.setLbmino(LNDPMTB.getLbmino().subtract(inner.getLNDMAST().getWrkbmi()));
							LNDPMTB.setLbtamo(LNDPMTB.getLbtamo().subtract(inner.getLNDMAST().getWrkbmi()));
							if ((LNDPMTB.getLbmino().compareTo(BigDecimal.ZERO) < 0)) 
							{
								LNDPMTB.setLbtamo(LNDPMTB.getLbtamo().subtract(LNDPMTB.getLbmino()));
								LNDPMTB.setLbmino(BigDecimal.ZERO);
							}

						}

						LNDPMTB.setLbprno(LNDPMTB.getLbprno().subtract(LNDBNOT.getLbcrin()));
						if (((inner.getLNDMAST().getWrkbri().compareTo(BigDecimal.ZERO) < 0) 
								&& inner.getLNPPAR2().getPmtboa().trim().equals("N"))) 
						{
							LNDPMTB.setLbprno(LNDPMTB.getLbprno().add(inner.getLNDMAST().getWrkbri()));
							LNDPMTB.setLbrino(LNDPMTB.getLbrino().subtract(inner.getLNDMAST().getWrkbri()));
							LNDPMTB.setLbtamo(LNDPMTB.getLbtamo().subtract(inner.getLNDMAST().getWrkbri()));
							if ((LNDPMTB.getLbrino().compareTo(BigDecimal.ZERO) < 0)) 
							{
								LNDPMTB.setLbtamo(LNDPMTB.getLbtamo().subtract(LNDPMTB.getLbrino()));
								LNDPMTB.setLbrino(BigDecimal.ZERO);
							}

						}

					}

					if (inner.ISLACT.trim().equals("Y")) {
						LNDPMTB.setLbprno(LNDPMTB.getLbprno().subtract(LNDBNOT.getLbcprf()));
					}

					if ((LNDPMTB.getLbprno().compareTo(BigDecimal.ZERO) < 0)) 
					{
						LNDPMTB.setLbprno(BigDecimal.ZERO);
					}

					LNDPMTB.setLbtamo(LNDPMTB.getLbtamo().add(LNDPMTB.getLbprno()));
				}

			}

			if (LNDBNOT.getLbcprn().compareTo(BigDecimal.ZERO) > 0
					&& inner.getLNPPAR2().getPadvpm().trim().equals("Y") 
					&& inner.getLNDMAST().getWrkblp().compareTo(BigDecimal.ZERO) < 0) 
			{
				LNDPMTB.setLbtamt(LNDPMTB.getLbtamt().subtract(LNDPMTB.getLbprn()));
				inner.getLNDMAST().setBilprn(inner.getLNDMAST().getBilprn().subtract(LNDPMTB.getLbprn()));

				WRKAMT = inner.getLNDMAST().getWrkblp().multiply(new BigDecimal("-1"));
				if ((LNDBNOT.getLbcprn().compareTo(WRKAMT) > 0)) 
				{
					LNDPMTB.setLbprn(LNDPMTB.getLbprn().subtract(WRKAMT));
					LNDBNOT.setLbcprn(LNDBNOT.getLbcprn().subtract(WRKAMT));
				} else {
					LNDPMTB.setLbprn(LNDPMTB.getLbprn().subtract(LNDBNOT.getLbcprn()));
					LNDBNOT.setLbcprn(BigDecimal.ZERO);
				}

				LNDPMTB.setLbtamt(LNDPMTB.getLbtamt().add(LNDPMTB.getLbprn()));
				inner.getLNDMAST().setBilprn(inner.getLNDMAST().getBilprn().add(LNDPMTB.getLbprn()));
			}

			inner.getLNDMAST().setWrkbli(inner.getLNDMAST().getWrkbli().subtract(SLBINT));
			inner.getLNDMAST().setWrkbmi(inner.getLNDMAST().getWrkbmi().subtract(SLBMIN));
			inner.getLNDMAST().setWrkblp(inner.getLNDMAST().getWrkblp().subtract(SLBPRN));
			inner.getLNDMAST().setWrkblc(inner.getLNDMAST().getWrkblc().subtract(SLBLC));
			inner.getLNDMAST().setWrkbcf(inner.getLNDMAST().getWrkbcf().subtract(SLBCF));
			inner.getLNDMAST().setWrkbri(inner.getLNDMAST().getWrkbri().subtract(SLBRIN));
			inner.getLNDMAST().setWrkbrl(inner.getLNDMAST().getWrkbrl().subtract(SLBRLC));
			inner.getLNDMAST().setWrkbli(inner.getLNDMAST().getWrkbli().add(LNDPMTB.getLbinto()));
			inner.getLNDMAST().setWrkbmi(inner.getLNDMAST().getWrkbmi().add(LNDPMTB.getLbmino()));
			inner.getLNDMAST().setWrkblp(inner.getLNDMAST().getWrkblp().add(LNDPMTB.getLbprno()));
			inner.getLNDMAST().setWrkblc(inner.getLNDMAST().getWrkblc().add(LNDPMTB.getLblco()));
			inner.getLNDMAST().setWrkbcf(inner.getLNDMAST().getWrkbcf().add(LNDPMTB.getLbcfo()));
			inner.getLNDMAST().setWrkbri(inner.getLNDMAST().getWrkbri().add(LNDPMTB.getLbrino()));
			inner.getLNDMAST().setWrkbrl(inner.getLNDMAST().getWrkbrl().add(LNDPMTB.getLbrlco()));

			if ((inner.getLNDMAST().getWrkblp().compareTo(inner.getLNDMAST().getBilprn()) > 0)) 
			{
				inner.getLNDMAST().setWrkblp(inner.getLNDMAST().getBilprn());
			}

			if ((inner.getLNDMAST().getWrkbli().compareTo(inner.getLNDMAST().getBilint()) > 0)) 
			{
				inner.getLNDMAST().setWrkbli(inner.getLNDMAST().getBilint());
			}

			if ((inner.getLNDMAST().getWrkbmi().compareTo(inner.getLNDMAST().getBilmin()) > 0)) 
			{
				inner.getLNDMAST().setWrkbmi(inner.getLNDMAST().getBilmin());
			}

			if ((inner.getLNDMAST().getWrkblc().compareTo(inner.getLNDMAST().getBillc()) > 0)) 
			{
				inner.getLNDMAST().setWrkblc(inner.getLNDMAST().getBillc());
			}

			if (inner.getLNDMAST().getWrkbcf().compareTo(inner.getLNDMAST().getBilcf()) > 0) 
			{
				inner.getLNDMAST().setWrkbcf(inner.getLNDMAST().getBilcf());
			}

			if (inner.getLNDMAST().getWrkbri().compareTo(inner.getLNDMAST().getBilrin()) > 0) 
			{
				inner.getLNDMAST().setWrkbri(inner.getLNDMAST().getBilrin());
			}

			if ((inner.getLNDMAST().getWrkbrl().compareTo(inner.getLNDMAST().getBilrlc()) > 0)) 
			{
				inner.getLNDMAST().setWrkbrl(inner.getLNDMAST().getBilrlc());
			}

			if ((LNDEXCB.getXcpcod().compareTo(new BigDecimal("63")) == 0)) 
			{
				if ((LNDPMTB.getLbintf().compareTo(BigDecimal.ZERO) != 0)) 
				{
					LNDPMTB.setLbtamf(LNDPMTB.getLbtamf().subtract(LNDPMTB.getLbintf()));
				}
				LNDPMTB.setLbintf(LNDPMTB.getLbinto());
				LNDPMTB.setLbtamf(LNDPMTB.getLbtamf().add(LNDPMTB.getLbintf()));
			}
			if(inner.getLNDMAST().getPmtcod().compareTo(new BigDecimal("8")) == 0)
				inner.getLNDMAST().setPmtamt(LNDPMTB.getLbtamt());
			
			LNDPMTB.setMnluid(WMNUID.trim());
			LNDPMTB.setMnlwid(WMNWID.trim());
			LNDPMTB.setMnldt8(inner.LL1PD8);
			LNDPMTB.setMnlsrc(WMNWID.trim());
			LNDPMTB.setMnltim(Timestamp.valueOf(SVXDateTimeFormatUtil.formatCurrentTimeStamp()));

			//			if (HPCODE.trim().equals("Y")) {
			//				genvatbl();
			//
			//			}
			
			Gson gson = CommonGsonParser.DEFAULT_GSON;
			String strObj = gson.toJson(LNDPMTB);
			LNDPMTB WLNDPMTB = gson.fromJson(strObj, LNDPMTB.class);
			
			inner.getListLNDPMTB().set(inner.getListLNDPMTB().indexOf(OBLNDPMTB), WLNDPMTB);
			
			inner.update_LNDPMTB(LNDPMTB);
		}

		//reset to 0 during EOD after billing/Statement generation.
		if(inner.getLNDMAST().getSpramt().compareTo(BigDecimal.ZERO) > 0)
			inner.getLNDMAST().setSpramt(BigDecimal.ZERO);
		
		return LNDPMTB;
	}
	
	//*************************************************************************
	//* GENHIS SUBR - Generate history record for billing due tomorrow         
	//*************************************************************************
	public void genhis(IO inner, LNDPMTB LNDPMTB,
			String LNPTYP,String JDCURR,BigDecimal PMNCTIM6,String PBATCH,String LPZCSH,
			String PMNCUID,String PMNCWID,BigDecimal PMNCDT8,String PMNCSRC,String PPSPGM, BigDecimal LBDUD8) throws Exception{
		String GEN496= ""; 
		String GEN494= "";
		String GEN492= "";
		String GEN499= "";
		String GEN488= "";
		BigDecimal SEQN8 = BigDecimal.ZERO;
		
		//Roll 1 day be4 billing due date
		BigDecimal ROLDT8 = LNDPMTB.getLbdud8();
		BigDecimal ROLTRM = new BigDecimal("-1");
		BigDecimal ROLDAY = BigDecimal.ZERO;
		
		ROLDT8 = CommonDateAdvanceByTerm.advanceDay(ROLDT8, ROLTRM);
		
		inner.getLNDFTRNI().setLhpst8(ROLDT8);
		
		BigDecimal LHPST8 = inner.getLNDFTRNI().getLhpst8();
		
		//Transaction Code 496
		inner.getLNDFTRNI().setLhtran(new BigDecimal("496"));
		BigDecimal LHTRAN = inner.getLNDFTRNI().getLhtran();
		
		Optional<LNDHIST> optLNDHIST;
		optLNDHIST = inner.getListLNDHIST().stream()
				.filter(i -> ((LNDHIST) i).getLhpst8().compareTo(LHPST8)==0).filter(i -> ((LNDHIST) i).getLhtran().compareTo(LHTRAN)==0)
				.findAny();
		
		if(optLNDHIST.isPresent()){
			GEN496= "Y";
		}
		
		//Transaction Code 494 - *DR LATE CHARGE BILLED
		inner.getLNDFTRNI().setLhtran(new BigDecimal("494"));
		BigDecimal LHTRAN2 = inner.getLNDFTRNI().getLhtran();
		
		Optional<LNDHIST> optLNDHIST2;
		optLNDHIST2 = inner.getListLNDHIST().stream()
				.filter(i -> ((LNDHIST) i).getLhpst8().compareTo(LHPST8)==0).filter(i -> ((LNDHIST) i).getLhtran().compareTo(LHTRAN2)==0)
				.findAny();
		
		if(optLNDHIST2.isPresent()){
			GEN494= "Y";
		}
		
		//Transaction Code 492 - *DR COMMITMENT FEE BILLED
		inner.getLNDFTRNI().setLhtran(new BigDecimal("492"));
		BigDecimal LHTRAN3 = inner.getLNDFTRNI().getLhtran();
		
		Optional<LNDHIST> optLNDHIST3;
		optLNDHIST3 = inner.getListLNDHIST().stream()
				.filter(i -> ((LNDHIST) i).getLhpst8().compareTo(LHPST8)==0).filter(i -> ((LNDHIST) i).getLhtran().compareTo(LHTRAN3)==0)
				.findAny();
		
		if(optLNDHIST3.isPresent()){
			GEN492= "Y";
		}
		
		//Transaction Code 499 - *DR PROFIT ACCRUED EARNEDD
		inner.getLNDFTRNI().setLhtran(new BigDecimal("499"));
		BigDecimal LHTRAN4 = inner.getLNDFTRNI().getLhtran();
		
		Optional<LNDHIST> optLNDHIST4;
		optLNDHIST4 = inner.getListLNDHIST().stream()
				.filter(i -> ((LNDHIST) i).getLhpst8().compareTo(LHPST8)==0).filter(i -> ((LNDHIST) i).getLhtran().compareTo(LHTRAN4)==0)
				.findAny();
		
		if(optLNDHIST4.isPresent()){
			GEN499= "Y";
		}
		
		//Transaction Code 488 - *DR BILLED MORATORIUM ACCRUED INTEREST
		inner.getLNDFTRNI().setLhtran(new BigDecimal("488"));
		BigDecimal LHTRAN5 = inner.getLNDFTRNI().getLhtran();
		
		Optional<LNDHIST> optLNDHIST5;
		optLNDHIST5 = inner.getListLNDHIST().stream()
				.filter(i -> ((LNDHIST) i).getLhpst8().compareTo(LHPST8)==0).filter(i -> ((LNDHIST) i).getLhtran().compareTo(LHTRAN5)==0)
				.findAny();
		
		if(optLNDHIST5.isPresent()){
			GEN488= "Y";
		}
		
		if(LNDPMTB.getLbint().compareTo(BigDecimal.ZERO) != 0 && !GEN496.trim().equals("Y")){
			inner.getLNDFTRNI().setLhamt(LNDPMTB.getLbint());
			inner.getLNDMSTS().setYtdidb(inner.getLNDMSTS().getYtdidb().add(inner.getLNDFTRNI().getLhamt()));
			inner.getLNDMSTS().setLtdidb(inner.getLNDMSTS().getLtdidb().add(inner.getLNDFTRNI().getLhamt()));
			inner.getLNDMSTS().setMtdidb(inner.getLNDMSTS().getMtdidb().add(inner.getLNDFTRNI().getLhamt()));
			SEQN8 = SEQN8.add(BigDecimal.ONE);
			cltrnl(inner, PPSPGM, SEQN8);

			inner.getLNDFTRNI().setLhtran(new BigDecimal("496")); //*DR INTEREST BILLED
			inner.getLNDFTRNI().setLhdorc("D");
			inner.getLNDFTRNI().setLhafft("N");
			inner.getLNDFTRNI().setLhttyp("DB");
			inner.getLNDFTRNI().setLhafnp("N");
			inner.getLNDFTRNI().setLhseqn(SEQN8);
			inner.getLNDFTRNI().setLhaxtc("LNF13302");
			
			LoansUpdateTransactionHistory objLoansUpdateTransactionHistory = new LoansUpdateTransactionHistory();
			LoansUpdateTransactionHistory.IO LoansUpdateTransactionHistoryIO = objLoansUpdateTransactionHistory.new IO();
			LoansUpdateTransactionHistoryIO.setOB(inner);
			objLoansUpdateTransactionHistory.updateTransactionHistory(LoansUpdateTransactionHistoryIO, "", inner.LL1PD8, inner.LL1NB8, 
					JDCURR, PMNCTIM6, PBATCH, LPZCSH, PMNCUID, PMNCWID, PMNCDT8, PMNCSRC, PPSPGM, LBDUD8);
		}
		
		if(LNDPMTB.getLblc().compareTo(BigDecimal.ZERO) != 0 && !GEN494.trim().equals("Y")){
			inner.getLNDFTRNI().setLhamt(LNDPMTB.getLblc());
			inner.getLNDMSTS().setYtdldb(inner.getLNDMSTS().getYtdldb().add(inner.getLNDFTRNI().getLhamt()));
			inner.getLNDMSTS().setLtdldb(inner.getLNDMSTS().getLtdldb().add(inner.getLNDFTRNI().getLhamt()));
			inner.getLNDMSTS().setMtdldb(inner.getLNDMSTS().getMtdldb().add(inner.getLNDFTRNI().getLhamt()));
			SEQN8 = SEQN8.add(BigDecimal.ONE);
			cltrnl(inner, PPSPGM, SEQN8);

			inner.getLNDFTRNI().setLhtran(new BigDecimal("494"));//*DR LATE CHARGE BILLED
			inner.getLNDFTRNI().setLhdorc("D");
			inner.getLNDFTRNI().setLhafft("N");
			inner.getLNDFTRNI().setLhttyp("DB");
			inner.getLNDFTRNI().setLhafnp("N");
			inner.getLNDFTRNI().setLhseqn(SEQN8);
			inner.getLNDFTRNI().setLhaxtc("LNF13303");

			LoansUpdateTransactionHistory objLoansUpdateTransactionHistory = new LoansUpdateTransactionHistory();
			LoansUpdateTransactionHistory.IO LoansUpdateTransactionHistoryIO = objLoansUpdateTransactionHistory.new IO();
			LoansUpdateTransactionHistoryIO.setOB(inner);
			objLoansUpdateTransactionHistory.updateTransactionHistory(LoansUpdateTransactionHistoryIO, "", inner.LL1PD8, inner.LL1NB8,
					JDCURR, PMNCTIM6, PBATCH, LPZCSH, PMNCUID, PMNCWID, PMNCDT8, PMNCSRC, PPSPGM, LBDUD8);
		}
		
		if(LNDPMTB.getLbcf().compareTo(BigDecimal.ZERO) != 0 && !GEN492.trim().equals("Y")){
			inner.getLNDFTRNI().setLhamt(LNDPMTB.getLbcf());
			inner.getLNDMSTS().setYtdcdb(inner.getLNDMSTS().getYtdcdb().add(inner.getLNDFTRNI().getLhamt()));
			inner.getLNDMSTS().setLtdcdb(inner.getLNDMSTS().getLtdcdb().add(inner.getLNDFTRNI().getLhamt()));
			inner.getLNDMSTS().setMtdcdb(inner.getLNDMSTS().getMtdcdb().add(inner.getLNDFTRNI().getLhamt()));
			SEQN8 = SEQN8.add(BigDecimal.ONE);
			cltrnl(inner, PPSPGM, SEQN8);

			inner.getLNDFTRNI().setLhtran(new BigDecimal("492"));//*DR COMMITMENT FEE BILLED
			inner.getLNDFTRNI().setLhdorc("D");
			inner.getLNDFTRNI().setLhafft("N");
			inner.getLNDFTRNI().setLhttyp("DB");
			inner.getLNDFTRNI().setLhafnp("N");
			inner.getLNDFTRNI().setLhseqn(SEQN8);
			inner.getLNDFTRNI().setLhaxtc("LNF13304");

			LoansUpdateTransactionHistory objLoansUpdateTransactionHistory = new LoansUpdateTransactionHistory();
			LoansUpdateTransactionHistory.IO LoansUpdateTransactionHistoryIO = objLoansUpdateTransactionHistory.new IO();
			LoansUpdateTransactionHistoryIO.setOB(inner);
			objLoansUpdateTransactionHistory.updateTransactionHistory(LoansUpdateTransactionHistoryIO, "", inner.LL1PD8, inner.LL1NB8, 
					JDCURR, PMNCTIM6, PBATCH, LPZCSH, PMNCUID, PMNCWID, PMNCDT8, PMNCSRC, PPSPGM, LBDUD8);
		}
		
		if(LNDPMTB.getLbprf().compareTo(BigDecimal.ZERO) != 0 && !GEN499.trim().equals("Y")){
			inner.getLNDFTRNI().setLhamt(LNDPMTB.getLbprf());
			inner.getLNDMSTS().setYsaern(inner.getLNDMSTS().getYsaern().add(inner.getLNDFTRNI().getLhamt()));
			inner.getLNDMSTS().setLyaern(inner.getLNDMSTS().getLyaern().add(inner.getLNDFTRNI().getLhamt()));
			inner.getLNDMSTS().setLmaern(inner.getLNDMSTS().getLmaern().add(inner.getLNDFTRNI().getLhamt()));
			SEQN8 = SEQN8.add(BigDecimal.ONE);
			cltrnl(inner, PPSPGM, SEQN8);

			inner.getLNDFTRNI().setLhtran(new BigDecimal("499"));//*DR PROFIT ACCRUED EARNED
			inner.getLNDFTRNI().setLhdorc("D");
			inner.getLNDFTRNI().setLhafft("N");
			inner.getLNDFTRNI().setLhttyp("DB");
			inner.getLNDFTRNI().setLhafnp("N");
			inner.getLNDFTRNI().setLhseqn(SEQN8);
			inner.getLNDFTRNI().setLhaxtc("LNF13026");

			LoansUpdateTransactionHistory objLoansUpdateTransactionHistory = new LoansUpdateTransactionHistory();
			LoansUpdateTransactionHistory.IO LoansUpdateTransactionHistoryIO = objLoansUpdateTransactionHistory.new IO();
			LoansUpdateTransactionHistoryIO.setOB(inner);
			objLoansUpdateTransactionHistory.updateTransactionHistory(LoansUpdateTransactionHistoryIO, "", inner.LL1PD8, inner.LL1NB8, 
					JDCURR, PMNCTIM6, PBATCH, LPZCSH, PMNCUID, PMNCWID, PMNCDT8, PMNCSRC, PPSPGM, LBDUD8);
		}
		
		if(LNDPMTB.getLbmin().compareTo(BigDecimal.ZERO) != 0 && !GEN488.trim().equals("Y")){
			inner.getLNDFTRNI().setLhamt(LNDPMTB.getLbmin());
			inner.getLNDMSTS().setYtdmid(inner.getLNDMSTS().getYtdmid().add(inner.getLNDFTRNI().getLhamt()));
			inner.getLNDMSTS().setLtdmid(inner.getLNDMSTS().getLtdmid().add(inner.getLNDFTRNI().getLhamt()));
			inner.getLNDMSTS().setMtdmid(inner.getLNDMSTS().getMtdmid().add(inner.getLNDFTRNI().getLhamt()));
			SEQN8 = SEQN8.add(BigDecimal.ONE);
			cltrnl(inner, PPSPGM, SEQN8);

			inner.getLNDFTRNI().setLhtran(new BigDecimal("488"));//*DR BILLED MORATORIUM ACCRUED INTEREST
			inner.getLNDFTRNI().setLhdorc("D");
			inner.getLNDFTRNI().setLhafft("N");
			inner.getLNDFTRNI().setLhttyp("DB");
			inner.getLNDFTRNI().setLhafnp("N");
			inner.getLNDFTRNI().setLhseqn(SEQN8);
			inner.getLNDFTRNI().setLhaxtc("LNF13305");

			LoansUpdateTransactionHistory objLoansUpdateTransactionHistory = new LoansUpdateTransactionHistory();
			LoansUpdateTransactionHistory.IO LoansUpdateTransactionHistoryIO = objLoansUpdateTransactionHistory.new IO();
			LoansUpdateTransactionHistoryIO.setOB(inner);
			objLoansUpdateTransactionHistory.updateTransactionHistory(LoansUpdateTransactionHistoryIO, "", inner.LL1PD8, inner.LL1NB8, 
					JDCURR, PMNCTIM6, PBATCH, LPZCSH, PMNCUID, PMNCWID, PMNCDT8, PMNCSRC, PPSPGM, LBDUD8);
		}

//Moved to Financial  
//		//490 - *DR RESTRUCTURING INTEREST BILLED
//		LNF13333	ADJUSTMENT-DR RESTRUCTURE BILLED INTEREST
//		if(LNDPMTB.getLbrin().compareTo(BigDecimal.ZERO) != 0 ){
//			inner.getLNDFTRNI().setLhamt(LNDPMTB.getLbrin());
//			SEQN8 = SEQN8.add(BigDecimal.ONE);
//			cltrnl(inner, PPSPGM, SEQN8);
//
//			inner.getLNDFTRNI().setLhtran(new BigDecimal("490"));
//			inner.getLNDFTRNI().setLhdorc("D");
//			inner.getLNDFTRNI().setLhafft("N");
//			inner.getLNDFTRNI().setLhttyp("DB");
//			inner.getLNDFTRNI().setLhafnp("N");
//			inner.getLNDFTRNI().setLhseqn(SEQN8);
//			inner.getLNDFTRNI().setLhaxtc("LNF13333");
//
//			LoansUpdateTransactionHistory objLoansUpdateTransactionHistory = new LoansUpdateTransactionHistory();
//			LoansUpdateTransactionHistory.IO LoansUpdateTransactionHistoryIO = objLoansUpdateTransactionHistory.new IO();
//			LoansUpdateTransactionHistoryIO.setOB(inner);
//			objLoansUpdateTransactionHistory.updateTransactionHistory(LoansUpdateTransactionHistoryIO, "", inner.LL1PD8, inner.LL1NB8, 
//					JDCURR, PMNCTIM6, PBATCH, LPZCSH, PMNCUID, PMNCWID, PMNCDT8, PMNCSRC, PPSPGM, LBDUD8);
//		}
	
//Moved to Financial  
//		//417 - *DR RESTRUCTURING LATE CHARGE BILLED
////		LNF13334	ADJ-DR RESTRUCTURE BILLED LATE CHARGE
//		if(LNDPMTB.getLbrlc().compareTo(BigDecimal.ZERO) != 0 ){
//			inner.getLNDFTRNI().setLhamt(LNDPMTB.getLbrlc());
//			SEQN8 = SEQN8.add(BigDecimal.ONE);
//			cltrnl(inner, PPSPGM, SEQN8);
//
//			inner.getLNDFTRNI().setLhtran(new BigDecimal("417"));
//			inner.getLNDFTRNI().setLhdorc("D");
//			inner.getLNDFTRNI().setLhafft("N");
//			inner.getLNDFTRNI().setLhttyp("DB");
//			inner.getLNDFTRNI().setLhafnp("N");
//			inner.getLNDFTRNI().setLhseqn(SEQN8);
//			inner.getLNDFTRNI().setLhaxtc("LNF13334");
//
//			LoansUpdateTransactionHistory objLoansUpdateTransactionHistory = new LoansUpdateTransactionHistory();
//			LoansUpdateTransactionHistory.IO LoansUpdateTransactionHistoryIO = objLoansUpdateTransactionHistory.new IO();
//			LoansUpdateTransactionHistoryIO.setOB(inner);
//			objLoansUpdateTransactionHistory.updateTransactionHistory(LoansUpdateTransactionHistoryIO, "", inner.LL1PD8, inner.LL1NB8, 
//					JDCURR, PMNCTIM6, PBATCH, LPZCSH, PMNCUID, PMNCWID, PMNCDT8, PMNCSRC, PPSPGM, LBDUD8);
//		}
		
	}
	
	// *********************************************************************
	//
	// *********************************************************************
	public void cltrnl(IO inner, String PPSPGM, BigDecimal SEQN8) throws Exception {

		inner.getLNDFTRNI().setLhacct(inner.getLNDMAST().getAcctno());
//		 objLNDTIER.setString("LTATYP", objLNDMAST.getString("ACTYPE"));
//		 objLNDEPST.setBigDecimal("LTTRAN", BigDecimal.ZERO);
//		 objLNDEPST.setString("LTDORC", "C");

		inner.getLNDFTRNI().setLhatyp(inner.getLNDMAST().getActype());
		inner.getLNDFTRNI().setLhtran(BigDecimal.ZERO);
		inner.getLNDFTRNI().setLhdorc("C");
		inner.getLNDFTRNI().setLhctyp("");
//		 objLNDEPST.setString("LTAFFT", "Q ");
		inner.getLNDFTRNI().setLhafft("Q");
		inner.getLNDFTRNI().setLhcur(inner.getLNDMAST().getCurtyp().trim());
		inner.getLNDFTRNI().setLhdec(inner.getLNDMAST().getCurdec());
		inner.getLNDFTRNI().setLhcamt(inner.getLNDFTRNI().getLhamt());
		inner.getLNDFTRNI().setLhccur(inner.getLNDMAST().getCurtyp().trim());
		inner.getLNDFTRNI().setLhabk(inner.getLNDMAST().getBkn());
		inner.getLNDFTRNI().setLhcbk(inner.getLNDMAST().getBkn());
		inner.getLNDFTRNI().setLhabr(inner.getLNDMAST().getBrn());
		inner.getLNDFTRNI().setLhcbr(inner.getLNDMAST().getBrn());
		inner.getLNDFTRNI().setLhops8(BigDecimal.ZERO);
		inner.getLNDFTRNI().setLhefd8(inner.LL1PD8);
		inner.getLNDFTRNI().setLhndt8(BigDecimal.ZERO);
		inner.getLNDFTRNI().setLhins8(inner.LL1PD8);
		inner.getLNDFTRNI().setLhtime(new BigDecimal("235959"));
		inner.getLNDFTRNI().setLhetim(new BigDecimal("235959"));
		inner.getLNDFTRNI().setLhntim(new BigDecimal("235959"));
		inner.getLNDFTRNI().setLhsrc("G");
		inner.getLNDFTRNI().setLhoseq(BigDecimal.ZERO);
		inner.getLNDFTRNI().setLhpodr(BigDecimal.ZERO);
		inner.getLNDFTRNI().setLhuser(PPSPGM.trim());
		inner.getLNDFTRNI().setLhspid("");
		inner.getLNDFTRNI().setLhreas("");
		inner.getLNDFTRNI().setLhrev("");
		inner.getLNDFTRNI().setLhafnp("Y");
		inner.getLNDFTRNI().setLhafar("N");
		inner.getLNDFTRNI().setLhepen("N");
		inner.getLNDFTRNI().setLhrbal("N");
		inner.getLNDFTRNI().setLhpseq("");
		inner.getLNDFTRNI().setLhafre("N");
		inner.getLNDFTRNI().setLhafrd("N");
		inner.getLNDFTRNI().setLhrdrw(BigDecimal.ZERO);
		inner.getLNDFTRNI().setLhttyp("");
		inner.getLNDFTRNI().setLhcorf("N");
		inner.getLNDFTRNI().setLhredm("N");
		inner.getLNDFTRNI().setLhwaiv("N");
		inner.getLNDFTRNI().setLhadjf("");
		inner.getLNDFTRNI().setLhpart("N");
		inner.getLNDFTRNI().setLhsett("N");
		inner.getLNDFTRNI().setLhexaf("");
		inner.getLNDFTRNI().setLhglif(BigDecimal.ZERO);
		inner.getLNDFTRNI().setLhtmod("");
		inner.getLNDFTRNI().setLhaxtc("");
		inner.getLNDFTRNI().setLhbopc(BigDecimal.ZERO);
		inner.getLNDFTRNI().setLhratp("");
		inner.getLNDFTRNI().setLherat(BigDecimal.ZERO);
		inner.getLNDFTRNI().setLhdeal("");
		inner.getLNDFTRNI().setLhconn("");
		inner.getLNDFTRNI().setLhswft("");
		inner.getLNDFTRNI().setLhserp("");
		inner.getLNDFTRNI().setLhser(BigDecimal.ZERO);
		inner.getLNDFTRNI().setLhrout(BigDecimal.ZERO);
		inner.getLNDFTRNI().setLhracc(BigDecimal.ZERO);
		inner.getLNDFTRNI().setLhrtyp("");
		inner.getLNDFTRNI().setLhrcur("");
		inner.getLNDFTRNI().setLhpaye("");
		inner.getLNDFTRNI().setLhnosa("");
		inner.getLNDFTRNI().setLhoref("");
		inner.getLNDFTRNI().setLhyref("");
		inner.getLNDFTRNI().setLharef("");
		inner.getLNDFTRNI().setLhsrmk("");
		inner.getLNDFTRNI().setLhtext("");
		inner.getLNDFTRNI().setLhcpf("");
		inner.getLNDFTRNI().setLhcpd8(BigDecimal.ZERO);
		inner.getLNDFTRNI().setLhefta(BigDecimal.ZERO);
		inner.getLNDFTRNI().setLheftt("");
		inner.getLNDFTRNI().setLheftc("");
		inner.getLNDFTRNI().setLhbatn(BigDecimal.ZERO);
		inner.getLNDFTRNI().setLhseqn(BigDecimal.ONE);
		inner.getLNDFTRNI().setLhssid("");
		BigDecimal XLTGLRR = BigDecimal.ONE.add(SEQN8);
		inner.getLNDFTRNI().setLhglrr(XLTGLRR.toString());
		inner.getLNDFTRNI().setLhglsd("LN2100"); 
		inner.getLNDFTRNI().setLhirky(new SimpleDateFormat("yyyyMMddHHmmssSSSSS").format(new Date())); 
	}

	// *********************************************************************
	// GENBNT SUBR - Generate billing notice file LNBNOT       
	// *********************************************************************

	public void genbnt(IO inner, LNDBNOT newLNDBNOT) throws Exception {

		LNDBNOT LNDBNOT = new LNDBNOT();

		BigDecimal BILAMT = inner.getLNDMAST().getBilprn().add(inner.getLNDMAST().getBilint());
		BILAMT = BILAMT.add(inner.getLNDMAST().getBilmin());
		BILAMT = BILAMT.add(inner.getLNDMAST().getBilprf());
		BILAMT = BILAMT.add(inner.getLNDMAST().getBillc());
		BILAMT = BILAMT.add(inner.getLNDMAST().getBilcf());
		BILAMT = BILAMT.add(inner.getLNDMAST().getBiloc());
		BILAMT = BILAMT.add(inner.getLNDMAST().getBilmc());
		BILAMT = BILAMT.add(inner.getLNDMAST().getBilrin());
		BILAMT = BILAMT.add(inner.getLNDMAST().getBilrlc());
		BILAMT = BILAMT.add(inner.getLNDMAST().getBilvat());


		Boolean foundLNDBNOT = false;
		int index_listLNDBNOT = 0;

		Predicate<LNDBNOT> LBCDT8EqualnewLBCDT8 = i -> i.getLbcdt8().compareTo(newLNDBNOT.getLbcdt8()) == 0;
		//		Comparator<LNDBNOT> sortByLBCDT8 = (o1, o2) -> o1.getLbcdt8().compareTo(o2.getLbcdt8());
		LNDBNOT = inner.getListLNDBNOT().stream().filter(LBCDT8EqualnewLBCDT8)
				//				.sorted(sortByLBCDT8)
				.findFirst().orElse(null);

		if(LNDBNOT != null){
			index_listLNDBNOT = inner.getListLNDBNOT().indexOf(LNDBNOT);
			foundLNDBNOT = true;
		}
		else {
			index_listLNDBNOT = inner.getListLNDBNOT().size();
			LNDBNOT = new LNDBNOT();
			foundLNDBNOT = false;
		}

		if (foundLNDBNOT) {
			LNDBNOT.setLbcprn(LNDBNOT.getLbcprn().add(newLNDBNOT.getLbcprn()));
			LNDBNOT.setLbcint(LNDBNOT.getLbcint().add(newLNDBNOT.getLbcint()));
			LNDBNOT.setLbcmin(LNDBNOT.getLbcmin().add(newLNDBNOT.getLbcmin()));
			LNDBNOT.setLbcprf(LNDBNOT.getLbcprf().add(newLNDBNOT.getLbcprf()));
			LNDBNOT.setLbcref(LNDBNOT.getLbcref().add(newLNDBNOT.getLbcref()));
			LNDBNOT.setLbccom(LNDBNOT.getLbccom().add(newLNDBNOT.getLbccom()));
			LNDBNOT.setLbclc(LNDBNOT.getLbclc().add(newLNDBNOT.getLbclc()));
			LNDBNOT.setLbccf(LNDBNOT.getLbccf().add(newLNDBNOT.getLbccf()));
			LNDBNOT.setLbcoc(LNDBNOT.getLbcoc().add(newLNDBNOT.getLbcoc()));
			LNDBNOT.setLbcmc(LNDBNOT.getLbcmc().add(newLNDBNOT.getLbcmc()));
			LNDBNOT.setLbcrin(LNDBNOT.getLbcrin().add(newLNDBNOT.getLbcrin()));
			LNDBNOT.setLbcrlc(LNDBNOT.getLbcrlc().add(newLNDBNOT.getLbcrlc()));

			bg = LNDBNOT.getLbcprn().add(LNDBNOT.getLbcint());
			bg = bg.add(LNDBNOT.getLbcprf());
			bg = bg.add(LNDBNOT.getLbcmin());
			bg = bg.add(LNDBNOT.getLbclc());
			bg = bg.add(LNDBNOT.getLbccf());
			bg = bg.add(LNDBNOT.getLbcoc());
			bg = bg.add(LNDBNOT.getLbcmc());
			bg = bg.add(LNDBNOT.getLbcrin());
			bg = bg.add(LNDBNOT.getLbcrlc());
			bg = bg.add(LNDBNOT.getLbcvat());
			LNDBNOT.setLbctot(bg);

			LNDBNOT.setLbtprn(LNDBNOT.getLbtprn().add(newLNDBNOT.getLbtprn()));
			LNDBNOT.setLbtint(LNDBNOT.getLbtint().add(newLNDBNOT.getLbtprn()));
			LNDBNOT.setLbtmin(LNDBNOT.getLbtmin().add(newLNDBNOT.getLbtprn()));
			LNDBNOT.setLbtprf(LNDBNOT.getLbtprf().add(newLNDBNOT.getLbtprn()));
			LNDBNOT.setLbtref(LNDBNOT.getLbtref().add(newLNDBNOT.getLbtprn()));
			LNDBNOT.setLbtcom(LNDBNOT.getLbtcom().add(newLNDBNOT.getLbtprn()));
			LNDBNOT.setLbtlc(LNDBNOT.getLbtlc().add(newLNDBNOT.getLbtprn()));
			LNDBNOT.setLbtcf(LNDBNOT.getLbtcf().add(newLNDBNOT.getLbtprn()));
			LNDBNOT.setLbtoc(LNDBNOT.getLbtoc().add(newLNDBNOT.getLbtprn()));
			LNDBNOT.setLbtmc(LNDBNOT.getLbtmc().add(newLNDBNOT.getLbtprn()));
			LNDBNOT.setLbtrin(LNDBNOT.getLbtrin().add(newLNDBNOT.getLbtprn()));
			LNDBNOT.setLbtrlc(LNDBNOT.getLbtrlc().add(newLNDBNOT.getLbtprn()));
			LNDBNOT.setLbtvat(LNDBNOT.getLbtvat().add(newLNDBNOT.getLbtprn()));
			LNDBNOT.setAcctno(inner.getLNDMAST().getAcctno());
			LNDBNOT.setActype(inner.getLNDMAST().getActype());
			
			bg = LNDBNOT.getLbtprn().add(LNDBNOT.getLbtint());
			bg = bg.add(LNDBNOT.getLbtprf());
			bg = bg.add(LNDBNOT.getLbtmin());
			bg = bg.add(LNDBNOT.getLbtlc());
			bg = bg.add(LNDBNOT.getLbtcf());
			bg = bg.add(LNDBNOT.getLbtoc());
			bg = bg.add(LNDBNOT.getLbtmc());
			bg = bg.add(LNDBNOT.getLbtrin());
			bg = bg.add(LNDBNOT.getLbtrlc());
			bg = bg.add(LNDBNOT.getLbtvat());
			LNDBNOT.setLbttot(bg);

			inner.getListLNDBNOT().set(index_listLNDBNOT, LNDBNOT);
//			inner.update_LNDBNOT(inner.getListLNDBNOT().get(index_listLNDBNOT));
			//			inner.update_LNDBNOT(LNDBNOT);

		} else {

			LNDBNOT = newLNDBNOT;

			bg = LNDBNOT.getLbcprn().add(LNDBNOT.getLbcint());
			bg = bg.add(LNDBNOT.getLbcprf());
			bg = bg.add(LNDBNOT.getLbcmin());
			bg = bg.add(LNDBNOT.getLbclc());
			bg = bg.add(LNDBNOT.getLbccf());
			bg = bg.add(LNDBNOT.getLbcoc());
			bg = bg.add(LNDBNOT.getLbcmc());
			bg = bg.add(LNDBNOT.getLbcrin());
			bg = bg.add(LNDBNOT.getLbcrlc());
			bg = bg.add(LNDBNOT.getLbcvat());
			LNDBNOT.setLbctot(bg);

			LNDBNOT.setLbtprn(LNDBNOT.getLbcprn().add(LNDBNOT.getLbpprn()));
			LNDBNOT.setLbtint(LNDBNOT.getLbcint().add(LNDBNOT.getLbpint()));
			LNDBNOT.setLbtmin(LNDBNOT.getLbcmin().add(LNDBNOT.getLbpmin()));
			LNDBNOT.setLbtprf(LNDBNOT.getLbcprf().add(LNDBNOT.getLbpprf()));
			LNDBNOT.setLbtref(LNDBNOT.getLbcref().add(LNDBNOT.getLbpref()));
			LNDBNOT.setLbtcom(LNDBNOT.getLbccom().add(LNDBNOT.getLbpcom()));
			LNDBNOT.setLbtlc(LNDBNOT.getLbclc().add(LNDBNOT.getLbplc()));
			LNDBNOT.setLbtcf(LNDBNOT.getLbccf().add(LNDBNOT.getLbpcf()));
			LNDBNOT.setLbtoc(LNDBNOT.getLbcoc().add(LNDBNOT.getLbpoc()));
			LNDBNOT.setLbtmc(LNDBNOT.getLbcmc().add(LNDBNOT.getLbpmc()));
			LNDBNOT.setLbtrin(LNDBNOT.getLbcrin().add(LNDBNOT.getLbprin()));
			LNDBNOT.setLbtrlc(LNDBNOT.getLbcrlc().add(LNDBNOT.getLbprlc()));
			LNDBNOT.setLbtvat(LNDBNOT.getLbcvat().add(LNDBNOT.getLbpvat()));
			LNDBNOT.setLbttot(LNDBNOT.getLbctot().add(LNDBNOT.getLbptot()));
			LNDBNOT.setAcctno(inner.getLNDMAST().getAcctno());
			LNDBNOT.setActype(inner.getLNDMAST().getActype());

			if (((LNDBNOT.getLbctot().compareTo(BigDecimal.ZERO) > 0) 
					&& (LNDBNOT.getLbcprn().compareTo(BigDecimal.ZERO) > 0))
					|| ((LNDBNOT.getLbctot().compareTo(BigDecimal.ZERO) > 0) 
							&& (LNDBNOT.getLbcint().compareTo(BigDecimal.ZERO) > 0))
					|| ((LNDBNOT.getLbctot().compareTo(BigDecimal.ZERO) > 0) 
							&& (LNDBNOT.getLbcprf().compareTo(BigDecimal.ZERO) > 0))
					|| ((LNDBNOT.getLbctot().compareTo(BigDecimal.ZERO) > 0) 
							&& (LNDBNOT.getLbccf().compareTo(BigDecimal.ZERO) > 0))) 
			{
				inner.getListLNDBNOT().add(LNDBNOT);
//				inner.write_LNDBNOT(inner.getListLNDBNOT().get(index_listLNDBNOT));

			}

		}

	}
	
	// *********************************************************************
	//
	// *********************************************************************
	public void lodrat(IO inner, BigDecimal WRKPD8) throws Exception {

		if (((WRKPD8.compareTo(inner.XMTDT8) > 0) 
				&& (inner.XMTDT8.compareTo(BigDecimal.ZERO) > 0))) 
		{
			if ((inner.getLNPPAR2().getPmrate().trim().equals("Y")
					&& (inner.getLNDMAST().getMatrat().compareTo(BigDecimal.ZERO) > 0) 
					&& !inner.getLNDMAST().getRecall().trim().equals("Y"))
					|| (inner.getLNPPAR2().getPrcmrt().trim().equals("Y")
							&& inner.getLNDMAST().getRecall().trim().equals("Y") 
							&& (inner.getLNDMAST().getMatrat().compareTo(BigDecimal.ZERO) > 0))) 
			{
				RATACC = inner.getLNDMAST().getMatrat();
				return;
			} else {
				if ((inner.getLNPPAR2().getPmrate().trim().equals("Z") 
						&& !inner.getLNDMAST().getRecall().trim().equals("Y"))
						|| (inner.getLNPPAR2().getPrcmrt().trim().equals("Z") 
								&& inner.getLNDMAST().getRecall().trim().equals("Y"))) 
				{
					return;
				}

			}

		}

		if (((inner.getLNDMAST().getPrevd8().compareTo(BigDecimal.ZERO) > 0) 
				&& (inner.getLNDMAST().getPrevd8().compareTo(WRKPD8) > 0))) {
			return;
		}
		/*
		objWork.setBigDecimal("JRCRAT", BigDecimal.ZERO);
		srlnrcssr();
		*/
	}
	
	// *********************************************************************
	//
	// *********************************************************************
	public void setamt(IO inner) throws Exception {
	
		// temp - should get from inner class
		BigDecimal XCOLVAL = BigDecimal.ZERO;
		
		LoansSetRestAmount objLoansSetRestAmount = new LoansSetRestAmount();
		LoansSetRestAmount.IO LoansSetRestAmountIO = objLoansSetRestAmount.new IO();
		LoansSetRestAmountIO.setOB(inner);
		objLoansSetRestAmount.executeProcess(LoansSetRestAmountIO, inner.CSRFLG, inner.MATUAC, XCOLVAL, inner.LL1PD8, inner.LL1LM8);
		
		AMOUNT = LoansSetRestAmountIO.AMOUNT;
	}


	// *********************************************************************
	//
	// *********************************************************************
	public void accrue(IO inner, BigDecimal BASE, BigDecimal DATE8A, BigDecimal DATE8B) throws Exception {
	
		
		LoansAccrueInterest objLoansAccrueInterest = new LoansAccrueInterest();
		LoansAccrueInterest.IO LoansAccrueInterestIO = objLoansAccrueInterest.new IO();
		objLoansAccrueInterest.executeProcess(LoansAccrueInterestIO, NDAYS, AMOUNT, RATACC, BASE, DATE8A, DATE8B);
		
		ACRINT = LoansAccrueInterestIO.ACRINT; 
		DAYINT = LoansAccrueInterestIO.DAYINT;
		
	}

	// *********************************************************************
	//
	// *********************************************************************
	public void tiracr(IO inner, BigDecimal DATE8A, BigDecimal DATE8B) throws Exception {

		LoansAccrueInterestTierRate objLoansAccrueInterestTierRate = new LoansAccrueInterestTierRate(inner.Xid);
		LoansAccrueInterestTierRate.IO LoansAccrueInterestTierRateIO = objLoansAccrueInterestTierRate.new IO();
		LoansAccrueInterestTierRateIO.setOB(inner);
		objLoansAccrueInterestTierRate.tiracr(LoansAccrueInterestTierRateIO, inner.getSSPAPPL().getSsarot(), "", AMOUNT, "", DATE8A, DATE8B, NDAYS);

		ACRINT = LoansAccrueInterestTierRateIO.ACRINT; 
		DAYINT = LoansAccrueInterestTierRateIO.DAYINT;
		
//		srlnracta();

	}

	// *********************************************************************
	//
	// *********************************************************************
	public BigDecimal srlnrbacy(IO inner, BigDecimal YRDAYS) throws Exception {
		
		BigDecimal YERBAL = BigDecimal.ZERO;
		BigDecimal TOTDYS = BigDecimal.ZERO;
		BigDecimal LFTDYS = BigDecimal.ZERO;
		BigDecimal REBFC = BigDecimal.ZERO;
		
		LoansRetrievePaymentNotice objLoansRetrievePaymentNotice = new LoansRetrievePaymentNotice();
		LoansRetrievePaymentNotice.IO LoansRetrievePaymentNoticeIO = objLoansRetrievePaymentNotice.new IO();
		LoansRetrievePaymentNoticeIO.setOB(inner);

		YERBAL = objLoansRetrievePaymentNotice.getYERBAL(LoansRetrievePaymentNoticeIO, inner.LL1PD8);
		YERBAL = YERBAL.add(inner.getLNDMAST().getPrebal());
		
		LFTDYS = LoansRebateEarnedOnYearly.getLFTDYS(YERBAL, inner.getLNDMAST().getNrebd8());
		TOTDYS = LoansRebateEarnedOnYearly.getTOTDYS(inner.getLNDMAST().getLrebd8(), inner.getLNDMAST().getNrebd8());
		REBFC  = LoansRebateEarnedOnYearly.yerrst(inner.getLNDMAST().getBkdisc(), inner.getLNDMAST().getIntreb(), 
				YERBAL, inner.getLNDMAST().getRate(), YRDAYS, TOTDYS, LFTDYS);
		
		return REBFC;
		
//		LoansRebateEarnedOnYearly objLoansRebateEarnedOnYearly = new LoansRebateEarnedOnYearly(objHeader.getHmap());
		
//		strSchema = "LNDPMTN.FIND_MORE_THAN_EXPIRY_DATE";
//
//		lmapConditionValue.clear();
//		lmapConditionValue.put("ACCTNO", inner.getLNDMAST().getBigDecimal("ACCTNO"));
//		lmapConditionValue.put("ACTYPE", inner.getLNDMAST().getString("ACTYPE").trim());
//		lmapConditionValue.put("LPNED8", objHeader.getBigDecimal("LP1PD8"));
//
//		//STV- V3 Changes       strWhereCondition = "WHERE " + "ACCTNO = ?" + " AND " + "ACTYPE = ?" + " AND "
//		//STV- V3 Changes       		+ "LPNED8 >= ?";
//
//		lmapSortingOrder.clear();
//		lmapSortingOrder.put(1, "ACCTNO");
//		lmapSortingOrder.put(2, "ACTYPE");
//		lmapSortingOrder.put(3, "LPNED8");
//		lmapSortingOrder.put(4, "LPNNAM");
//
//
//		objSQLProcessorOutput = block_select();
//		objListLNDPMTNL1.setAllRecord(objSQLProcessorOutput.getAllRecord());
//
//		objListLNDPMTNL1.setLower();
//		isFound = objListLNDPMTNL1.readEqual();
//		if (isFound == true) {
//			objLNDPMTNL1.setHmap(objListLNDPMTNL1.getRecord());
//		}
//		while (isFound == true) {
//			if (((objLNDPMTNL1.getBigDecimal("LPNED8").compareTo(inner.LL1PD8) >= 0)
//					&& (objLNDPMTNL1.getBigDecimal("LPNNAM").compareTo(BigDecimal.ZERO) == 0) 
//					&& (objLNDPMTNL1.getBigDecimal("LPNUAM").compareTo(BigDecimal.ZERO) > 0))) 
//			{
//				objWork.setBigDecimal("YERBAL",objWork.getBigDecimal("YERBAL").add(objLNDPMTNL1.getBigDecimal("LPNUAM")));
//			}
//
//			isFound = objListLNDPMTNL1.readEqual();
//			if (isFound == true) {
//				objLNDPMTNL1.setHmap(objListLNDPMTNL1.getRecord());
//			}
//		}

//		objWork.setBigDecimal("YERBAL",objWork.getBigDecimal("YERBAL").add(inner.getLNDMAST().getBigDecimal("PREBAL")));
		/*LoansRebateEarnedOnYearly objLoansRebateEarnedOnYearly = new LoansRebateEarnedOnYearly(objHeader.getHmap());
		objLoansRebateEarnedOnYearly.updateInputHmap(objWork.getHmap());
		objLoansRebateEarnedOnYearly.updateInputHmap(inner.getLNDMAST().getHmap());
		objLoansRebateEarnedOnYearly.setOption(objOption.getHmap());

		objLoansRebateEarnedOnYearly.run();

		objWork.updateHmap(objLoansRebateEarnedOnYearly.getOutputHmap());*/
	}

	// *********************************************************************
	//
	// *********************************************************************
	public BigDecimal srlnrbgpd(IO inner) throws Exception {

		String REBUPD = "";
		String T2ADJB = "";
		
		LoansRebateEarnedOnGraceDaily objLoansRebateEarnedOnGraceDaily = new LoansRebateEarnedOnGraceDaily(inner.Xid);
		LoansRebateEarnedOnGraceDaily.IO LoansRebateEarnedOnGraceDailyIO = objLoansRebateEarnedOnGraceDaily.new IO();
		LoansRebateEarnedOnGraceDailyIO.setOB(inner);
		objLoansRebateEarnedOnGraceDaily.executeProcess(LoansRebateEarnedOnGraceDailyIO, inner.CSRFLG, inner.getLNPPAR2().getPrmtbk(), 
				T2ADJB, REBUPD, RBDAT8, inner.LL1PD8, inner.LL1NB8, inner.LL1NUM);
		
		return LoansRebateEarnedOnGraceDailyIO.REBFC;
		
//		LoansRebateEarnedOnGraceDaily objLoansRebateEarnedOnGraceDaily = new LoansRebateEarnedOnGraceDaily(objHeader.getHmap());
//		objLoansRebateEarnedOnGraceDaily.updateInputHmap(inner.getLNDMAST().getHmap());
//		objLoansRebateEarnedOnGraceDaily.updateInputHmap(objLNDISLMO.getHmap());
//		objLoansRebateEarnedOnGraceDaily.updateInputHmap(objLNDJDSMI.getHmap());
//		objLoansRebateEarnedOnGraceDaily.updateInputHmap(objLNDCSRLI.getHmap());
//		objLoansRebateEarnedOnGraceDaily.updateInputHmap(inner.getLNPPAR2().getHmap());
//		objLoansRebateEarnedOnGraceDaily.updateInputHmap(objWork.getHmap());
//		objLoansRebateEarnedOnGraceDaily.setOption(objOption.getHmap());
//
//		objLoansRebateEarnedOnGraceDaily.run();
//
//		objWork.updateHmap(objLoansRebateEarnedOnGraceDaily.getOutputHmap());
	}

	// *********************************************************************
	//
	// *********************************************************************
	public BigDecimal srlnrbgpm(IO inner) throws Exception {

		LoansRebateEarnedOnGraceMonthly objLoansRebateEarnedOnGraceMonthly = new LoansRebateEarnedOnGraceMonthly();
		LoansRebateEarnedOnGraceMonthly.IO LoansRebateEarnedOnGraceMonthlyIO = objLoansRebateEarnedOnGraceMonthly.new IO();
		LoansRebateEarnedOnGraceMonthlyIO.setOB(inner);
		objLoansRebateEarnedOnGraceMonthly.executeProcess(LoansRebateEarnedOnGraceMonthlyIO, inner.Xid, 
				inner.WAFTGRC, inner.getLNPPAR2().getPrmebk(), inner.getLNPPAR2().getPrdtbk(), inner.getLNPPAR2().getPrldbk(), 
				inner.LL1NUM, inner.LL1PD8);
		
		return LoansRebateEarnedOnGraceMonthlyIO.REBFC;
		
//		LoansRebateEarnedOnGraceMonthly
//		objLoansRebateEarnedOnGraceMonthly = new LoansRebateEarnedOnGraceMonthly(objHeader.getHmap());
//		objLoansRebateEarnedOnGraceMonthly.updateInputHmap(inner.getLNDMAST().getHmap());
//		objLoansRebateEarnedOnGraceMonthly.updateInputHmap(objLNDISLMO.getHmap());
//		objLoansRebateEarnedOnGraceMonthly.updateInputHmap(inner.getLNPPAR2().getHmap());
//		objLoansRebateEarnedOnGraceMonthly.updateInputHmap(objWork.getHmap());
//		objLoansRebateEarnedOnGraceMonthly.setOption(objOption.getHmap());
//
//		objLoansRebateEarnedOnGraceMonthly.run();
//
//		objWork.updateHmap(objLoansRebateEarnedOnGraceMonthly.getOutputHmap());
	}

	// *********************************************************************
	//
	// *********************************************************************
	public BigDecimal srlnrbacd(IO inner) throws Exception {

		String REBUPD = "";
		String T2ADJB = "";
		
		LoansRebateEarnedOnDaily objLoansRebateEarnedOnDaily = new LoansRebateEarnedOnDaily(inner.Xid);
		LoansRebateEarnedOnDaily.IO LoansRebateEarnedOnDailyIO = objLoansRebateEarnedOnDaily.new IO();
		LoansRebateEarnedOnDailyIO.setOB(inner);
		objLoansRebateEarnedOnDaily.executeProcess(LoansRebateEarnedOnDailyIO, REBUPD, T2ADJB, inner.WAFTGRC, inner.getLNPPAR2().getPrmtbk(), 
				RBDAT8, inner.LL1PD8, inner.LL1NB8, inner.LL1NUM, inner.getSSPAPPL().getSsarot());
		return LoansRebateEarnedOnDailyIO.REBFC;
				
//		LoansRebateEarnedOnDaily objLoansRebateEarnedOnDaily = new LoansRebateEarnedOnDaily(objHeader.getHmap());
//		objLoansRebateEarnedOnDaily.updateInputHmap(inner.getLNDMAST().getHmap());
//		objLoansRebateEarnedOnDaily.updateInputHmap(objLNDISLMO.getHmap());
//		objLoansRebateEarnedOnDaily.updateInputHmap(objLNDJDSMI.getHmap());
//		objLoansRebateEarnedOnDaily.updateInputHmap(objLNDDEPRI.getHmap());
//		objLoansRebateEarnedOnDaily.updateInputHmap(objWork.getHmap());
//		objLoansRebateEarnedOnDaily.setOption(objOption.getHmap());
//
//		objLoansRebateEarnedOnDaily.run();
//
//		objWork.updateHmap(objLoansRebateEarnedOnDaily.getOutputHmap());
	}

	// *********************************************************************
	//
	// *********************************************************************
	public BigDecimal srlnrbacm(IO inner, BigDecimal YRDAYS) throws Exception {

		LoansRebateEarnedOnMonthly objLoansRebateEarnedOnMonthly = new LoansRebateEarnedOnMonthly();
		LoansRebateEarnedOnMonthly.IO LoansRebateEarnedOnMonthlyIO = objLoansRebateEarnedOnMonthly.new IO();
		LoansRebateEarnedOnMonthlyIO.setOB(inner);
		objLoansRebateEarnedOnMonthly.executeProcess(LoansRebateEarnedOnMonthlyIO, 
				inner.WAFTGRC, inner.getLNPPAR2().getPrmtbk(), inner.getLNPPAR2().getPrmebk(), inner.getLNPPAR2().getPrdtbk(), inner.getLNPPAR2().getPrldbk(), 
				YRDAYS, inner.LL1NUM, inner.LL1PD8);
		
	return LoansRebateEarnedOnMonthlyIO.REBFC;
		
	}

	// *********************************************************************
	//
	// *********************************************************************
	public BigDecimal srlnrbr78(IO inner,BigDecimal RBDAT8) throws Exception {

		BigDecimal EXMO = BigDecimal.ZERO;
		BigDecimal EXMOS = BigDecimal.ZERO;
		BigDecimal TRMMTH = BigDecimal.ZERO;
		BigDecimal REBFC = BigDecimal.ZERO;
		String POREB = "N";

		EXMOS = LoansRebateEarnedOnRuleOf78.getEXMOS(inner.getLNPPAR2().getPrmebk(), inner.getLNPPAR2().getPrdtbk(), inner.getLNPPAR2().getPrldbk(), 
				inner.getLNPPAR2().getPadjdd(), POREB, inner.getLNDMAST().getCfpdt(), 
				inner.LL1PD8, inner.LL1NB8, RBDAT8, inner.getLNDMAST().getOrgdt8(), inner.getLNDMAST().getMatdt8(), 
				inner.getLNDMAST().getFpdt8(), inner.getLNDMAST().getNspdt8(), inner.getLNDMAST().getNpday(), 
				inner.getLNDMAST().getUpdob(), inner.getLNDMAST().getNoadvp(), inner.getLNDMAST().getFrcode(), inner.getLNDMAST().getTmcode());
		TRMMTH = LoansRebateEarnedOnRuleOf78.getTRMMTH(inner.getLNPPAR2().getPrexbk(), 
				inner.getLNDMAST().getTerm(), inner.getLNDMAST().getTmcode(), inner.getLNDMSTS().getExtmth());
		EXMO = LoansRebateEarnedOnRuleOf78.getEXMO(EXMOS, TRMMTH);
		REBFC = LoansRebateEarnedOnRuleOf78.rule78(EXMO, TRMMTH);
		
		return REBFC;
		
	}

	// *********************************************************************
	//
	// *********************************************************************
	public BigDecimal srlnrbsld(IO inner) throws Exception {

		BigDecimal TOTDYS = BigDecimal.ONE;
		BigDecimal LFTDYS = BigDecimal.ONE;
		BigDecimal LL1NUM = BigDecimal.ONE;
		BigDecimal REBFC = BigDecimal.ONE;

		LFTDYS = LoansRebateEarnedOnStraightLineDaily.getLFTDYS(inner.getLNPPAR2().getPernai(), LL1NUM, inner.getLNDMAST().getMatdt8());
		TOTDYS = LoansRebateEarnedOnStraightLineDaily.getTOTDYS(inner.getLNPPAR2().getPrdtbk(), inner.getLNPPAR2().getPrldbk(), inner.getLNPPAR2().getPernai(), 
				inner.getLNDMAST().getRolm(), inner.getLNDMAST().getRolse8(), inner.getLNDMAST().getOrgdt8(), inner.getLNDMAST().getFpdt8(), 
				inner.getLNDMAST().getMatdt8(), inner.getLNDMAST().getOrgmd8());
		REBFC = LoansRebateEarnedOnStraightLineDaily.strtrb(TOTDYS, LFTDYS);
		
		return REBFC;
		
	}

	// *********************************************************************
	//
	// *********************************************************************
	public void srlnracsu(IO inner, BigDecimal DATE8A) throws Exception {

		BigDecimal LL1NUM = BigDecimal.ONE;
		
		LoansAccrueInterestSubsidy objLoansAccrueInterestSubsidy = new LoansAccrueInterestSubsidy();
		LoansAccrueInterestSubsidy.IO LoansAccrueInterestSubsidyIO = objLoansAccrueInterestSubsidy.new IO();
		LoansAccrueInterestSubsidyIO.setOB(inner);
		objLoansAccrueInterestSubsidy.executeProcess(LoansAccrueInterestSubsidyIO, inner.Xid, LL1NUM, DATE8A, ACCBAL, ACCRAT);
		
		DAINT = LoansAccrueInterestSubsidyIO.DAINT;
		ACCBAL = LoansAccrueInterestSubsidyIO.ACCBAL;
		ACCRAT = LoansAccrueInterestSubsidyIO.ACCRAT;

	}

	// *********************************************************************
	//
	// *********************************************************************
	public void srlnracam(IO inner, BigDecimal DATE8A, BigDecimal DATE8B) throws Exception {

		BigDecimal LL1NUM = BigDecimal.ZERO;
		// temp
		BigDecimal EPMTAM = BigDecimal.ZERO;
		BigDecimal ENWRD8 = BigDecimal.ZERO;
		BigDecimal OLDPMT = BigDecimal.ZERO;
		
		LoansAccrueInterestAmortization objLoansAccrueInterestAmortization = new LoansAccrueInterestAmortization();
		LoansAccrueInterestAmortization.IO LoansAccrueInterestAmortizationIO = objLoansAccrueInterestAmortization.new IO();
		LoansAccrueInterestAmortizationIO.setOB(inner);
		objLoansAccrueInterestAmortization.executeProcess(LoansAccrueInterestAmortizationIO, 
				EPMTAM, ENWRD8, DATE8A, DATE8B, LL1NUM, OLDPMT);
		
		ACRINT = LoansAccrueInterestAmortizationIO.ACRINT;
		DAYINT = LoansAccrueInterestAmortizationIO.DAYINT;
	}

	// *********************************************************************
	//
	// *********************************************************************
	public void srlnracy5(IO inner, BigDecimal ROLDT8, BigDecimal DATE8A, BigDecimal LTHD8, BigDecimal LTEFD8, String LTRBAL) throws Exception {

		BigDecimal LL1NUM = BigDecimal.ZERO;
		String RVLBS5 = "";
		
		DAYINT = LoansAccrueInterestPointToPoint.getDAYINT(inner.getLNDMAST().getMatdt8(), 
				DATE8A, inner.getLNDMAST().getCbal(), LL1NUM, LL1NUM, inner.getLNDMAST().getNspdt8(), inner.getLNDMAST().getNsipd8(), LL1NUM, 
				inner.getLNDMAST().getPmtcod(), RVLBS5, LTEFD8, inner.getLNDMAST().getLrebd8(), LTRBAL, ROLDT8, inner.getLNDMAST().getFreq(), inner.getLNDMAST().getFrcode(), 
				inner.getLNDMAST().getNpday(), inner.getLNPPAR2().getPadjdd(), inner.getLNDMAST().getNipday(), inner.getLNDMAST().getIpcode(), LTHD8);

		ACRINT = LoansAccrueInterestPointToPoint.getACRINT(inner.getLNDMAST().getMatdt8(), DATE8A, 
				inner.getLNDMAST().getCbal(), LL1NUM, LL1NUM, inner.getLNDMAST().getNspdt8(), inner.getLNDMAST().getNsipd8(), LL1NUM, 
				inner.getLNDMAST().getPmtcod(), RVLBS5, LTEFD8, inner.getLNDMAST().getLrebd8(), LTRBAL, ROLDT8, inner.getLNDMAST().getFreq(), inner.getLNDMAST().getFrcode(), 
				inner.getLNDMAST().getNpday(), inner.getLNPPAR2().getPadjdd(), inner.getLNDMAST().getNipday(), inner.getLNDMAST().getIpcode(), LTHD8);
		
		/*LoansAccrueInterestPointToPoint objLoansAccrueInterestPointToPoint = new LoansAccrueInterestPointToPoint(objHeader.getHmap());
		objLoansAccrueInterestPointToPoint.updateInputHmap(inner.getLNPPAR2().getHmap());
		objLoansAccrueInterestPointToPoint.updateInputHmap(inner.getLNDMAST().getHmap());
		objLoansAccrueInterestPointToPoint.updateInputHmap(objWork.getHmap());
		// WLNRACY5I.setBigDecimal("ROLDT8", objWork.getBigDecimal("ROLDT8"));
		// WLNRACY5I.setBigDecimal("LTEFD8", BigDecimal.ZERO);
		// WLNRACY5I.setString("LTRBAL", "N");
		objLoansAccrueInterestPointToPoint.setInputField("ROLDT8", objWork.getBigDecimal("ROLDT8"));
		objLoansAccrueInterestPointToPoint.setInputField("LTEFD8", BigDecimal.ZERO);
		objLoansAccrueInterestPointToPoint.setInputField("LTRBAL", "N");
		objLoansAccrueInterestPointToPoint.setOption(objOption.getHmap());

		objLoansAccrueInterestPointToPoint.run();

		objWork.updateHmap(objLoansAccrueInterestPointToPoint.getOutputHmap());*/
	}

	// *********************************************************************
	//
	// *********************************************************************
	public void srlnrac78(IO inner, BigDecimal RBDAT8) throws Exception {

		LoansAccrueInterestRuleOf78 objLoansAccrueInterestRuleOf78 = new LoansAccrueInterestRuleOf78();
		LoansAccrueInterestRuleOf78.IO LoansAccrueInterestRuleOf78IO = objLoansAccrueInterestRuleOf78.new IO();
		LoansAccrueInterestRuleOf78IO.setOB(inner);
		objLoansAccrueInterestRuleOf78.accrueInterestR78(LoansAccrueInterestRuleOf78IO, inner.getLNDMSTS().getExtmth(), RBDAT8, NDAYS);
		
		ACRINT = LoansAccrueInterestRuleOf78IO.ACRINT;
		DAYINT = LoansAccrueInterestRuleOf78IO.DAYINT;
		
		/*LoansAccrueInterestRuleOf78 objLoansAccrueInterestRuleOf78 = new LoansAccrueInterestRuleOf78(objHeader.getHmap());
		objLoansAccrueInterestRuleOf78.updateInputHmap(inner.getLNPPAR2().getHmap());
		objLoansAccrueInterestRuleOf78.updateInputHmap(inner.getLNDMAST().getHmap());
		objLoansAccrueInterestRuleOf78.updateInputHmap(objLNDMSTSI.getHmap());
		objLoansAccrueInterestRuleOf78.updateInputHmap(objWork.getHmap());
		objLoansAccrueInterestRuleOf78.setOption(objOption.getHmap());

		objLoansAccrueInterestRuleOf78.run();

		objWork.updateHmap(objLoansAccrueInterestRuleOf78.getOutputHmap());*/
	}

	// *********************************************************************
	//
	// *********************************************************************
//	public void srlnracta() throws Exception {
//
//		LoansAccrueInterestTierRate objLoansAccrueInterestTierRate = new LoansAccrueInterestTierRate(objHeader.getHmap());
//		objLoansAccrueInterestTierRate.updateInputHmap(objWork.getHmap());
//		objLoansAccrueInterestTierRate.updateInputHmap(inner.getLNDMAST().getHmap());
//		objLoansAccrueInterestTierRate.setOption(objOption.getHmap());
//
//		objLoansAccrueInterestTierRate.run();
//
//		objWork.updateHmap(objLoansAccrueInterestTierRate.getOutputHmap());
//	}


	// *********************************************************************
	//
	// *********************************************************************
	public void srlnraclc(IO inner, String CALCLC) throws Exception {

		BigDecimal LCHG = BigDecimal.ZERO;
		BigDecimal WACRIC = BigDecimal.ZERO;
		BigDecimal WACRIN = BigDecimal.ZERO;
		
		LoansAccrueLateCharge objLoansAccrueLateCharge = new LoansAccrueLateCharge(inner.Xid);
		LoansAccrueLateCharge.IO LoansAccrueLateChargeIO = objLoansAccrueLateCharge.new IO();
		LoansAccrueLateChargeIO.setOB(inner);
		objLoansAccrueLateCharge.latchg(LoansAccrueLateChargeIO, inner.LL1NB8, inner.LL1PD8, inner.SSAROT, inner.LL1NUM, CALCLC, inner.MATUAC, 
				inner.ISLACT, inner.ODTYPE, inner.BS8REB);

		LCHG = LoansAccrueLateChargeIO.LCHG;
		WACRIC = LoansAccrueLateChargeIO.WACRIC;
		WACRIN = LoansAccrueLateChargeIO.WACRIN;
		WASSLC   = WASSLC.add(LCHG);
		WPENIN   = WPENIN.add(WACRIC);
		WPENIN   = WPENIN.add(WACRIN);
//		LoansAccrueLateCharge objLoansAccrueLateCharge = new LoansAccrueLateCharge();
//		LoansAccrueLateCharge.IO LoansAccrueLateChargeIO = objLoansAccrueLateCharge.new IO();
//		LoansAccrueLateChargeIO.setOB(inner);
//		objLoansAccrueLateCharge.accrueInterestR78(LoansAccrueLateChargeIO, inner.getLNDMSTS().getExtmth(), RBDAT8, NDAYS);
//		
//		ACRINT = LoansAccrueLateChargeIO.ACRINT;
//		DAYINT = LoansAccrueLateChargeIO.DAYINT;
		
//		LoansAccrueLateCharge objLoansAccrueLateCharge = new LoansAccrueLateCharge(objHeader.getHmap());
//		objLoansAccrueLateCharge.updateInputHmap(inner.getLNPPAR2().getHmap());
//		objLoansAccrueLateCharge.updateInputHmap(inner.getLNDMAST().getHmap());
//		objLoansAccrueLateCharge.updateInputHmap(objLNDJDSMI.getHmap());
//		objLoansAccrueLateCharge.updateInputHmap(objWork.getHmap());
//		objLoansAccrueLateCharge.setOption(objOption.getHmap());
//
//		objLoansAccrueLateCharge.run();
//
//		objWork.updateHmap(objLoansAccrueLateCharge.getOutputHmap());
	}

	// *********************************************************************
	//
	// *********************************************************************
	public BigDecimal srlnraccf(IO inner) throws Exception {

//		STAGL - subject to aggregate limit has bee removed from lndmast.
//		temp disable this function.
		String STAGL = "N";

		LoansAccrueCommitmentFee objLoansAccrueCommitmentFee = new LoansAccrueCommitmentFee(inner.Xid);
		LoansAccrueCommitmentFee.IO LoansAccrueCommitmentFeeIO = objLoansAccrueCommitmentFee.new IO();
		LoansAccrueCommitmentFeeIO.setOB(inner);
		objLoansAccrueCommitmentFee.executeProcess(LoansAccrueCommitmentFeeIO, 
				inner.LL1PD8, inner.LL1NB8, inner.LL1NUM, STAGL, inner.ISLACT, 
				inner.getLNDMAST().getIntreb(), inner.getLNDMAST().getCurdec(), inner.getLNDMAST().getComacc(), inner.Xid);;

				return LoansAccrueCommitmentFeeIO.WCOMAC;

	}

	// *********************************************************************
	//
	// *********************************************************************
	public void srlnrcalt() throws Exception {

//		LoansComputeBalanceOnMain objLoansComputeBalanceOnMain = new LoansAccrueCommitmentFee();
//		LoansAccrueCommitmentFee.IO LoansAccrueCommitmentFeeIO = objLoansAccrueCommitmentFee.new IO();
//		LoansAccrueCommitmentFeeIO.setOB(inner);
//		objLoansAccrueCommitmentFee.executeProcess(LoansAccrueCommitmentFeeIO, 
//				inner.LL1PD8, inner.LL1NB8, inner.LL1NUM, STAGL, inner.ISLACT, 
//				inner.getLNDMAST().getIntreb(), inner.getLNDMAST().getCurdec(), inner.getLNDMAST().getComacc(), inner.Xid);;
//
//				return LoansAccrueCommitmentFeeIO.WCOMAC;
		
		
//		LoansComputeBalanceOnMain objLoansComputeBalanceOnMain = new LoansComputeBalanceOnMain(objHeader.getHmap());
//		objLoansComputeBalanceOnMain.updateInputHmap(inner.getLNDMAST().getHmap());
//		objLoansComputeBalanceOnMain.setOption(objOption.getHmap());
//
//		objLoansComputeBalanceOnMain.run();
//
//		objWork.updateHmap(objLoansComputeBalanceOnMain.getOutputHmap());
	}

	// *********************************************************************
	//
	// *********************************************************************
	public void srlnritier(IO inner, BigDecimal WRKPD8) throws Exception {

		LoansRetrieveTieredRate objLoansRetrieveTieredRate = new LoansRetrieveTieredRate(inner.Xid);
		LoansRetrieveTieredRate.IO LoansRetrieveTieredRateIO = objLoansRetrieveTieredRate.new IO();
		LoansRetrieveTieredRateIO.setOB(inner);
		objLoansRetrieveTieredRate.tirarr(LoansRetrieveTieredRateIO, WRKPD8, inner.getLNPPAR2().getPrcmrt());

		// load values into tier rate array
		inner.setListLNDTIRHI(LoansRetrieveTieredRateIO.listLNDTIRHI);

//		objOption.setString("PFORMAT", "LNRITIER");
//		LoansRetrieveTieredRate objLoansRetrieveTieredRate = new LoansRetrieveTieredRate(objHeader.getHmap());
//		objLoansRetrieveTieredRate.updateInputHmap(inner.getLNDMAST().getHmap());
//		objLoansRetrieveTieredRate.updateInputHmap(inner.getLNPPAR2().getHmap());
//		objLoansRetrieveTieredRate.setInputField("WTIERD8", objWork.getBigDecimal("WTIERD8"));
//
//		// WLNRITIERI.setBigDecimal("WTIERD8", objWork.getBigDecimal("WTIERD8"));
//		// DSLNRITIERO.DSRTIERARR = DSRTIERARR;
//		// DSLNRITIERO.WCNT = BigDecimal.ZERO;
//		objLoansRetrieveTieredRate.setOption(objOption.getHmap());
//
//		objLoansRetrieveTieredRate.run();
//
//		// DSRTIERARR = DSLNRITIERO.DSRTIERARR;
//		// objWork.setBigDecimal("X", DSLNRITIERO.WCNT);
//
//		objListLNDTIRHI.setAllRecord(objLoansRetrieveTieredRate.getArrayOutputHmap());
//		objListLNDTIRHI.setTotalRecord(objLoansRetrieveTieredRate.getOutputMax());

	}

	// *********************************************************************
	//
	// *********************************************************************
	public void srlnrcssr() throws Exception{

//		LoansComputeRateOnRateTable objLoansComputeRateOnRateTable = new LoansComputeRateOnRateTable(objHeader.getHmap(), objOption.getHmap()); 
//
//		//objOption.setString("PFORMAT", "LNRCSSR");
//		//objLoansComputeRateOnRateTable.setOption(objOption.getHmap());
//		//objLoansComputeRateOnRateTable.updateHmap(inner.getLNDMAST().getHmap());
//		//objLoansComputeRateOnRateTable.updateHmap(objSSPRATH.getHmap());	
//		// Load From DSLNRCSSRI
//
//		//objLoansComputeRateOnRateTable.setInputField("CAPBRV", inner.getLNDMAST().getBigDecimal("CAPBRV"));
//		//objLoansComputeRateOnRateTable.setInputField("CAPRAT", inner.getLNDMAST().getString("CAPRAT"));
//		objLoansComputeRateOnRateTable.setInputField("JRRATN", inner.getLNDMAST().getBigDecimal("PRATEN"));//standard rate or Prime rate
//		objLoansComputeRateOnRateTable.setInputField("JRBANK", inner.getLNDMAST().getBigDecimal("BKN"));
//		objLoansComputeRateOnRateTable.setInputField("JRBRAN", inner.getLNDMAST().getBigDecimal("BRN"));
//		objLoansComputeRateOnRateTable.setInputField("JRLFM8", inner.LL1PD8);
//		objLoansComputeRateOnRateTable.setInputField("JRRCUR", inner.getLNDMAST().getString("CURTYP").trim());
//		//objInput.setBigDecimal("ORGDT8", BigDecimal.ZERO);
//		//objOutput.setBigDecimal("JRCRAT", BigDecimal.ZERO);
//
//
//		objLoansComputeRateOnRateTable.run();
//
//		objWork.updateHmap(objLoansComputeRateOnRateTable.getOutputHmap());
		/*
		objOption.setString("PFORMAT", "LNRCSSR");
		LoansComputeRateOnRateTable objLoansComputeRateOnRateTable = new LoansComputeRateOnRateTable(objHeader.getHmap());
		objLoansComputeRateOnRateTable.updateHmap(inner.getLNDMAST().getHmap());

		objLoansComputeRateOnRateTable.updateHmap(objSSPRATH.getHmap());
		objLoansComputeRateOnRateTable.setOption(objOption.getHmap());

		objLoansComputeRateOnRateTable.run();

		objWork.updateHmap(objLoansComputeRateOnRateTable.getOutputHmap());
		 */
	}

	// *********************************************************************
	//
	// *********************************************************************
	public void srlnrcinr(IO inner, BigDecimal DATE8A, BigDecimal DATE8B) throws Exception {

		/*objOption.setString("PFORMAT", "LNRCINR");
		LoansComputeRate objLoansComputeRate = new LoansComputeRate(objHeader.getHmap());
		objLoansComputeRate.updateInputHmap(inner.getLNDMAST().getHmap());
		objLoansComputeRate.updateInputHmap(inner.getLNPPAR2().getHmap());
		objLoansComputeRate.updateInputHmap(objWork.getHmap());
		objLoansComputeRate.updateInputHmap(objLNDJDSMI.getHmap());
		objLoansComputeRate.updateOutputHmap(inner.getLNDMAST().getHmap());
		objLoansComputeRate.updateOutputHmap(objLNDJDSMI.getHmap());
		objLoansComputeRate.updateOutputHmap(objWork.getHmap());
		objLoansComputeRate.setOption(objOption.getHmap());

		objLoansComputeRate.run();

		inner.getLNDMAST().updateHmap(objLoansComputeRate.getOutputHmap());
		objLNDJDSMI.updateHmap(objLoansComputeRate.getOutputHmap());
		objWork.updateHmap(objLoansComputeRate.getOutputHmap());*/
		
		LoansComputeRate objLoansComputeRate = new LoansComputeRate(inner.Xid);
		LoansComputeRate.IO LoansComputeRateIO = objLoansComputeRate.new IO();
		LoansComputeRateIO.setOB(inner);
		objLoansComputeRate.srlnscomputerate(LoansComputeRateIO,inner.getLNDMAST().getUsedfr(), DATE8A , DATE8B , inner.MATUAC , inner.OSBAL,
				inner.getLNDMAST().getPomrat(),inner.getLNDMAST().getDftdt8(),inner.getLNDMAST().getRdat01());
		RATACC =LoansComputeRateIO.RATACC;
	}

	// //*********************************************************************
	// //
	// //*********************************************************************
	// public void srlnripmtb() {
	//
	// lnsCRIPMTB objLoansRetrievePaymentBilling = new lnsCRIPMTB(objOption.getString("PFORMAT"));
	//
	// switch (objOption.getString("PFORMAT").trim()) {
	// case "LNRIPMTB1" :
	// objLoansRetrievePaymentBilling.updateInputHmap(inner.getLNDMAST().getHmap());
	// objLoansRetrievePaymentBilling.updateOutputHmap(inner.getLNDMAST().getHmap());
	// objLoansRetrievePaymentBilling.updateOutputHmap(objLNDISLMO.getHmap());
	// break;
	// case "LNRIPMTB2" :
	// // WLNRIPMTB2I.setBigDecimal("ACCTNO", LNDEXCB.getBigDecimal("ACCTNO"));
	// // WLNRIPMTB2I.setBigDecimal("WLBDUD8", objHeader.getBigDecimal("LL1PD8"));
	// objLoansRetrievePaymentBilling.setInputField("ACCTNO", inner.getLNDMAST().getBigDecimal("ACCTNO"));
	// objLoansRetrievePaymentBilling.setInputField("WLBDUD8", objHeader.getBigDecimal("LL1PD8"));
	//
	//
	// break;
	// }
	//
	//
	// objLoansRetrievePaymentBilling.run(objHeader.getHmap(), objOption.getHmap());
	//
	//
	// switch (objOption.getString("PFORMAT").trim()) {
	// case "LNRIPMTB1" :
	// inner.getLNDMAST().updateHmap(objLoansRetrievePaymentBilling.getOutputHmap());
	// objLNDISLMO.updateHmap(objLoansRetrievePaymentBilling.getOutputHmap());
	// break;
	// case "LNRIPMTB2" :
	// // objWork.setBigDecimal("ARREAR", WLNRIPMTB2O.getBigDecimal("ARREAR"));
	// objWork.setBigDecimal("ARREAR", objLoansRetrievePaymentBilling.getBigDecimal("ARREAR"));
	// break;
	// }
	//
	// }

	// *********************************************************************
	//
	// *********************************************************************
	public void srssr1710() throws Exception {

		/*objOption.setString("PFORMAT", "SSR1710");
		// lnsCSSR1710 objLoansComputeValueAddedTax = new lnsCSSR1710();
		LoansComputeValueAddedTax objLoansComputeValueAddedTax = new LoansComputeValueAddedTax(objHeader.getHmap());
		objSSDR1710I.updateHmap(objWork.getHmap());
		objLoansComputeValueAddedTax.setOption(objOption.getHmap());
		objLoansComputeValueAddedTax.run();

		objWork.updateHmap(objSSDR1710O.getHmap());*/
	}


	// *********************************************************************
	//
	// *********************************************************************
	public void srmonerr() throws Exception {

//		objLNDR2100E.setBigDecimal("ERACCN", inner.getLNDMAST().getBigDecimal("ACCTNO"));
//		objLNDR2100E.setString("ERACTY", inner.getLNDMAST().getString("ACTYPE").trim());
//		// objWork.setString("WERRMSG", EXCP_TYPE.add( EXCP_NUM).add( "-").add(
//		// PSMSGDTA));
//		// objLNDR2100E.setString("EREFTH", WPLEN.add(
//		// objWork.getString("WERRMSG").trim()));
//
//		hmapFieldList.clear();
//		hmapFieldList.putAll(objLNDR2100E.getHmap());
//
//		strSchema = "LNDR2100E";
//
//		//		objSQLProcessor.clear();
//		//		objSQLProcessor.setSchema(strSchema);
//		//		objSQLProcessor.setHmapData(hmapFieldList);
//		//		isError = objSQLProcessor.sqlProcessor.write();
//		isError = objSQLProcessor.cacheProcessor().write(strSchema, hmapFieldList).execute().getError();
	}
	public void pmtcd8(IO inner, LNDEXCP LNDEXCB) throws Exception {

		WriteBilling = false;
		 
		//overwrite inner.getLNDMAST().getPmtamt(); from minimum payment amount
		XPMTWRK =  srminpay(inner);
		// XPMTWRK >0 means got minimum payment to charge
		if(XPMTWRK.compareTo(BigDecimal.ZERO) >0)
		{
			WriteBilling = true;
			BigDecimal TMPACC=BigDecimal.ZERO;
			PMTWRK = XPMTWRK;
			//move to genpmb() will update payment amount
//			inner.getLNDMAST().setPmtamt(PMTWRK);
			
			//A - billed as part of Min-Pay Amount
			//B - billed on-top of Min-Pay Amount
			
			BigDecimal MISCD = BigDecimal.ZERO;
			BigDecimal OTHCHG = BigDecimal.ZERO;
			MISCD = LoansUpdatePaymentBilling.setFeeCharges("M", inner.getLNDMAST().getNspdt8(), inner.getListLNDMIDM());
			OTHCHG = LoansUpdatePaymentBilling.setFeeCharges("O", inner.getLNDMAST().getNspdt8(), inner.getListLNDMIDM());
			
			//1. Miscellaneous Cost
			TMPACC = CommonRoundCent.roundCent(inner.getSSPAPPL().getSsarot(), MISCD, inner.getLNDMAST().getCurdec());
			LNDBNOT.setLbcmc(TMPACC.subtract(inner.getLNDMAST().getBilmc()));
			if(inner.getLNPPAR2().getPmpbmc().equals("A")) {
				PMTWRK = PMTWRK.subtract(LNDBNOT.getLbcmc());
			}
			
			//	 2.	Other Charges (Other Fee)
			TMPACC = CommonRoundCent.roundCent(inner.getSSPAPPL().getSsarot(), OTHCHG, inner.getLNDMAST().getCurdec());
			LNDBNOT.setLbcoc(TMPACC.subtract(inner.getLNDMAST().getBiloc()));
			if(inner.getLNPPAR2().getPmpboc().equals("A")) {
				PMTWRK = PMTWRK.subtract(LNDBNOT.getLbcoc());
			}
			//avoid pmtwrk become negative value
			if(PMTWRK.compareTo(BigDecimal.ZERO) < 0)
				PMTWRK = BigDecimal.ZERO;
			
			//	 3.	Late Charge (Penalty)
			TMPACC = CommonRoundCent.roundCent(inner.getSSPAPPL().getSsarot(), inner.getLNDMAST().getPenint(), inner.getLNDMAST().getCurdec());
			TMPACC = TMPACC.subtract(inner.getLNDMAST().getBillc());
			if(inner.getLNPPAR2().getPmpblc().equals("A")) {
				//check min amount between late charge and remaining installment amount
				LNDBNOT.setLbclc(TMPACC.min(PMTWRK));
				PMTWRK = PMTWRK.subtract(LNDBNOT.getLbclc());
			}else {
				//Pmpblc = B , bill on top 
				LNDBNOT.setLbclc(TMPACC);
			}
			
			//	 4.	Interest 
			TMPACC = CommonRoundCent.roundCent(inner.getSSPAPPL().getSsarot(), inner.getLNDMAST().getAccint(), inner.getLNDMAST().getCurdec());
			TMPACC = TMPACC.subtract(inner.getLNDMAST().getBilint());
			if(inner.getLNPPAR2().getPmpbin().equals("A")) {
				//check min amount between interest and remaining installment amount
				LNDBNOT.setLbcint(TMPACC.min(PMTWRK));
				PMTWRK = PMTWRK.subtract(LNDBNOT.getLbcint());
			}else {
				//Pmpbin = B , bill on top 
				LNDBNOT.setLbcint(TMPACC);
			}

			//	5.	Commitment Fee 
			TMPACC = CommonRoundCent.roundCent(inner.getSSPAPPL().getSsarot(), inner.getLNDMAST().getComacc(), inner.getLNDMAST().getCurdec());
			TMPACC = TMPACC.subtract(inner.getLNDMAST().getBilcf());
			if(inner.getLNPPAR2().getPmpbcf().equals("A")) {
				//check min amount between commitment fee and remaining installment amount
				LNDBNOT.setLbccf(TMPACC.min(PMTWRK));
				PMTWRK = PMTWRK.subtract(LNDBNOT.getLbccf());
			}else {
				//Pmpbcf = B , bill on top 
				LNDBNOT.setLbccf(TMPACC);
			}
			
			//Mora Ind 
			if(inner.getLNDMAST().getMrflag().equals("Y") //Moratorium Flag
					&& (inner.getLNDMAST().getMrstr8().compareTo(inner.LL1PD8) <= 0 //Moratorium Start Date
					&& inner.getLNDMAST().getMrexp8().compareTo(inner.LL1PD8) >= 0 ))//Moratorium Expiry Date
					LNDBNOT.setLbcid("M"); 

			BillRestructureInt(inner);
//			if(inner.getLNDMAST().getRipmta().compareTo(BigDecimal.ZERO) > 0 
//					&& inner.getLNDMAST().getStrdri().compareTo(BigDecimal.ZERO) > 0   	//strdri - Start Date for Payment to Restructured Int
//					&& (LNDEXCB.getSspdt8().compareTo(BigDecimal.ZERO) > 0
//					&& inner.getLNDMAST().getStrdri().compareTo(LNDEXCB.getSspdt8()) <= 0)) {
//				if(inner.getLNDMAST().getResint().compareTo(inner.getLNDMAST().getRipmta()) < 0) //Ripmta - fixed Restructured Interest Pymt Amount',
//					LNDBNOT.setLbcrin(inner.getLNDMAST().getResint().subtract(inner.getLNDMAST().getBilrin()));
//				else
//					LNDBNOT.setLbcrin(inner.getLNDMAST().getRipmta());
//					
//			}else if (inner.getLNDMAST().getRipmta().compareTo(BigDecimal.ZERO) == 0){
//				if ((inner.getLNDMAST().getMatdt8().compareTo(LNDBNOT.getLbcdt8()) <= 0  //maturity date <= billing due date
//						&& inner.getLNDMAST().getMatdt8().compareTo(BigDecimal.ZERO) != 0)){ 
//						
//					LNDBNOT.setLbcrin(inner.getLNDMAST().getResint().subtract(inner.getLNDMAST().getBilrin()));
//				}
//			}
			
			//
//			//Restructure Late Charge
//			LNDBNOT.setLbcrlc(inner.getLNDMAST().getReslc().subtract(inner.getLNDMAST().getBilrlc()));
//			PMTWRK = PMTWRK.subtract(LNDBNOT.getLbcrlc());
			
			//	 5.	Principal
			LNDBNOT.setLbcprn(inner.getLNDMAST().getCbal().min(PMTWRK));
		}
		else {
			//this routing update lndmidm due fee to next nspdt8
			updateLndmidmNspdt8(inner, inner.Xid);
		}
	} 
	
	private void updateWPRTPM(IO inner, BigDecimal Sspdt8) throws Exception {
		
		// this routine for payment code 8 only
		if (inner.getLNDMAST().getPmtcod().compareTo(BigDecimalConstants.EIGHT) != 0)
			return;
		
		// STV - to use WPRTPM instead of WKPRTP. Bcos WPRTPM will use to minus out
		// WRKBLP in later
		if (((inner.getLNDMAST().getWrkblp().compareTo(BigDecimal.ZERO) < 0)
				&& (inner.getLNDMAST().getNpdt8().compareTo(Sspdt8) == 0))) {
			//use wrkblp instead of prtpmt as overpaid work field 
			WPRTPM = inner.getLNDMAST().getWrkblp().negate();
			if ((LNDBNOT.getLbcprn().compareTo(BigDecimal.ZERO) > 0)) {
				if ((LNDBNOT.getLbcprn().compareTo(WPRTPM) >= 0)) {
					LNDBNOT.setLbcprn(LNDBNOT.getLbcprn().subtract(WPRTPM));
					
					if(LNDBNOT.getLbcprn().compareTo(BigDecimal.ZERO) <0 )
						LNDBNOT.setLbcprn(BigDecimal.ZERO);
					// WPRTPM = BigDecimal.ZERO;
				} else {
					// WKPRTP = WKPRTP.subtract(LNDBNOT.getLbcprn());
					WPRTPM = LNDBNOT.getLbcprn();
					LNDBNOT.setLbcprn(BigDecimal.ZERO);
				}
			}

			if (inner.getLNDMAST().getWrkbli().compareTo(BigDecimal.ZERO) < 0) {
				WINTAD = inner.getLNDMAST().getWrkbli().negate();
				if (WINTAD.compareTo(WPRTPM) > 0) {
					WINTAD = WPRTPM;
					WPRTPM = BigDecimal.ZERO;
				} else {
					WPRTPM = WPRTPM.subtract(WINTAD);
				}
			}
		}
	}
	
	// *********************************************************************
	// Calculate Minimum Payment Amount
	// *********************************************************************
	
	public BigDecimal srminpay(IO inner) throws Exception {
		
		LoansMinimumPaymentAmount objLoansMinimumPaymentAmount = new LoansMinimumPaymentAmount(inner.Xid);
		LoansMinimumPaymentAmount.IO LoansMinimumPaymentAmountIO = objLoansMinimumPaymentAmount.new IO();
		LoansMinimumPaymentAmountIO.setOB(inner);
		objLoansMinimumPaymentAmount.executeProcess(LoansMinimumPaymentAmountIO);
		return LoansMinimumPaymentAmountIO.BILLMINPAY;
	}
	
	public BigDecimal adjustBusinessDate(IO inner, BigDecimal ROLDT8, BigDecimal ROLTRM, String ROLMOD) throws Exception{
		if (ROLMOD.trim().equals("Y") ||
				ROLMOD.trim().equals("F") ||
				ROLMOD.trim().equals("B")) {
//			ROLMOD = inner.getLNPPAR2().getPadjdd().trim();
			ROLDT8 = CommonDateAdjustBusiness.adjustBusinessDate(ROLDT8, ROLMOD, inner.getLNDMAST().getBkn(), inner.getLNDMAST().getBrn(), 
					inner.getLNDMAST().getCurtyp(), inner.SSICUR, inner.Xid);
		}
		
		return ROLDT8;
	}
	
	public void updateLndmidmNspdt8(IO inner, String Xid) throws Exception{
		
		BigDecimal NSPDT8 = inner.getLNDMAST().getNspdt8();
		Predicate<LNDMIDM> condition = i -> i.getLmdue8().compareTo(NSPDT8) == 0
				&& i.getLmdmo().equals("X") == false
				&& i.getLmdamt().compareTo(BigDecimal.ZERO) > 0;
		List<LNDMIDM> listLNDMIDM = (List<LNDMIDM>) inner.getListLNDMIDM().stream().filter(condition).collect(Collectors.toList());
		
		List<LNDMIDM> listLNDMIDMToAdd = new ArrayList<LNDMIDM>(); 
		List<LNDMIDM> listLNDMIDMToRemove = new ArrayList<LNDMIDM>(); 
		for (LNDMIDM OBLNDMIDM : listLNDMIDM) {
			  
			BigDecimal ROLDT8 = OBLNDMIDM.getLmdue8();
			BigDecimal ROLTRM = BigDecimal.ONE;
			BigDecimal ROLDAY = inner.getLNDMAST().getNpday();
			String ROLMOD = inner.getLNPPAR2().getPadjdd().trim();
			ROLDT8 = CommonDateAdvanceByTerm.advanceMonth(ROLDT8, ROLTRM, ROLDAY, "Y");
			
			if (inner.getLNPPAR2().getPadjdd().trim().equals("Y") ||
					inner.getLNPPAR2().getPadjdd().trim().equals("F") ||
					inner.getLNPPAR2().getPadjdd().trim().equals("B")) {
			
				ROLDT8 = adjustBusinessDate(inner, ROLDT8, ROLTRM, ROLMOD);
			}

			// delete the old OB > insider new OB due to contain key value
 
			listLNDMIDMToRemove.add(OBLNDMIDM);

			Gson gson = CommonGsonParser.DEFAULT_GSON;
			String strObj = gson.toJson(OBLNDMIDM);
			LNDMIDM LNDMIDM = gson.fromJson(strObj, LNDMIDM.class);
			
			LNDMIDM.setLmdue8(ROLDT8);	 
			LNDMIDM.setMnlwid("LN2100");
			LNDMIDM.setMnltim(new Timestamp(System.currentTimeMillis()));
			listLNDMIDMToAdd.add(LNDMIDM);
		}
		 
		objSQLProcessor = new SQLProcessor(Xid);
		for (LNDMIDM R_LNDMIDM : listLNDMIDMToRemove) {
			inner.getListLNDMIDM().remove(R_LNDMIDM);
//			lmapCondition.clear();
//			lmapCondition.put("LMDACT", R_LNDMIDM.getLmdact());
//			lmapCondition.put("LMDATP", R_LNDMIDM.getLmdatp());
//			lmapCondition.put("LMDMO", R_LNDMIDM.getLmdmo());
//			lmapCondition.put("LMDCTP", R_LNDMIDM.getLmdctp());
//			lmapCondition.put("LMDUE8", R_LNDMIDM.getLmdue8());

			inner.deletelndmidm(R_LNDMIDM.getLmdact(), R_LNDMIDM.getLmdatp(), R_LNDMIDM.getLmdmo(), R_LNDMIDM.getLmdctp(), R_LNDMIDM.getLmdue8());
//			objSQLProcessor.sqlProcessor().delete("LNDMIDM", lmapCondition).execute();
		}
		
//		LN1200OB.getListLNDMIDM().removeAll(listLNDMIDMToRemove);
		inner.getListLNDMIDM().addAll(listLNDMIDMToAdd);
	}
	 
	public void calmatured(IO inner,LNDEXCP LNDEXCB) throws Exception {
		
		BigDecimal MiscellaneousCost = LoansUpdatePaymentBilling.setFeeCharges("M", LNDBNOT.getLbcdt8(), inner.getListLNDMIDM());
		MiscellaneousCost = MiscellaneousCost.subtract(inner.getLNDMAST().getBilmc());
		LNDBNOT.setLbcmc(MiscellaneousCost); 
	
		BigDecimal OtherCharges = LoansUpdatePaymentBilling.setFeeCharges("O", LNDBNOT.getLbcdt8(), inner.getListLNDMIDM());
		OtherCharges = OtherCharges.subtract(inner.getLNDMAST().getBiloc());
		LNDBNOT.setLbcoc(OtherCharges);
		
		BillRestructureLC(inner);
		LNDBNOT.setLbcrlc(LNDBNOT.getLbcrlc());
		
		BigDecimal MoratoriumInterest = inner.getLNDMAST().getMorint().setScale(ScaleValue.BAL, RoundingMode.DOWN);
		MoratoriumInterest = MoratoriumInterest.subtract(inner.getLNDMAST().getBilmin());
		
		MoraInt(inner,LNDEXCB,MoratoriumInterest);
		LNDBNOT.setLbcmin(LNDBNOT.getLbcmin());
		
		BillRestructureInt(inner);
		LNDBNOT.setLbcrin(LNDBNOT.getLbcrin());
		
		BigDecimal CommitmentFee = inner.getLNDMAST().getComacc().setScale(ScaleValue.BAL, RoundingMode.DOWN);
		CommitmentFee = CommitmentFee.subtract(inner.getLNDMAST().getBilcf());
		LNDBNOT.setLbccom(CommitmentFee);
	
		BigDecimal LateCharge = inner.getLNDMAST().getPenint().setScale(ScaleValue.BAL, RoundingMode.DOWN);
		LateCharge = LateCharge.subtract(inner.getLNDMAST().getBillc());
		LNDBNOT.setLbclc(LateCharge);
		
		LNDBNOT.setLbcint(inner.getLNDMAST().getAccint().subtract(inner.getLNDMAST().getBilint()).setScale(ScaleValue.BAL, RoundingMode.DOWN));
		LNDBNOT.setLbcprn(inner.getLNDMAST().getCbal().subtract(inner.getLNDMAST().getBilprn()));
		
		updateWPRTPM(inner, LNDBNOT.getLbcdt8());
	}
	
	public void setjdb(IO inner) throws Exception {

		/** 
		 * JUDGEMENT INDICATOR" VALUE = "Y" DESC = "Use Judgement Sum to accrue"
		 * JUDGEMENT INDICATOR" VALUE = "M" DESC = "Use Judgement Sum to memo accrue"
		 * JUDGEMENT INDICATOR" VALUE = "B" DESC = "Use Billing before/on Judgement date to accrue"
		 * JUDGEMENT INDICATOR" VALUE = "P" DESC = "Use Judgement Principal to accrue"
		 * JUDGEMENT INDICATOR" VALUE = "N" DESC = "No Judgement"
		 */
		if(inner.LL1PD8.compareTo(inner.getLNDJDSM().getJdefd8()) >= 0) {
			BigDecimal WRKAMT = BigDecimal.ZERO;
			retrievePaymentBilling(inner);
			if ((inner.getLNDMAST().getJdind().trim().equals("Y") 
					&& (inner.getLNDJDSM().getJdsum().compareTo(BigDecimal.ZERO) > 0))) 
			{
				AMOUNT = BigDecimal.ZERO;
				WRKAMT = inner.getLNDJDSM().getJdprn().subtract(inner.getLNDJDSM().getJdprnp());
				if ((WRKAMT.compareTo(BigDecimal.ZERO) > 0)) 
				{
					AMOUNT = AMOUNT.add(WRKAMT);
				}
	
				WRKAMT = inner.getLNDJDSM().getJdint().subtract(inner.getLNDJDSM().getJdintp());
				if ((WRKAMT.compareTo(BigDecimal.ZERO) > 0)) 
				{
					AMOUNT = AMOUNT.add(WRKAMT);
				}
	
				WRKAMT = inner.getLNDJDSM().getJdlc().subtract(inner.getLNDJDSM().getJdlcp());
				if ((WRKAMT.compareTo(BigDecimal.ZERO) > 0)) 
				{
					AMOUNT = AMOUNT.add(WRKAMT);
				}
	
				WRKAMT = inner.getLNDJDSM().getJdcf().subtract(inner.getLNDJDSM().getJdcfp());
				if ((WRKAMT.compareTo(BigDecimal.ZERO) > 0)) 
				{
					AMOUNT = AMOUNT.add(WRKAMT);
				}
	
				WRKAMT = inner.getLNDJDSM().getJdmc().subtract(inner.getLNDJDSM().getJdmcp());
				if ((WRKAMT.compareTo(BigDecimal.ZERO) > 0)) {
					AMOUNT = AMOUNT.add(WRKAMT);
				}
	
				WRKAMT = inner.getLNDJDSM().getJdoc().subtract(inner.getLNDJDSM().getJdocp());
				if ((WRKAMT.compareTo(BigDecimal.ZERO) > 0)) {
					AMOUNT = AMOUNT.add(WRKAMT);
				}
	
			} else {
				if (inner.getLNDMAST().getJdind().trim().equals("B")) 
				{
					
					if ((inner.getLNDJDSM().getJdsum().compareTo(BigDecimal.ZERO) == 0)) {
						AMOUNT = BigDecimal.ZERO;
					} else {
						AMOUNT = JDBPNO;
						if (inner.getLNPPAR2().getPacmc().trim().equals("Y")) 
						{
							AMOUNT = AMOUNT.add(JDBMCO);
						}
	
						if (inner.getLNPPAR2().getPacoc().trim().equals("Y")) 
						{
							AMOUNT = AMOUNT.add(JDBOCO);
						}
	
						if (inner.getLNPPAR2().getPaclc().trim().equals("Y")) 
						{
							AMOUNT = AMOUNT.add(JDBLCO);
						}
	
						if (inner.getLNPPAR2().getPaccf().trim().equals("Y")) 
						{
							AMOUNT = AMOUNT.add(JDBCFO);
						}
	
						if (inner.getLNPPAR2().getPacrin().trim().equals("Y")) 
						{
							AMOUNT = AMOUNT.add(JDBRIO);
						}
	
						if (inner.getLNPPAR2().getPacmor().trim().equals("Y")) 
						{
							AMOUNT = AMOUNT.add(JDBMIO);
						}
	
						if (inner.getLNPPAR2().getPacint().trim().equals("Y")) 
						{
							AMOUNT = AMOUNT.add(JDBINO);
						}
	
						if (inner.getLNPPAR2().getPacrlc().trim().equals("Y")) 
						{
							AMOUNT = AMOUNT.add(JDBRLO);
						}
	
						if (inner.getLNDJDSM().getJdpbin().trim().equals("Y")) 
						{
							AMOUNT = AMOUNT.add(JDBINX);
						}
	
						if (inner.getLNDJDSM().getJdpblc().trim().equals("Y")) 
						{
							AMOUNT = AMOUNT.add(JDBLCX);
						}
	
						if (inner.getLNDJDSM().getJdpbcf().trim().equals("Y")) 
						{
							AMOUNT = AMOUNT.add(JDBCFX);
						}
	
						if (inner.getLNDJDSM().getJdpbmc().trim().equals("Y")) 
						{
							AMOUNT = AMOUNT.add(JDBMCX);
						}
	
						if (inner.getLNDJDSM().getJdpboc().trim().equals("Y")) 
						{
							AMOUNT = AMOUNT.add(JDBOCX);
						}
	
					}
	
				} else {
					if (inner.getLNDMAST().getJdind().trim().equals("P")) 
					{
	//remove subtract - due to don't know why minus profit 
	//					AMOUNT = JDBPNO.subtract(JDBPRO);
						AMOUNT = inner.getLNDJDSM().getJdprn().subtract(inner.getLNDJDSM().getJdprnp());
					}
				}
			}
		}
	}
	
	public void retrievePaymentBilling(IO inner) throws Exception{
		String PFORMAT = "LNRIPMTB1";
		//srlnripmtb();//LoansRetrievePaymentBilling_Base.bildue
		LoansRetrievePaymentBilling objLoansRetrievePaymentBilling = new LoansRetrievePaymentBilling(inner.Xid);
		LoansRetrievePaymentBilling.IO LoansRetrievePaymentBillingIO = objLoansRetrievePaymentBilling.new IO() ;
				
		LoansRetrievePaymentBillingIO.setOB(inner);
		LoansRetrievePaymentBillingIO = objLoansRetrievePaymentBilling.executeProcess(LoansRetrievePaymentBillingIO, PFORMAT,
				inner.LL1NB8, inner.LL1PD8, inner.LL1PD8, inner.getLNDMAST().getAcctno(), inner.getLNDMAST().getActype());
		
		/* judgement - retrieve*/
		JDBPNO = LoansRetrievePaymentBillingIO.JDBPNO;
        JDBMCO = LoansRetrievePaymentBillingIO.JDBMCO;
        JDBOCO = LoansRetrievePaymentBillingIO.JDBOCO;
        JDBLCO = LoansRetrievePaymentBillingIO.JDBLCO;
        JDBCFO = LoansRetrievePaymentBillingIO.JDBCFO;
        JDBRIO = LoansRetrievePaymentBillingIO.JDBRIO;
        JDBMIO = LoansRetrievePaymentBillingIO.JDBMIO;
        JDBINO = LoansRetrievePaymentBillingIO.JDBINO;
        JDBRLO = LoansRetrievePaymentBillingIO.JDBRLO;
        JDBINX = LoansRetrievePaymentBillingIO.JDBINX;
        JDBLCX = LoansRetrievePaymentBillingIO.JDBLCX;
        JDBCFX = LoansRetrievePaymentBillingIO.JDBCFX;
        JDBMCX = LoansRetrievePaymentBillingIO.JDBMCX;
        JDBOCX = LoansRetrievePaymentBillingIO.JDBOCX;
        JDBPRO = LoansRetrievePaymentBillingIO.JDBPRO;
	}
	// *********************************************************************
	//  program ends
	// *********************************************************************
}
